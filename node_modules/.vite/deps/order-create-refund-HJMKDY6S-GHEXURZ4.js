import {
  getLoyaltyPlugin
} from "./chunk-Z22YQH73.js";
import {
  formatProvider
} from "./chunk-LVAKEKGS.js";
import {
  formatCurrency
} from "./chunk-6CGCHIIP.js";
import {
  getPaymentsFromOrder
} from "./chunk-WIT3MNZ2.js";
import {
  DEFAULT_FIELDS
} from "./chunk-F6THO362.js";
import {
  getLocaleAmount
} from "./chunk-UDMOPZAP.js";
import {
  currencies
} from "./chunk-H3DTEG3J.js";
import "./chunk-EGRHWZRV.js";
import {
  KeyboundForm
} from "./chunk-DP54EP6X.js";
import {
  RouteDrawer,
  useRouteModal
} from "./chunk-7XLFTZYJ.js";
import {
  t
} from "./chunk-PJH2FZXH.js";
import {
  enumType,
  nullType,
  numberType,
  objectType,
  stringType
} from "./chunk-4E3X3L63.js";
import {
  Form
} from "./chunk-DNYWW27L.js";
import {
  useForm
} from "./chunk-PXKNUQDM.js";
import {
  usePlugins
} from "./chunk-YHXUN4E7.js";
import "./chunk-2OXNHFEZ.js";
import "./chunk-EEHXHUB7.js";
import "./chunk-5IBQGJLF.js";
import "./chunk-YAWV2GEU.js";
import "./chunk-VOONU5MK.js";
import "./chunk-5G3BYEZL.js";
import "./chunk-NCS4GVER.js";
import "./chunk-J3LWFF2Z.js";
import "./chunk-X4KV32PX.js";
import "./chunk-75H2BIRR.js";
import {
  useRefundPayment
} from "./chunk-XHJVVVKA.js";
import "./chunk-7XAJZFZJ.js";
import "./chunk-LH7VBQ45.js";
import "./chunk-L6RKICKE.js";
import "./chunk-2G6KNIMO.js";
import "./chunk-FOJ72MEK.js";
import "./chunk-A5Y2XYYX.js";
import "./chunk-43S2XAJT.js";
import {
  useCreateOrderCreditLine,
  useOrder
} from "./chunk-6EKI5CSZ.js";
import "./chunk-KMHCN6GB.js";
import "./chunk-SPHXFJZX.js";
import "./chunk-6BC6GM6S.js";
import "./chunk-W3Q44AJR.js";
import "./chunk-RBP262EZ.js";
import "./chunk-472X4FWD.js";
import "./chunk-G7WHE7Q4.js";
import "./chunk-VMLNCWLE.js";
import "./chunk-CUPZIPFX.js";
import "./chunk-IZVJKWIN.js";
import {
  useTranslation
} from "./chunk-ZDVERLX5.js";
import "./chunk-EQCCHGRT.js";
import "./chunk-5GF3RGIE.js";
import {
  useParams,
  useSearchParams
} from "./chunk-T7YBVUWZ.js";
import {
  Button,
  CurrencyInput2 as CurrencyInput,
  Divider,
  Heading,
  Label,
  RadioGroup,
  Select,
  Textarea,
  clx,
  formatValue,
  toast
} from "./chunk-4QBNNGLV.js";
import "./chunk-5GLF3XJW.js";
import "./chunk-RPCDYKBN.js";
import "./chunk-BLW342M3.js";
import "./chunk-R35JBZ3G.js";
import {
  require_jsx_runtime
} from "./chunk-KBTYAULA.js";
import {
  require_react
} from "./chunk-QCHXOAYK.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/order-create-refund-HJMKDY6S.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react2 = __toESM(require_react(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var OrderBalanceSettlementSchema = objectType({
  settlement_type: enumType(["credit_line", "refund"]),
  refund: objectType({
    amount: objectType({
      value: stringType().or(numberType()).optional(),
      float: numberType().or(nullType())
    }),
    note: stringType().optional()
  }).optional(),
  credit_line: objectType({
    amount: objectType({
      value: stringType().or(numberType()).optional(),
      float: numberType().or(nullType())
    }),
    note: stringType().optional()
  }).optional()
});
var OrderBalanceSettlementForm = ({
  order
}) => {
  const { t: t2 } = useTranslation();
  const [searchParams] = useSearchParams();
  const { handleSuccess } = useRouteModal();
  const paymentId = searchParams.get("paymentId");
  const payments = getPaymentsFromOrder(order);
  const pendingDifference = order.summary.pending_difference * -1;
  const [activePayment, setActivePayment] = (0, import_react.useState)(
    paymentId ? payments.find((p) => p.id === paymentId) || null : null
  );
  const form = useForm({
    defaultValues: {
      settlement_type: "refund",
      refund: {
        amount: {
          value: "",
          float: null
        }
      },
      credit_line: {
        amount: {
          value: "",
          float: null
        }
      }
    },
    resolver: t(OrderBalanceSettlementSchema)
  });
  const { mutateAsync: createCreditLine, isPending: isCreditLinePending } = useCreateOrderCreditLine(order.id);
  const { mutateAsync: createRefund, isPending: isRefundPending } = useRefundPayment(order.id, activePayment == null ? void 0 : activePayment.id);
  const settlementType = form.watch("settlement_type");
  const handleSubmit = form.handleSubmit(async (data) => {
    var _a, _b;
    if (data.settlement_type === "credit_line") {
      if (((_a = data.credit_line) == null ? void 0 : _a.amount.float) === null) {
        return;
      }
      await createCreditLine(
        {
          amount: data.credit_line.amount.float * -1,
          reference: "refund",
          reference_id: order.id
        },
        {
          onSuccess: () => {
            toast.success(t2("orders.creditLines.createCreditLineSuccess"));
            handleSuccess();
          },
          onError: (error) => {
            toast.error(error.message);
          }
        }
      );
    }
    if (data.settlement_type === "refund") {
      if (((_b = data.refund) == null ? void 0 : _b.amount.float) === null) {
        return;
      }
      await createRefund(
        {
          amount: data.refund.amount.float,
          note: data.refund.note
        },
        {
          onSuccess: () => {
            toast.success(
              t2("orders.payment.refundPaymentSuccess", {
                amount: formatCurrency(
                  data.refund.amount.float,
                  order.currency_code
                )
              })
            );
            handleSuccess();
          },
          onError: (error) => {
            toast.error(error.message);
          }
        }
      );
    }
  });
  const currency = (0, import_react.useMemo)(
    () => currencies[order.currency_code.toUpperCase()],
    [order.currency_code]
  );
  (0, import_react.useEffect)(() => {
    form.clearErrors();
    const _minimum = (activePayment == null ? void 0 : activePayment.amount) ? Math.min(pendingDifference, activePayment.amount) : pendingDifference;
    const minimum = {
      value: _minimum.toFixed(currency.decimal_digits),
      float: _minimum
    };
    if (settlementType === "refund") {
      form.setValue("refund.amount", minimum);
    }
    if (settlementType === "credit_line") {
      form.setValue("credit_line.amount", minimum);
    }
  }, [settlementType, activePayment, pendingDifference, form, currency]);
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      onSubmit: handleSubmit,
      className: "flex size-full flex-col overflow-hidden",
      children: [
        (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { className: "flex-1 overflow-auto", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-4", children: [
          (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-4", children: [
            (0, import_jsx_runtime.jsx)(Label, { className: "txt-compact-small font-sans font-medium", children: t2("orders.balanceSettlement.settlementType") }),
            (0, import_jsx_runtime.jsxs)(
              RadioGroup,
              {
                className: "flex flex-col gap-y-3",
                value: settlementType,
                onValueChange: (value) => form.setValue("settlement_type", value),
                children: [
                  (0, import_jsx_runtime.jsx)(
                    RadioGroup.ChoiceBox,
                    {
                      value: "refund",
                      description: t2(
                        "orders.balanceSettlement.settlementTypes.paymentMethodDescription"
                      ),
                      label: t2(
                        "orders.balanceSettlement.settlementTypes.paymentMethod"
                      ),
                      className: clx("basis-1/2")
                    }
                  ),
                  (0, import_jsx_runtime.jsx)(
                    RadioGroup.ChoiceBox,
                    {
                      value: "credit_line",
                      description: t2(
                        "orders.balanceSettlement.settlementTypes.creditLineDescription"
                      ),
                      label: t2(
                        "orders.balanceSettlement.settlementTypes.creditLine"
                      ),
                      className: clx("basis-1/2")
                    }
                  )
                ]
              }
            )
          ] }),
          (0, import_jsx_runtime.jsx)(Divider, {}),
          settlementType === "refund" && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
            (0, import_jsx_runtime.jsx)("div", { className: "flex flex-col gap-y-4", children: (0, import_jsx_runtime.jsxs)(
              Select,
              {
                defaultValue: activePayment == null ? void 0 : activePayment.id,
                onValueChange: (value) => {
                  setActivePayment(payments.find((p) => p.id === value));
                },
                children: [
                  (0, import_jsx_runtime.jsx)(Label, { className: "txt-compact-small mb-[-6px] font-sans font-medium", children: t2("orders.payment.selectPaymentToRefund") }),
                  (0, import_jsx_runtime.jsx)(Select.Trigger, { children: (0, import_jsx_runtime.jsx)(
                    Select.Value,
                    {
                      placeholder: t2("orders.payment.selectPaymentToRefund")
                    }
                  ) }),
                  (0, import_jsx_runtime.jsx)(Select.Content, { children: payments.map((payment) => {
                    var _a;
                    const totalRefunded = ((_a = payment.refunds) == null ? void 0 : _a.reduce(
                      (acc, next) => next.amount + acc,
                      0
                    )) ?? 0;
                    return (0, import_jsx_runtime.jsxs)(
                      Select.Item,
                      {
                        value: payment.id,
                        disabled: !!payment.canceled_at || totalRefunded >= payment.amount,
                        children: [
                          (0, import_jsx_runtime.jsxs)("span", { children: [
                            getLocaleAmount(
                              payment.amount,
                              payment.currency_code
                            ),
                            " - "
                          ] }),
                          (0, import_jsx_runtime.jsx)("span", { children: payment.provider_id }),
                          (0, import_jsx_runtime.jsxs)("span", { children: [
                            " - (",
                            payment.id.replace("pay_", ""),
                            ")"
                          ] })
                        ]
                      },
                      payment.id
                    );
                  }) })
                ]
              }
            ) }),
            (0, import_jsx_runtime.jsx)(
              Form.Field,
              {
                control: form.control,
                name: "refund.amount",
                render: ({ field: { onChange, ...field } }) => {
                  return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
                    (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("fields.amount") }),
                    (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                      CurrencyInput,
                      {
                        ...field,
                        min: 0,
                        placeholder: formatValue({
                          value: "0",
                          decimalScale: currency.decimal_digits
                        }),
                        decimalScale: currency.decimal_digits,
                        symbol: currency.symbol_native,
                        code: currency.code,
                        value: field.value.value,
                        onValueChange: (_value, _name, values) => onChange({
                          value: (values == null ? void 0 : values.value) ?? "",
                          float: (values == null ? void 0 : values.float) ?? null
                        }),
                        autoFocus: true
                      }
                    ) }),
                    (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
                  ] });
                }
              }
            ),
            (0, import_jsx_runtime.jsx)(
              Form.Field,
              {
                control: form.control,
                name: `refund.note`,
                render: ({ field }) => {
                  return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
                    (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("fields.note") }),
                    (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(Textarea, { ...field }) }),
                    (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
                  ] });
                }
              }
            )
          ] }),
          settlementType === "credit_line" && (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: (0, import_jsx_runtime.jsx)(
            Form.Field,
            {
              control: form.control,
              name: "credit_line.amount",
              render: ({ field: { onChange, ...field } }) => {
                return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("fields.amount") }),
                  (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                    CurrencyInput,
                    {
                      ...field,
                      min: 0,
                      placeholder: formatValue({
                        value: "0",
                        decimalScale: currency.decimal_digits
                      }),
                      decimalScale: currency.decimal_digits,
                      symbol: currency.symbol_native,
                      code: currency.code,
                      value: field.value.value,
                      onValueChange: (_value, _name, values) => {
                        onChange({
                          value: (values == null ? void 0 : values.value) ?? "",
                          float: (values == null ? void 0 : values.float) ?? null
                        });
                      },
                      autoFocus: true
                    }
                  ) }),
                  (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
                ] });
              }
            }
          ) })
        ] }) }),
        (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { variant: "secondary", size: "small", children: t2("actions.cancel") }) }),
          (0, import_jsx_runtime.jsx)(
            Button,
            {
              isLoading: isCreditLinePending || isRefundPending,
              type: "submit",
              variant: "primary",
              size: "small",
              disabled: !!Object.keys(form.formState.errors || {}).length,
              children: t2("actions.save")
            }
          )
        ] }) })
      ]
    }
  ) });
};
var CreateRefundSchema = objectType({
  amount: objectType({
    value: stringType().or(numberType()),
    float: numberType().or(nullType())
  }),
  note: stringType().optional()
});
var CreateRefundForm = ({ order }) => {
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const [searchParams] = useSearchParams();
  const [paymentId, setPaymentId] = (0, import_react2.useState)(
    searchParams.get("paymentId") || void 0
  );
  const payments = getPaymentsFromOrder(order);
  const payment = payments.find((p) => p.id === paymentId);
  const paymentAmount = (payment == null ? void 0 : payment.amount) || 0;
  const currency = (0, import_react2.useMemo)(
    () => currencies[order.currency_code.toUpperCase()],
    [order.currency_code]
  );
  const form = useForm({
    defaultValues: {
      amount: {
        value: paymentAmount.toFixed(currency.decimal_digits),
        float: paymentAmount
      },
      note: ""
    },
    resolver: t(CreateRefundSchema)
  });
  (0, import_react2.useEffect)(() => {
    const pendingDifference = order.summary.pending_difference;
    const paymentAmount2 = (payment == null ? void 0 : payment.amount) || 0;
    const pendingAmount = pendingDifference < 0 ? Math.min(Math.abs(pendingDifference), paymentAmount2) : paymentAmount2;
    const normalizedAmount = pendingAmount < 0 ? pendingAmount * -1 : pendingAmount;
    form.setValue("amount", {
      value: normalizedAmount.toFixed(currency.decimal_digits),
      float: normalizedAmount
    });
  }, [(payment == null ? void 0 : payment.id) || ""]);
  const { mutateAsync, isPending } = useRefundPayment(order.id, payment == null ? void 0 : payment.id);
  const handleSubmit = form.handleSubmit(async (data) => {
    await mutateAsync(
      {
        amount: data.amount.float,
        note: data.note
      },
      {
        onSuccess: () => {
          toast.success(
            t2("orders.payment.refundPaymentSuccess", {
              amount: formatCurrency(
                data.amount.float,
                payment == null ? void 0 : payment.currency_code
              )
            })
          );
          handleSuccess();
        },
        onError: (error) => {
          toast.error(error.message);
        }
      }
    );
  });
  return (0, import_jsx_runtime2.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime2.jsxs)(
    KeyboundForm,
    {
      onSubmit: handleSubmit,
      className: "flex size-full flex-col overflow-hidden",
      children: [
        (0, import_jsx_runtime2.jsx)(RouteDrawer.Body, { className: "flex-1 overflow-auto", children: (0, import_jsx_runtime2.jsxs)("div", { className: "flex flex-col gap-y-4", children: [
          (0, import_jsx_runtime2.jsxs)(
            Select,
            {
              value: paymentId,
              onValueChange: (value) => {
                setPaymentId(value);
              },
              children: [
                (0, import_jsx_runtime2.jsx)(Label, { className: "txt-compact-small mb-[-6px] font-sans font-medium", children: t2("orders.payment.selectPaymentToRefund") }),
                (0, import_jsx_runtime2.jsx)(Select.Trigger, { children: (0, import_jsx_runtime2.jsx)(
                  Select.Value,
                  {
                    placeholder: t2("orders.payment.selectPaymentToRefund")
                  }
                ) }),
                (0, import_jsx_runtime2.jsx)(Select.Content, { children: payments.map((payment2) => {
                  const totalRefunded = payment2.refunds.reduce(
                    (acc, next) => next.amount + acc,
                    0
                  );
                  return (0, import_jsx_runtime2.jsxs)(
                    Select.Item,
                    {
                      value: payment2.id,
                      disabled: !!payment2.canceled_at || totalRefunded >= payment2.amount,
                      className: "flex items-center justify-center",
                      children: [
                        (0, import_jsx_runtime2.jsxs)("span", { children: [
                          getLocaleAmount(
                            payment2.amount,
                            payment2.currency_code
                          ),
                          " - "
                        ] }),
                        (0, import_jsx_runtime2.jsx)("span", { children: formatProvider(payment2.provider_id) }),
                        (0, import_jsx_runtime2.jsxs)("span", { children: [
                          " - (#",
                          payment2.id.substring(23),
                          ")"
                        ] })
                      ]
                    },
                    payment2.id
                  );
                }) })
              ]
            }
          ),
          (0, import_jsx_runtime2.jsx)(
            Form.Field,
            {
              control: form.control,
              name: "amount",
              rules: {
                required: true,
                min: 0,
                max: paymentAmount
              },
              render: ({ field: { onChange, ...field } }) => {
                return (0, import_jsx_runtime2.jsxs)(Form.Item, { children: [
                  (0, import_jsx_runtime2.jsx)(Form.Label, { children: t2("fields.amount") }),
                  (0, import_jsx_runtime2.jsx)(Form.Control, { children: (0, import_jsx_runtime2.jsx)(
                    CurrencyInput,
                    {
                      ...field,
                      min: 0,
                      placeholder: formatValue({
                        value: "0",
                        decimalScale: currency.decimal_digits
                      }),
                      decimalScale: currency.decimal_digits,
                      symbol: currency.symbol_native,
                      code: currency.code,
                      value: field.value.value,
                      onValueChange: (_value, _name, values) => onChange({
                        value: (values == null ? void 0 : values.value) ?? "",
                        float: (values == null ? void 0 : values.float) ?? null
                      }),
                      autoFocus: true
                    }
                  ) }),
                  (0, import_jsx_runtime2.jsx)(Form.ErrorMessage, {})
                ] });
              }
            }
          ),
          (0, import_jsx_runtime2.jsx)(
            Form.Field,
            {
              control: form.control,
              name: `note`,
              render: ({ field }) => {
                return (0, import_jsx_runtime2.jsxs)(Form.Item, { children: [
                  (0, import_jsx_runtime2.jsx)(Form.Label, { children: t2("fields.note") }),
                  (0, import_jsx_runtime2.jsx)(Form.Control, { children: (0, import_jsx_runtime2.jsx)(Textarea, { ...field }) }),
                  (0, import_jsx_runtime2.jsx)(Form.ErrorMessage, {})
                ] });
              }
            }
          )
        ] }) }),
        (0, import_jsx_runtime2.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          (0, import_jsx_runtime2.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime2.jsx)(Button, { variant: "secondary", size: "small", children: t2("actions.cancel") }) }),
          (0, import_jsx_runtime2.jsx)(
            Button,
            {
              isLoading: isPending,
              type: "submit",
              variant: "primary",
              size: "small",
              disabled: !!Object.keys(form.formState.errors || {}).length,
              children: t2("actions.save")
            }
          )
        ] }) })
      ]
    }
  ) });
};
var OrderCreateRefund = () => {
  const { t: t2 } = useTranslation();
  const params = useParams();
  const { order } = useOrder(params.id, {
    fields: DEFAULT_FIELDS
  });
  const { plugins = [] } = usePlugins();
  const loyaltyPlugin = getLoyaltyPlugin(plugins);
  return (0, import_jsx_runtime3.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime3.jsx)(RouteDrawer.Header, { children: (0, import_jsx_runtime3.jsx)(Heading, { children: t2("orders.payment.createRefund") }) }),
    order && !loyaltyPlugin && (0, import_jsx_runtime3.jsx)(CreateRefundForm, { order }),
    order && loyaltyPlugin && (0, import_jsx_runtime3.jsx)(OrderBalanceSettlementForm, { order })
  ] });
};
export {
  OrderCreateRefund as Component
};
//# sourceMappingURL=order-create-refund-HJMKDY6S-GHEXURZ4.js.map
