import {
  Combobox,
  ComboboxDisclosure,
  ComboboxItem,
  ComboboxItemCheck,
  ComboboxItemValue,
  ComboboxPopover,
  ComboboxProvider,
  Separator
} from "./chunk-5RMC4PLS.js";
import {
  matchSorter
} from "./chunk-IA4ROPJA.js";
import {
  useTranslation
} from "./chunk-ZDVERLX5.js";
import {
  CheckMini,
  EllipseMiniSolid,
  PlusMini,
  Text,
  TrianglesMini,
  XMarkMini,
  clx
} from "./chunk-4QBNNGLV.js";
import {
  require_jsx_runtime
} from "./chunk-KBTYAULA.js";
import {
  require_react
} from "./chunk-QCHXOAYK.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/chunk-2PMSBTXI.mjs
var import_react2 = __toESM(require_react(), 1);
var import_react3 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
function genericForwardRef(render) {
  return (0, import_react3.forwardRef)(render);
}
var TABLUAR_NUM_WIDTH = 8;
var TAG_BASE_WIDTH = 28;
var ComboboxImpl = ({
  value: controlledValue,
  onChange,
  searchValue: controlledSearchValue,
  onSearchValueChange,
  options,
  className,
  placeholder,
  fetchNextPage,
  isFetchingNextPage,
  onCreateOption,
  noResultsPlaceholder,
  allowClear,
  ...inputProps
}, ref) => {
  var _a;
  const [open, setOpen] = (0, import_react2.useState)(false);
  const [isPending, startTransition] = (0, import_react2.useTransition)();
  const { t } = useTranslation();
  const comboboxRef = (0, import_react2.useRef)(null);
  const listboxRef = (0, import_react2.useRef)(null);
  (0, import_react2.useImperativeHandle)(ref, () => comboboxRef.current);
  const isValueControlled = controlledValue !== void 0;
  const isSearchControlled = controlledSearchValue !== void 0;
  const isArrayValue = Array.isArray(controlledValue);
  const emptyState = isArrayValue ? [] : "";
  const [uncontrolledSearchValue, setUncontrolledSearchValue] = (0, import_react2.useState)(
    controlledSearchValue || ""
  );
  const defferedSearchValue = (0, import_react2.useDeferredValue)(uncontrolledSearchValue);
  const [uncontrolledValue, setUncontrolledValue] = (0, import_react2.useState)(emptyState);
  const searchValue = isSearchControlled ? controlledSearchValue : uncontrolledSearchValue;
  const selectedValues = isValueControlled ? controlledValue : uncontrolledValue;
  const handleValueChange = (newValues) => {
    const exists = options.filter((o) => !o.disabled).find((o) => {
      if (isArrayValue) {
        return newValues == null ? void 0 : newValues.includes(o.value);
      }
      return o.value === newValues;
    });
    if (!exists && onCreateOption && newValues) {
      onCreateOption(newValues);
    }
    if (!isValueControlled) {
      setUncontrolledValue(newValues || emptyState);
    }
    if (onChange) {
      onChange(newValues);
    }
    setUncontrolledSearchValue("");
  };
  const handleSearchChange = (query) => {
    setUncontrolledSearchValue(query);
    if (onSearchValueChange) {
      onSearchValueChange(query);
    }
  };
  const matches = (0, import_react2.useMemo)(() => {
    if (isSearchControlled) {
      return [];
    }
    return matchSorter(options, defferedSearchValue, {
      keys: ["label"]
    });
  }, [options, defferedSearchValue, isSearchControlled]);
  const observer = (0, import_react2.useRef)(
    new IntersectionObserver(
      (entries) => {
        const first = entries[0];
        if (first.isIntersecting) {
          fetchNextPage == null ? void 0 : fetchNextPage();
        }
      },
      { threshold: 1 }
    )
  );
  const lastOptionRef = (0, import_react2.useCallback)(
    (node) => {
      if (isFetchingNextPage) {
        return;
      }
      if (observer.current) {
        observer.current.disconnect();
      }
      if (node) {
        observer.current.observe(node);
      }
    },
    [isFetchingNextPage]
  );
  const handleOpenChange = (open2) => {
    if (!open2) {
      setUncontrolledSearchValue("");
    }
    setOpen(open2);
  };
  const hasValue = (selectedValues == null ? void 0 : selectedValues.length) > 0;
  const showTag = hasValue && isArrayValue;
  const showSelected = showTag && !searchValue && !open;
  const hideInput = !isArrayValue && hasValue && !open;
  const selectedLabel = (_a = options.find((o) => o.value === selectedValues)) == null ? void 0 : _a.label;
  const hidePlaceholder = showSelected || open;
  const tagWidth = (0, import_react2.useMemo)(() => {
    if (!Array.isArray(selectedValues)) {
      return TAG_BASE_WIDTH + TABLUAR_NUM_WIDTH;
    }
    const count = selectedValues.length;
    const digits = count.toString().length;
    return TAG_BASE_WIDTH + digits * TABLUAR_NUM_WIDTH;
  }, [selectedValues]);
  const results = (0, import_react2.useMemo)(() => {
    return isSearchControlled ? options : matches;
  }, [matches, options, isSearchControlled]);
  return (0, import_jsx_runtime.jsxs)(
    ComboboxProvider,
    {
      open,
      setOpen: handleOpenChange,
      selectedValue: selectedValues,
      setSelectedValue: (value) => handleValueChange(value),
      value: uncontrolledSearchValue,
      setValue: (query) => {
        startTransition(() => handleSearchChange(query));
      },
      children: [
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            className: clx(
              "relative flex cursor-pointer items-center gap-x-2 overflow-hidden",
              "h-8 w-full rounded-md",
              "bg-ui-bg-field transition-fg shadow-borders-base",
              "has-[input:focus]:shadow-borders-interactive-with-active",
              "has-[:invalid]:shadow-borders-error has-[[aria-invalid=true]]:shadow-borders-error",
              "has-[:disabled]:bg-ui-bg-disabled has-[:disabled]:text-ui-fg-disabled has-[:disabled]:cursor-not-allowed",
              className
            ),
            style: {
              "--tag-width": `${tagWidth}px`
            },
            children: [
              showTag && (0, import_jsx_runtime.jsxs)(
                "button",
                {
                  type: "button",
                  onClick: (e) => {
                    e.preventDefault();
                    handleValueChange(isArrayValue ? [] : void 0);
                  },
                  className: "bg-ui-bg-base hover:bg-ui-bg-base-hover txt-compact-small-plus text-ui-fg-subtle focus-within:border-ui-fg-interactive transition-fg absolute left-0.5 top-0.5 z-[1] flex h-[28px] items-center rounded-[4px] border py-[3px] pl-1.5 pr-1 outline-none",
                  children: [
                    (0, import_jsx_runtime.jsx)("span", { className: "tabular-nums", children: selectedValues.length }),
                    (0, import_jsx_runtime.jsx)(XMarkMini, { className: "text-ui-fg-muted" })
                  ]
                }
              ),
              (0, import_jsx_runtime.jsxs)("div", { className: "relative flex size-full items-center", children: [
                showSelected && (0, import_jsx_runtime.jsx)(
                  "div",
                  {
                    className: clx(
                      "pointer-events-none absolute inset-y-0 flex size-full items-center",
                      {
                        "left-[calc(var(--tag-width)+8px)]": showTag,
                        "left-2": !showTag
                      }
                    ),
                    children: (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", children: t("general.selected") })
                  }
                ),
                hideInput && (0, import_jsx_runtime.jsx)(
                  "div",
                  {
                    className: clx(
                      "pointer-events-none absolute inset-y-0 flex size-full items-center overflow-hidden",
                      {
                        "left-[calc(var(--tag-width)+8px)]": showTag,
                        "left-2": !showTag
                      }
                    ),
                    children: (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", className: "truncate", children: selectedLabel })
                  }
                ),
                (0, import_jsx_runtime.jsx)(
                  Combobox,
                  {
                    autoSelect: true,
                    ref: comboboxRef,
                    onFocus: () => setOpen(true),
                    className: clx(
                      "txt-compact-small text-ui-fg-base !placeholder:text-ui-fg-muted transition-fg size-full cursor-pointer bg-transparent pl-2 pr-8 outline-none focus:cursor-text",
                      "hover:bg-ui-bg-field-hover",
                      {
                        "opacity-0": hideInput,
                        "pl-2": !showTag,
                        "pl-[calc(var(--tag-width)+8px)]": showTag
                      }
                    ),
                    placeholder: hidePlaceholder ? void 0 : placeholder,
                    ...inputProps
                  }
                )
              ] }),
              allowClear && controlledValue && (0, import_jsx_runtime.jsx)(
                "button",
                {
                  type: "button",
                  onClick: (e) => {
                    e.preventDefault();
                    handleValueChange(void 0);
                  },
                  className: "bg-ui-bg-base hover:bg-ui-bg-base-hover txt-compact-small-plus text-ui-fg-subtle focus-within:border-ui-fg-interactive transition-fg absolute right-[28px] top-0.5 z-[1] flex h-[28px] items-center rounded-[4px] border px-1.5 py-[2px] outline-none",
                  children: (0, import_jsx_runtime.jsx)(XMarkMini, { className: "text-ui-fg-muted" })
                }
              ),
              (0, import_jsx_runtime.jsx)(
                ComboboxDisclosure,
                {
                  render: (props) => {
                    return (0, import_jsx_runtime.jsx)(
                      "button",
                      {
                        ...props,
                        type: "button",
                        className: "text-ui-fg-muted transition-fg hover:bg-ui-bg-field-hover absolute right-0 flex size-8 items-center justify-center rounded-r outline-none",
                        children: (0, import_jsx_runtime.jsx)(TrianglesMini, {})
                      }
                    );
                  }
                }
              )
            ]
          }
        ),
        (0, import_jsx_runtime.jsxs)(
          ComboboxPopover,
          {
            gutter: 4,
            sameWidth: true,
            ref: listboxRef,
            role: "listbox",
            className: clx(
              "shadow-elevation-flyout bg-ui-bg-base z-50 rounded-[8px] p-1",
              "max-h-[200px] overflow-y-auto",
              "data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95",
              "data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95",
              "data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2"
            ),
            style: {
              pointerEvents: open ? "auto" : "none"
            },
            "aria-busy": isPending,
            children: [
              results.map(({ value, label, disabled }) => (0, import_jsx_runtime.jsxs)(
                ComboboxItem,
                {
                  value,
                  focusOnHover: true,
                  setValueOnClick: false,
                  disabled,
                  className: clx(
                    "transition-fg bg-ui-bg-base data-[active-item=true]:bg-ui-bg-base-hover group flex cursor-pointer items-center gap-x-2 rounded-[4px] px-2 py-1",
                    {
                      "text-ui-fg-disabled": disabled,
                      "bg-ui-bg-component": disabled
                    }
                  ),
                  children: [
                    (0, import_jsx_runtime.jsx)(ComboboxItemCheck, { className: "flex !size-5 items-center justify-center", children: isArrayValue ? (0, import_jsx_runtime.jsx)(CheckMini, {}) : (0, import_jsx_runtime.jsx)(EllipseMiniSolid, {}) }),
                    (0, import_jsx_runtime.jsx)(ComboboxItemValue, { className: "txt-compact-small", children: label })
                  ]
                },
                value
              )),
              !!fetchNextPage && (0, import_jsx_runtime.jsx)("div", { ref: lastOptionRef, className: "w-px" }),
              isFetchingNextPage && (0, import_jsx_runtime.jsx)("div", { className: "transition-fg bg-ui-bg-base flex items-center rounded-[4px] px-2 py-1.5", children: (0, import_jsx_runtime.jsx)("div", { className: "bg-ui-bg-component size-full h-5 w-full animate-pulse rounded-[4px]" }) }),
              !results.length && (noResultsPlaceholder && !(searchValue == null ? void 0 : searchValue.length) ? noResultsPlaceholder : (0, import_jsx_runtime.jsx)("div", { className: "flex items-center gap-x-2 rounded-[4px] px-2 py-1.5", children: (0, import_jsx_runtime.jsx)(
                Text,
                {
                  size: "small",
                  leading: "compact",
                  className: "text-ui-fg-subtle",
                  children: t("general.noResultsTitle")
                }
              ) })),
              !results.length && onCreateOption && (0, import_jsx_runtime.jsxs)(import_react2.Fragment, { children: [
                (0, import_jsx_runtime.jsx)(Separator, { className: "bg-ui-border-base -mx-1" }),
                (0, import_jsx_runtime.jsxs)(
                  ComboboxItem,
                  {
                    value: uncontrolledSearchValue,
                    focusOnHover: true,
                    setValueOnClick: false,
                    className: "transition-fg bg-ui-bg-base data-[active-item=true]:bg-ui-bg-base-hover group mt-1 flex cursor-pointer items-center gap-x-2 rounded-[4px] px-2 py-1.5",
                    children: [
                      (0, import_jsx_runtime.jsx)(PlusMini, { className: "text-ui-fg-subtle" }),
                      (0, import_jsx_runtime.jsxs)(Text, { size: "small", leading: "compact", children: [
                        t("actions.create"),
                        ' "',
                        searchValue,
                        '"'
                      ] })
                    ]
                  }
                )
              ] })
            ]
          }
        )
      ]
    }
  );
};
var Combobox2 = genericForwardRef(ComboboxImpl);

export {
  Combobox2 as Combobox
};
//# sourceMappingURL=chunk-OT3UMOHX.js.map
