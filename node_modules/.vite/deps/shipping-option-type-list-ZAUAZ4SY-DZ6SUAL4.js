import {
  useDeleteShippingOptionTypeAction
} from "./chunk-ED55FC7K.js";
import {
  DateCell
} from "./chunk-ZFX573FF.js";
import {
  TextCell
} from "./chunk-2CATKMVQ.js";
import {
  useDateTableFilters
} from "./chunk-JBWICDIY.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-S5JEKJNE.js";
import {
  _DataTable,
  useDataTable
} from "./chunk-ES3YXSXR.js";
import "./chunk-VUV2BRNB.js";
import "./chunk-HALGSGTO.js";
import "./chunk-BA25S2VZ.js";
import "./chunk-CEFMLELK.js";
import "./chunk-IFIPMAMX.js";
import {
  SingleColumnPage
} from "./chunk-2XI3AO7V.js";
import "./chunk-O5FFUBSU.js";
import "./chunk-OO5WSMOM.js";
import "./chunk-257MHRUF.js";
import {
  useQueryParams
} from "./chunk-32T72GVU.js";
import "./chunk-42W2KYRJ.js";
import {
  useExtension
} from "./chunk-FTD3ZWHZ.js";
import "./chunk-TACR72CW.js";
import "./chunk-2DXGTPQW.js";
import "./chunk-MPXR7HT5.js";
import "./chunk-3LQQT5NQ.js";
import "./chunk-44Z5LPNY.js";
import "./chunk-27OTIEV6.js";
import "./chunk-Q7HIPOTC.js";
import "./chunk-4UMB4KDB.js";
import {
  useShippingOptionTypes
} from "./chunk-YHXUN4E7.js";
import "./chunk-2OXNHFEZ.js";
import "./chunk-EEHXHUB7.js";
import "./chunk-5IBQGJLF.js";
import "./chunk-YAWV2GEU.js";
import "./chunk-VOONU5MK.js";
import "./chunk-5G3BYEZL.js";
import "./chunk-NCS4GVER.js";
import "./chunk-J3LWFF2Z.js";
import "./chunk-X4KV32PX.js";
import "./chunk-75H2BIRR.js";
import "./chunk-XHJVVVKA.js";
import "./chunk-7XAJZFZJ.js";
import "./chunk-LH7VBQ45.js";
import "./chunk-L6RKICKE.js";
import "./chunk-2G6KNIMO.js";
import "./chunk-FOJ72MEK.js";
import "./chunk-A5Y2XYYX.js";
import "./chunk-43S2XAJT.js";
import "./chunk-6EKI5CSZ.js";
import "./chunk-KMHCN6GB.js";
import "./chunk-SPHXFJZX.js";
import "./chunk-6BC6GM6S.js";
import "./chunk-W3Q44AJR.js";
import "./chunk-RBP262EZ.js";
import {
  ActionMenu
} from "./chunk-XZFGFOAK.js";
import "./chunk-Q3OM2W2A.js";
import "./chunk-472X4FWD.js";
import "./chunk-G7WHE7Q4.js";
import "./chunk-VMLNCWLE.js";
import "./chunk-CUPZIPFX.js";
import "./chunk-IZVJKWIN.js";
import {
  useTranslation
} from "./chunk-ZDVERLX5.js";
import "./chunk-EQCCHGRT.js";
import "./chunk-5GF3RGIE.js";
import {
  Link
} from "./chunk-T7YBVUWZ.js";
import {
  Button,
  Container,
  Heading,
  PencilSquare,
  Text,
  Trash,
  createColumnHelper
} from "./chunk-4QBNNGLV.js";
import "./chunk-5GLF3XJW.js";
import "./chunk-RPCDYKBN.js";
import "./chunk-BLW342M3.js";
import {
  keepPreviousData
} from "./chunk-R35JBZ3G.js";
import {
  require_jsx_runtime
} from "./chunk-KBTYAULA.js";
import {
  require_react
} from "./chunk-QCHXOAYK.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/shipping-option-type-list-ZAUAZ4SY.mjs
var import_react = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var columnHelper = createColumnHelper();
var useShippingOptionTypeTableColumns = () => {
  const { t } = useTranslation();
  return (0, import_react2.useMemo)(
    () => [
      columnHelper.accessor("label", {
        header: () => t("fields.label"),
        cell: ({ getValue }) => (0, import_jsx_runtime.jsx)(TextCell, { text: getValue() })
      }),
      columnHelper.accessor("code", {
        header: () => t("fields.code"),
        cell: ({ getValue }) => (0, import_jsx_runtime.jsx)(TextCell, { text: getValue() })
      }),
      columnHelper.accessor("description", {
        header: () => t("fields.description"),
        cell: ({ getValue }) => (0, import_jsx_runtime.jsx)(TextCell, { text: getValue() })
      }),
      columnHelper.accessor("created_at", {
        header: () => t("fields.createdAt"),
        cell: ({ getValue }) => {
          return (0, import_jsx_runtime.jsx)(DateCell, { date: getValue() });
        }
      }),
      columnHelper.accessor("updated_at", {
        header: () => t("fields.updatedAt"),
        cell: ({ getValue }) => {
          return (0, import_jsx_runtime.jsx)(DateCell, { date: getValue() });
        }
      })
    ],
    [t]
  );
};
var useShippingOptionTypeTableFilters = () => {
  return useDateTableFilters();
};
var useShippingOptionTypeTableQuery = ({
  prefix,
  pageSize = 20
}) => {
  const queryObject = useQueryParams(
    ["offset", "q", "order", "created_at", "updated_at"],
    prefix
  );
  const { offset, q, order, created_at, updated_at } = queryObject;
  const searchParams = {
    limit: pageSize,
    offset: offset ? Number(offset) : 0,
    order,
    created_at: created_at ? JSON.parse(created_at) : void 0,
    updated_at: updated_at ? JSON.parse(updated_at) : void 0,
    q
  };
  return {
    searchParams,
    raw: queryObject
  };
};
var ShippingOptionTypeRowActions = ({
  shippingOptionType
}) => {
  const { t } = useTranslation();
  const handleDelete = useDeleteShippingOptionTypeAction(
    shippingOptionType.id,
    shippingOptionType.label
  );
  return (0, import_jsx_runtime2.jsx)(
    ActionMenu,
    {
      groups: [
        {
          actions: [
            {
              label: t("actions.edit"),
              icon: (0, import_jsx_runtime2.jsx)(PencilSquare, {}),
              to: `/settings/locations/shipping-option-types/${shippingOptionType.id}/edit`
            }
          ]
        },
        {
          actions: [
            {
              label: t("actions.delete"),
              icon: (0, import_jsx_runtime2.jsx)(Trash, {}),
              onClick: handleDelete
            }
          ]
        }
      ]
    }
  );
};
var PAGE_SIZE = 20;
var ShippingOptionTypeListTable = () => {
  const { t } = useTranslation();
  const { searchParams, raw } = useShippingOptionTypeTableQuery({
    pageSize: PAGE_SIZE
  });
  const { shipping_option_types, count, isLoading, isError, error } = useShippingOptionTypes(searchParams, {
    placeholderData: keepPreviousData
  });
  const filters = useShippingOptionTypeTableFilters();
  const columns = useColumns();
  const { table } = useDataTable({
    columns,
    data: shipping_option_types,
    count,
    getRowId: (row) => row.id,
    pageSize: PAGE_SIZE
  });
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime3.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime3.jsxs)("div", { children: [
        (0, import_jsx_runtime3.jsx)(Heading, { children: t("shippingOptionTypes.domain") }),
        (0, import_jsx_runtime3.jsx)(Text, { className: "text-ui-fg-subtle", size: "small", children: t("shippingOptionTypes.subtitle") })
      ] }),
      (0, import_jsx_runtime3.jsx)(Button, { size: "small", variant: "secondary", asChild: true, children: (0, import_jsx_runtime3.jsx)(Link, { to: "create", children: t("actions.create") }) })
    ] }),
    (0, import_jsx_runtime3.jsx)(
      _DataTable,
      {
        table,
        filters,
        isLoading,
        columns,
        pageSize: PAGE_SIZE,
        count,
        orderBy: [
          { key: "label", label: t("fields.label") },
          { key: "code", label: t("fields.code") },
          { key: "description", label: t("fields.description") },
          { key: "created_at", label: t("fields.createdAt") },
          { key: "updated_at", label: t("fields.updatedAt") }
        ],
        navigateTo: ({ original }) => original.id,
        queryObject: raw,
        pagination: true,
        search: true
      }
    )
  ] });
};
var columnHelper2 = createColumnHelper();
var useColumns = () => {
  const base = useShippingOptionTypeTableColumns();
  return (0, import_react.useMemo)(
    () => [
      ...base,
      columnHelper2.display({
        id: "actions",
        cell: ({ row }) => {
          return (0, import_jsx_runtime3.jsx)(ShippingOptionTypeRowActions, { shippingOptionType: row.original });
        }
      })
    ],
    [base]
  );
};
var ShippingOptionTypeList = () => {
  const { getWidgets } = useExtension();
  return (0, import_jsx_runtime4.jsx)(
    SingleColumnPage,
    {
      widgets: {
        after: getWidgets("shipping_option_type.list.after"),
        before: getWidgets("shipping_option_type.list.before")
      },
      children: (0, import_jsx_runtime4.jsx)(ShippingOptionTypeListTable, {})
    }
  );
};
export {
  ShippingOptionTypeList as Component
};
//# sourceMappingURL=shipping-option-type-list-ZAUAZ4SY-DZ6SUAL4.js.map
