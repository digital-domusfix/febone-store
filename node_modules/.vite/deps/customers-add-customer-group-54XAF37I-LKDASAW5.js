import {
  useCustomerGroupTableColumns
} from "./chunk-UFZ3PALQ.js";
import {
  useCustomerGroupTableQuery
} from "./chunk-I2ZOQM4X.js";
import "./chunk-2CATKMVQ.js";
import {
  useCustomerGroupTableFilters
} from "./chunk-3FWSTVHD.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-S5JEKJNE.js";
import {
  _DataTable,
  useDataTable
} from "./chunk-ES3YXSXR.js";
import "./chunk-VUV2BRNB.js";
import "./chunk-HALGSGTO.js";
import "./chunk-BA25S2VZ.js";
import "./chunk-CEFMLELK.js";
import "./chunk-IFIPMAMX.js";
import "./chunk-O5FFUBSU.js";
import "./chunk-EGRHWZRV.js";
import {
  KeyboundForm
} from "./chunk-DP54EP6X.js";
import "./chunk-257MHRUF.js";
import "./chunk-32T72GVU.js";
import "./chunk-42W2KYRJ.js";
import {
  RouteFocusModal,
  useRouteModal
} from "./chunk-7XLFTZYJ.js";
import {
  t
} from "./chunk-PJH2FZXH.js";
import {
  arrayType,
  objectType,
  stringType
} from "./chunk-4E3X3L63.js";
import "./chunk-TACR72CW.js";
import "./chunk-2DXGTPQW.js";
import "./chunk-MPXR7HT5.js";
import "./chunk-3LQQT5NQ.js";
import "./chunk-44Z5LPNY.js";
import "./chunk-27OTIEV6.js";
import "./chunk-Q7HIPOTC.js";
import "./chunk-4UMB4KDB.js";
import "./chunk-DNYWW27L.js";
import {
  useForm
} from "./chunk-PXKNUQDM.js";
import "./chunk-YHXUN4E7.js";
import "./chunk-2OXNHFEZ.js";
import "./chunk-EEHXHUB7.js";
import "./chunk-5IBQGJLF.js";
import "./chunk-YAWV2GEU.js";
import "./chunk-VOONU5MK.js";
import "./chunk-5G3BYEZL.js";
import "./chunk-NCS4GVER.js";
import "./chunk-J3LWFF2Z.js";
import "./chunk-X4KV32PX.js";
import "./chunk-75H2BIRR.js";
import "./chunk-XHJVVVKA.js";
import "./chunk-7XAJZFZJ.js";
import "./chunk-LH7VBQ45.js";
import {
  useBatchCustomerCustomerGroups,
  useCustomerGroups
} from "./chunk-L6RKICKE.js";
import "./chunk-2G6KNIMO.js";
import "./chunk-FOJ72MEK.js";
import "./chunk-A5Y2XYYX.js";
import "./chunk-43S2XAJT.js";
import "./chunk-6EKI5CSZ.js";
import "./chunk-KMHCN6GB.js";
import "./chunk-SPHXFJZX.js";
import "./chunk-6BC6GM6S.js";
import "./chunk-W3Q44AJR.js";
import "./chunk-RBP262EZ.js";
import "./chunk-Q3OM2W2A.js";
import "./chunk-472X4FWD.js";
import "./chunk-G7WHE7Q4.js";
import "./chunk-VMLNCWLE.js";
import "./chunk-CUPZIPFX.js";
import "./chunk-IZVJKWIN.js";
import {
  useTranslation
} from "./chunk-ZDVERLX5.js";
import "./chunk-EQCCHGRT.js";
import "./chunk-5GF3RGIE.js";
import {
  useParams
} from "./chunk-T7YBVUWZ.js";
import {
  Button,
  Checkbox,
  Hint,
  Tooltip,
  createColumnHelper,
  toast
} from "./chunk-4QBNNGLV.js";
import "./chunk-5GLF3XJW.js";
import "./chunk-RPCDYKBN.js";
import "./chunk-BLW342M3.js";
import "./chunk-R35JBZ3G.js";
import {
  require_jsx_runtime
} from "./chunk-KBTYAULA.js";
import {
  require_react
} from "./chunk-QCHXOAYK.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/customers-add-customer-group-54XAF37I.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var AddCustomerGroupsSchema = objectType({
  customer_group_ids: arrayType(stringType()).min(1)
});
var PAGE_SIZE = 10;
var AddCustomerGroupsForm = ({
  customerId
}) => {
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const [isPending, setIsPending] = (0, import_react.useState)(false);
  const { mutateAsync: batchCustomerCustomerGroups } = useBatchCustomerCustomerGroups(customerId);
  const form = useForm({
    defaultValues: {
      customer_group_ids: []
    },
    resolver: t(AddCustomerGroupsSchema)
  });
  const { setValue } = form;
  const [rowSelection, setRowSelection] = (0, import_react.useState)({});
  (0, import_react.useEffect)(() => {
    setValue(
      "customer_group_ids",
      Object.keys(rowSelection).filter((k) => rowSelection[k]),
      {
        shouldDirty: true,
        shouldTouch: true
      }
    );
  }, [rowSelection, setValue]);
  const { searchParams, raw } = useCustomerGroupTableQuery({
    pageSize: PAGE_SIZE
  });
  const filters = useCustomerGroupTableFilters();
  const {
    customer_groups,
    count,
    isPending: isLoading,
    isError,
    error
  } = useCustomerGroups({
    fields: "*customers",
    ...searchParams
  });
  const updater = (fn) => {
    const state = typeof fn === "function" ? fn(rowSelection) : fn;
    const ids = Object.keys(state);
    setValue("customer_group_ids", ids, {
      shouldDirty: true,
      shouldTouch: true
    });
    setRowSelection(state);
  };
  const columns = useColumns();
  const { table } = useDataTable({
    data: customer_groups ?? [],
    columns,
    count,
    enablePagination: true,
    enableRowSelection: (row) => {
      var _a;
      return !((_a = row.original.customers) == null ? void 0 : _a.map((c) => c.id).includes(customerId));
    },
    getRowId: (row) => row.id,
    pageSize: PAGE_SIZE,
    rowSelection: {
      state: rowSelection,
      updater
    }
  });
  const handleSubmit = form.handleSubmit(async (data) => {
    setIsPending(true);
    try {
      await batchCustomerCustomerGroups({ add: data.customer_group_ids });
      toast.success(
        t2("customers.groups.add.success", {
          groups: data.customer_group_ids.map((id) => customer_groups == null ? void 0 : customer_groups.find((g) => g.id === id)).filter(Boolean).map((cg) => cg == null ? void 0 : cg.name)
        })
      );
      handleSuccess(`/customers/${customerId}`);
    } catch (e) {
      toast.error(e.message);
    } finally {
      setIsPending(false);
    }
  });
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime.jsx)(RouteFocusModal.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      className: "flex h-full flex-col overflow-hidden",
      onSubmit: handleSubmit,
      children: [
        (0, import_jsx_runtime.jsx)(RouteFocusModal.Header, { children: (0, import_jsx_runtime.jsx)("div", { className: "flex items-center justify-end gap-x-2", children: form.formState.errors.customer_group_ids && (0, import_jsx_runtime.jsx)(Hint, { variant: "error", children: form.formState.errors.customer_group_ids.message }) }) }),
        (0, import_jsx_runtime.jsx)(RouteFocusModal.Body, { className: "size-full overflow-hidden", children: (0, import_jsx_runtime.jsx)(
          _DataTable,
          {
            table,
            columns,
            pageSize: PAGE_SIZE,
            count,
            filters,
            orderBy: [
              { key: "name", label: t2("fields.name") },
              { key: "created_at", label: t2("fields.createdAt") },
              { key: "updated_at", label: t2("fields.updatedAt") }
            ],
            isLoading,
            layout: "fill",
            search: "autofocus",
            queryObject: raw,
            noRecords: {
              message: t2("customers.groups.add.list.noRecordsMessage")
            }
          }
        ) }),
        (0, import_jsx_runtime.jsxs)(RouteFocusModal.Footer, { children: [
          (0, import_jsx_runtime.jsx)(RouteFocusModal.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { variant: "secondary", size: "small", children: t2("actions.cancel") }) }),
          (0, import_jsx_runtime.jsx)(
            Button,
            {
              type: "submit",
              variant: "primary",
              size: "small",
              isLoading: isPending,
              children: t2("actions.save")
            }
          )
        ] })
      ]
    }
  ) });
};
var columnHelper = createColumnHelper();
var useColumns = () => {
  const { t: t2 } = useTranslation();
  const base = useCustomerGroupTableColumns();
  const columns = (0, import_react.useMemo)(
    () => [
      columnHelper.display({
        id: "select",
        header: ({ table }) => {
          return (0, import_jsx_runtime.jsx)(
            Checkbox,
            {
              checked: table.getIsSomePageRowsSelected() ? "indeterminate" : table.getIsAllPageRowsSelected(),
              onCheckedChange: (value) => table.toggleAllPageRowsSelected(!!value)
            }
          );
        },
        cell: ({ row }) => {
          const isPreSelected = !row.getCanSelect();
          const isSelected = row.getIsSelected() || isPreSelected;
          const Component = (0, import_jsx_runtime.jsx)(
            Checkbox,
            {
              checked: isSelected,
              disabled: isPreSelected,
              onCheckedChange: (value) => row.toggleSelected(!!value),
              onClick: (e) => {
                e.stopPropagation();
              }
            }
          );
          if (isPreSelected) {
            return (0, import_jsx_runtime.jsx)(
              Tooltip,
              {
                content: t2("customers.groups.alreadyAddedTooltip"),
                side: "right",
                children: Component
              }
            );
          }
          return Component;
        }
      }),
      ...base
    ],
    [t2, base]
  );
  return columns;
};
var CustomerAddCustomerGroups = () => {
  const { id } = useParams();
  return (0, import_jsx_runtime2.jsx)(RouteFocusModal, { children: (0, import_jsx_runtime2.jsx)(AddCustomerGroupsForm, { customerId: id }) });
};
export {
  CustomerAddCustomerGroups as Component
};
//# sourceMappingURL=customers-add-customer-group-54XAF37I-LKDASAW5.js.map
