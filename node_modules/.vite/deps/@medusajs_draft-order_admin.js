import {
  require_lodash
} from "./chunk-O5FFUBSU.js";
import {
  esm_default as esm_default2
} from "./chunk-OO5WSMOM.js";
import {
  Combobox,
  ComboboxDisclosure,
  ComboboxItem,
  ComboboxItemCheck,
  ComboboxItemValue,
  ComboboxPopover,
  ComboboxProvider,
  Separator
} from "./chunk-5RMC4PLS.js";
import {
  require_debounce
} from "./chunk-4QHOS7Y6.js";
import "./chunk-GWJ5Q4VE.js";
import {
  matchSorter
} from "./chunk-IA4ROPJA.js";
import {
  t
} from "./chunk-PJH2FZXH.js";
import "./chunk-4E3X3L63.js";
import "./chunk-44Z5LPNY.js";
import {
  format,
  formatDistance,
  sub,
  subDays,
  subMonths
} from "./chunk-27OTIEV6.js";
import "./chunk-Q7HIPOTC.js";
import {
  enUS
} from "./chunk-4UMB4KDB.js";
import {
  Controller,
  FormProvider,
  useFieldArray,
  useForm,
  useFormContext,
  useFormState,
  useWatch
} from "./chunk-PXKNUQDM.js";
import "./chunk-EQCCHGRT.js";
import {
  Link,
  Outlet,
  useBlocker,
  useLocation,
  useNavigate,
  useParams,
  useSearchParams
} from "./chunk-T7YBVUWZ.js";
import {
  ArrowDownMini,
  ArrowPath,
  ArrowUpMini,
  ArrowUpRightOnBox,
  Avatar,
  Badge,
  Buildings,
  Button,
  Channels,
  Check,
  CheckMini,
  Container,
  Copy,
  CurrencyDollar,
  CurrencyInput2 as CurrencyInput,
  DataTable,
  Divider,
  Drawer,
  DropdownMenu,
  EllipseMiniSolid,
  EllipsisHorizontal,
  EllipsisVertical,
  Envelope,
  ExclamationCircleSolid,
  FlyingBox,
  FocusModal,
  Heading,
  Hint,
  IconButton,
  InformationCircleSolid,
  Input,
  Kbd,
  Label,
  Minus,
  PencilSquare,
  Photo,
  Plus,
  PlusMini,
  Prompt,
  ReceiptPercent,
  Select,
  Shopping,
  Skeleton,
  SquareTwoStack,
  StatusBadge,
  Switch,
  Text,
  Tooltip,
  Trash,
  TriangleDownMini,
  TriangleRightMini,
  TrianglesMini,
  TruckFast,
  XMark,
  XMarkMini,
  clx,
  createDataTableColumnHelper,
  createDataTableFilterHelper,
  dist_exports,
  dist_exports2,
  dist_exports3,
  toast,
  useDataTable,
  usePrompt
} from "./chunk-4QBNNGLV.js";
import "./chunk-5GLF3XJW.js";
import "./chunk-RPCDYKBN.js";
import {
  esm_default
} from "./chunk-BLW342M3.js";
import {
  keepPreviousData,
  useInfiniteQuery,
  useMutation,
  useQuery,
  useQueryClient
} from "./chunk-R35JBZ3G.js";
import {
  require_jsx_runtime
} from "./chunk-KBTYAULA.js";
import {
  require_react
} from "./chunk-QCHXOAYK.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/draft-order/.medusa/server/src/admin/index.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);

// node_modules/@medusajs/admin-sdk/dist/index.mjs
function createConfigHelper(config2) {
  return {
    ...config2,
    /**
     * This property is required to allow the config to be exported,
     * while still allowing HMR to work correctly.
     *
     * It tricks Fast Refresh into thinking that the config is a React component,
     * which allows it to be updated without a full page reload.
     */
    $$typeof: Symbol.for("react.memo")
  };
}
function defineRouteConfig(config2) {
  return createConfigHelper(config2);
}

// node_modules/@medusajs/draft-order/.medusa/server/src/admin/index.mjs
var import_react = __toESM(require_react(), 1);
var import_debounce = __toESM(require_debounce(), 1);
var import_lodash = __toESM(require_lodash(), 1);
function useQueryParams(keys, prefix) {
  const [params] = useSearchParams();
  const result = {};
  keys.forEach((key) => {
    const prefixedKey = prefix ? `${prefix}_${key}` : key;
    const value = params.get(prefixedKey) || void 0;
    result[key] = value;
  });
  return result;
}
var ConditionalTooltip = ({
  children,
  showTooltip = false,
  ...props
}) => {
  if (showTooltip) {
    return (0, import_jsx_runtime.jsx)(Tooltip, { ...props, children });
  }
  return children;
};
var ActionMenu = ({
  groups,
  variant = "transparent",
  children
}) => {
  const inner = children ?? (0, import_jsx_runtime.jsx)(IconButton, { size: "small", variant, children: (0, import_jsx_runtime.jsx)(EllipsisHorizontal, {}) });
  return (0, import_jsx_runtime.jsxs)(DropdownMenu, { children: [
    (0, import_jsx_runtime.jsx)(DropdownMenu.Trigger, { asChild: true, children: inner }),
    (0, import_jsx_runtime.jsx)(DropdownMenu.Content, { children: groups.map((group, index) => {
      if (!group.actions.length) {
        return null;
      }
      const isLast = index === groups.length - 1;
      return (0, import_jsx_runtime.jsxs)(DropdownMenu.Group, { children: [
        group.actions.map((action, index2) => {
          const Wrapper = action.disabledTooltip ? ({ children: children2 }) => (0, import_jsx_runtime.jsx)(
            ConditionalTooltip,
            {
              showTooltip: action.disabled,
              content: action.disabledTooltip,
              side: "right",
              children: (0, import_jsx_runtime.jsx)("div", { children: children2 })
            }
          ) : "div";
          if (action.onClick) {
            return (0, import_jsx_runtime.jsx)(Wrapper, { children: (0, import_jsx_runtime.jsxs)(
              DropdownMenu.Item,
              {
                disabled: action.disabled,
                onClick: (e) => {
                  e.stopPropagation();
                  action.onClick();
                },
                className: clx(
                  "[&_svg]:text-ui-fg-subtle flex items-center gap-x-2",
                  {
                    "[&_svg]:text-ui-fg-disabled": action.disabled
                  }
                ),
                children: [
                  action.icon,
                  (0, import_jsx_runtime.jsx)("span", { children: action.label })
                ]
              }
            ) }, index2);
          }
          return (0, import_jsx_runtime.jsx)(Wrapper, { children: (0, import_jsx_runtime.jsx)(
            DropdownMenu.Item,
            {
              className: clx(
                "[&_svg]:text-ui-fg-subtle flex items-center gap-x-2",
                {
                  "[&_svg]:text-ui-fg-disabled": action.disabled
                }
              ),
              asChild: true,
              disabled: action.disabled,
              children: (0, import_jsx_runtime.jsxs)(Link, { to: action.to, onClick: (e) => e.stopPropagation(), children: [
                action.icon,
                (0, import_jsx_runtime.jsx)("span", { children: action.label })
              ] })
            }
          ) }, index2);
        }),
        !isLast && (0, import_jsx_runtime.jsx)(DropdownMenu.Separator, {})
      ] }, index);
    }) })
  ] });
};
var DataTable2 = ({
  data = [],
  columns,
  filters,
  commands,
  action,
  actionMenu,
  getRowId,
  rowCount = 0,
  enablePagination = true,
  enableSearch = true,
  autoFocusSearch = false,
  rowHref,
  heading,
  subHeading,
  prefix,
  pageSize = 10,
  emptyState,
  rowSelection,
  isLoading = false,
  layout = "auto"
}) => {
  const enableFiltering = filters && filters.length > 0;
  const enableCommands = commands && commands.length > 0;
  const enableSorting = columns.some((column) => column.enableSorting);
  const filterIds = (filters == null ? void 0 : filters.map((f) => f.id)) ?? [];
  const prefixedFilterIds = filterIds.map((id) => getQueryParamKey(id, prefix));
  const { offset, order, q, ...filterParams } = useQueryParams(
    [
      ...filterIds,
      ...enableSorting ? ["order"] : [],
      ...enableSearch ? ["q"] : [],
      ...enablePagination ? ["offset"] : []
    ],
    prefix
  );
  const [_, setSearchParams] = useSearchParams();
  const [search, setSearch] = (0, import_react.useState)(q ?? "");
  const handleSearchChange = (value) => {
    setSearch(value);
    setSearchParams((prev) => {
      if (value) {
        prev.set(getQueryParamKey("q", prefix), value);
      } else {
        prev.delete(getQueryParamKey("q", prefix));
      }
      return prev;
    });
  };
  const [pagination, setPagination] = (0, import_react.useState)(
    offset ? parsePaginationState(offset, pageSize) : { pageIndex: 0, pageSize }
  );
  const handlePaginationChange = (value) => {
    setPagination(value);
    setSearchParams((prev) => {
      if (value.pageIndex === 0) {
        prev.delete(getQueryParamKey("offset", prefix));
      } else {
        prev.set(
          getQueryParamKey("offset", prefix),
          transformPaginationState(value).toString()
        );
      }
      return prev;
    });
  };
  const [filtering, setFiltering] = (0, import_react.useState)(
    parseFilterState(filterIds, filterParams)
  );
  const handleFilteringChange = (value) => {
    setFiltering(value);
    setSearchParams((prev) => {
      Array.from(prev.keys()).forEach((key) => {
        if (prefixedFilterIds.includes(key) && !(key in value)) {
          prev.delete(key);
        }
      });
      Object.entries(value).forEach(([key, filter]) => {
        if (prefixedFilterIds.includes(getQueryParamKey(key, prefix)) && filter) {
          prev.set(getQueryParamKey(key, prefix), JSON.stringify(filter));
        }
      });
      return prev;
    });
  };
  const [sorting, setSorting] = (0, import_react.useState)(
    order ? parseSortingState(order) : null
  );
  const handleSortingChange = (value) => {
    setSorting(value);
    setSearchParams((prev) => {
      if (value) {
        const valueToStore = transformSortingState(value);
        prev.set(getQueryParamKey("order", prefix), valueToStore);
      } else {
        prev.delete(getQueryParamKey("order", prefix));
      }
      return prev;
    });
  };
  const navigate = useNavigate();
  const onRowClick = (0, import_react.useCallback)(
    (event, row) => {
      if (!rowHref) {
        return;
      }
      const href = rowHref(row);
      if (event.metaKey || event.ctrlKey || event.button === 1) {
        window.open(href, "_blank", "noreferrer");
        return;
      }
      if (event.shiftKey) {
        window.open(href, void 0, "noreferrer");
        return;
      }
      navigate(href);
    },
    [navigate, rowHref]
  );
  const instance = useDataTable({
    data,
    columns,
    filters,
    commands,
    rowCount,
    getRowId,
    onRowClick: rowHref ? onRowClick : void 0,
    pagination: enablePagination ? {
      state: pagination,
      onPaginationChange: handlePaginationChange
    } : void 0,
    filtering: enableFiltering ? {
      state: filtering,
      onFilteringChange: handleFilteringChange
    } : void 0,
    sorting: enableSorting ? {
      state: sorting,
      onSortingChange: handleSortingChange
    } : void 0,
    search: enableSearch ? {
      state: search,
      onSearchChange: handleSearchChange
    } : void 0,
    rowSelection,
    isLoading
  });
  const shouldRenderHeading = heading || subHeading;
  return (0, import_jsx_runtime.jsxs)(
    DataTable,
    {
      instance,
      className: clx({
        "h-full [&_tr]:last-of-type:!border-b": layout === "fill"
      }),
      children: [
        (0, import_jsx_runtime.jsxs)(DataTable.Toolbar, { className: "flex flex-col items-start justify-between gap-2 md:flex-row md:items-center", children: [
          (0, import_jsx_runtime.jsxs)("div", { className: "flex w-full items-center justify-between gap-2", children: [
            shouldRenderHeading && (0, import_jsx_runtime.jsxs)("div", { children: [
              heading && (0, import_jsx_runtime.jsx)(Heading, { children: heading }),
              subHeading && (0, import_jsx_runtime.jsx)(Text, { size: "small", className: "text-ui-fg-subtle", children: subHeading })
            ] }),
            (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2 md:hidden", children: [
              enableFiltering && (0, import_jsx_runtime.jsx)(DataTable.FilterMenu, { tooltip: "Filter" }),
              (0, import_jsx_runtime.jsx)(DataTable.SortingMenu, { tooltip: "Sort" }),
              actionMenu && (0, import_jsx_runtime.jsx)(ActionMenu, { variant: "primary", ...actionMenu }),
              action && (0, import_jsx_runtime.jsx)(DataTableAction, { ...action })
            ] })
          ] }),
          (0, import_jsx_runtime.jsxs)("div", { className: "flex w-full items-center gap-2 md:justify-end", children: [
            enableSearch && (0, import_jsx_runtime.jsx)("div", { className: "w-full md:w-auto", children: (0, import_jsx_runtime.jsx)(
              DataTable.Search,
              {
                "data-modal-id": "modal-search-input",
                placeholder: "Search",
                autoFocus: autoFocusSearch
              }
            ) }),
            (0, import_jsx_runtime.jsxs)("div", { className: "hidden items-center gap-x-2 md:flex", children: [
              enableFiltering && (0, import_jsx_runtime.jsx)(DataTable.FilterMenu, { tooltip: "Filter" }),
              (0, import_jsx_runtime.jsx)(DataTable.SortingMenu, { tooltip: "Sort" }),
              actionMenu && (0, import_jsx_runtime.jsx)(ActionMenu, { variant: "primary", ...actionMenu }),
              action && (0, import_jsx_runtime.jsx)(DataTableAction, { ...action })
            ] })
          ] })
        ] }),
        (0, import_jsx_runtime.jsx)(DataTable.Table, { emptyState }),
        enablePagination && (0, import_jsx_runtime.jsx)(DataTable.Pagination, {}),
        enableCommands && (0, import_jsx_runtime.jsx)(DataTable.CommandBar, { selectedLabel: (count) => `${count} selected` })
      ]
    }
  );
};
function transformSortingState(value) {
  return value.desc ? `-${value.id}` : value.id;
}
function parseSortingState(value) {
  return value.startsWith("-") ? { id: value.slice(1), desc: true } : { id: value, desc: false };
}
function transformPaginationState(value) {
  return value.pageIndex * value.pageSize;
}
function parsePaginationState(value, pageSize) {
  const offset = parseInt(value);
  return {
    pageIndex: Math.floor(offset / pageSize),
    pageSize
  };
}
function parseFilterState(filterIds, value) {
  if (!value) {
    return {};
  }
  const filters = {};
  for (const id of filterIds) {
    const filterValue = value[id];
    if (filterValue) {
      filters[id] = JSON.parse(filterValue);
    }
  }
  return filters;
}
function getQueryParamKey(key, prefix) {
  return prefix ? `${prefix}_${key}` : key;
}
var DataTableAction = ({
  label,
  disabled,
  ...props
}) => {
  const buttonProps = {
    size: "small",
    disabled: disabled ?? false,
    type: "button",
    variant: "secondary"
  };
  if ("to" in props) {
    return (0, import_jsx_runtime.jsx)(Button, { ...buttonProps, asChild: true, children: (0, import_jsx_runtime.jsx)(Link, { to: props.to, children: label }) });
  }
  return (0, import_jsx_runtime.jsx)(Button, { ...buttonProps, onClick: props.onClick, children: label });
};
var sdk = new esm_default({
  baseUrl: "/",
  auth: {
    type: "session"
  }
});
var CUSTOMER_QUERY_KEY = "customers";
var customersQueryKeys = {
  list: (query2) => [
    CUSTOMER_QUERY_KEY,
    query2 ? query2 : void 0
  ],
  detail: (id, query2) => [
    CUSTOMER_QUERY_KEY,
    id,
    query2 ? query2 : void 0
  ],
  addresses: (id, query2) => [
    CUSTOMER_QUERY_KEY,
    id,
    "addresses",
    query2 ? query2 : void 0
  ],
  address: (id, addressId, query2) => [
    CUSTOMER_QUERY_KEY,
    id,
    "addresses",
    addressId,
    query2 ? query2 : void 0
  ]
};
var useCustomer = (id, query2, options) => {
  const { data, ...rest } = useQuery({
    queryKey: customersQueryKeys.detail(id, query2),
    queryFn: async () => sdk.admin.customer.retrieve(id, query2),
    ...options
  });
  return { ...data, ...rest };
};
var useCustomers = (query2, options) => {
  const { data, ...rest } = useQuery({
    queryKey: customersQueryKeys.list(query2),
    queryFn: async () => sdk.admin.customer.list(query2),
    ...options
  });
  return { ...data, ...rest };
};
var useCustomerAddress = (id, addressId, query2, options) => {
  const { data, ...rest } = useQuery({
    queryKey: customersQueryKeys.address(id, addressId, query2),
    queryFn: async () => {
      const response = await sdk.client.fetch(
        "/admin/customers/" + id + "/addresses/" + addressId
      );
      return response;
    },
    ...options
  });
  return { ...data, ...rest };
};
var ORDERS_QUERY_KEY = "orders";
var ordersQueryKeys = {
  detail: (id, query2) => [
    ORDERS_QUERY_KEY,
    "details",
    id,
    query2 ? { query: query2 } : void 0
  ],
  details: () => [ORDERS_QUERY_KEY, "details"],
  list: (query2) => [
    ORDERS_QUERY_KEY,
    "lists",
    query2 ? { query: query2 } : void 0
  ],
  lists: () => [ORDERS_QUERY_KEY, "lists"],
  preview: (id) => [ORDERS_QUERY_KEY, "preview", id],
  changes: (id) => [ORDERS_QUERY_KEY, "changes", id]
};
var useOrder = (id, query2, options) => {
  const { data, ...rest } = useQuery({
    queryKey: ordersQueryKeys.detail(id, query2),
    queryFn: async () => sdk.admin.order.retrieve(id, query2),
    ...options
  });
  return { ...data, ...rest };
};
var useOrderChanges = (id, query2, options) => {
  const { data, ...rest } = useQuery({
    queryFn: async () => sdk.admin.order.listChanges(id, query2),
    queryKey: ordersQueryKeys.changes(id),
    ...options
  });
  return { ...data, ...rest };
};
var useOrderPreview = (id, query2, options) => {
  const { data, ...rest } = useQuery({
    queryFn: async () => sdk.admin.order.retrievePreview(id, query2),
    queryKey: ordersQueryKeys.preview(id),
    ...options
  });
  return { ...data, ...rest };
};
var useOrderEditRequest = (id, options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: () => sdk.admin.orderEdit.request(id),
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.details()
      });
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.preview(id)
      });
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.changes(id)
      });
    },
    ...options
  });
};
var SHIPPING_OPTION_QUERY_KEY = "shipping-options";
var shippingOptionsQueryKeys = {
  list: (query2) => [
    SHIPPING_OPTION_QUERY_KEY,
    query2 ? query2 : void 0
  ],
  detail: (id, query2) => [
    SHIPPING_OPTION_QUERY_KEY,
    id,
    query2 ? query2 : void 0
  ]
};
var useShippingOptions = (query2, options) => {
  const { data, ...rest } = useQuery({
    queryKey: shippingOptionsQueryKeys.list(query2),
    queryFn: async () => sdk.admin.shippingOption.list(query2),
    ...options
  });
  return { ...data, ...rest };
};
var DRAFT_ORDERS_QUERY_KEY = "draft-orders";
var draftOrdersQueryKeys = {
  detail: (id, query2) => [
    DRAFT_ORDERS_QUERY_KEY,
    "details",
    id,
    query2 ? { query: query2 } : void 0
  ],
  details: () => [DRAFT_ORDERS_QUERY_KEY, "details"],
  list: (query2) => [
    DRAFT_ORDERS_QUERY_KEY,
    "lists",
    query2 ? { query: query2 } : void 0
  ],
  lists: () => [DRAFT_ORDERS_QUERY_KEY, "lists"]
};
var useDraftOrders = (query2, options) => {
  const { data, ...rest } = useQuery({
    queryFn: async () => {
      return await sdk.admin.draftOrder.list(query2);
    },
    queryKey: draftOrdersQueryKeys.list(query2),
    ...options
  });
  return { ...data, ...rest };
};
var useDraftOrder = (id, query2, options) => {
  const { data, ...rest } = useQuery({
    queryFn: async () => {
      return await sdk.admin.draftOrder.retrieve(id, query2);
    },
    queryKey: draftOrdersQueryKeys.detail(id, query2),
    ...options
  });
  return { ...data, ...rest };
};
var useCreateDraftOrder = (options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: async (payload) => {
      return await sdk.admin.draftOrder.create(payload);
    },
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: draftOrdersQueryKeys.lists()
      });
      queryClient.invalidateQueries({
        queryKey: shippingOptionsQueryKeys.list()
      });
    },
    ...options
  });
};
var useDeleteDraftOrder = (options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: async (id) => {
      return await sdk.admin.draftOrder.delete(id);
    },
    onSuccess: (data, undefined2, context) => {
      queryClient.invalidateQueries({
        queryKey: draftOrdersQueryKeys.lists()
      });
    },
    ...options
  });
};
var useUpdateDraftOrder = (id, options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: async (payload) => {
      return await sdk.admin.draftOrder.update(id, payload);
    },
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: draftOrdersQueryKeys.details()
      });
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.details()
      });
      queryClient.invalidateQueries({
        queryKey: draftOrdersQueryKeys.lists()
      });
    },
    ...options
  });
};
var useConvertDraftOrder = (id, options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: () => sdk.admin.draftOrder.convertToOrder(id),
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: draftOrdersQueryKeys.detail(id)
      });
      queryClient.invalidateQueries({
        queryKey: draftOrdersQueryKeys.lists()
      });
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.detail(id)
      });
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.lists()
      });
    },
    ...options
  });
};
var useDraftOrderAddItems = (id, options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (payload) => sdk.admin.draftOrder.addItems(id, payload),
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.preview(id)
      });
    },
    ...options
  });
};
var useDraftOrderUpdateItem = (id, options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ item_id, ...payload }) => sdk.admin.draftOrder.updateItem(id, item_id, payload),
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.preview(id)
      });
    },
    ...options
  });
};
var useDraftOrderRemoveActionItem = (id, options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (action_id) => sdk.admin.draftOrder.removeActionItem(id, action_id),
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.preview(id)
      });
    },
    ...options
  });
};
var useDraftOrderUpdateActionItem = (id, options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ action_id, ...payload }) => sdk.admin.draftOrder.updateActionItem(id, action_id, payload),
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.preview(id)
      });
    },
    ...options
  });
};
var useDraftOrderAddPromotions = (id, options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (payload) => sdk.admin.draftOrder.addPromotions(id, payload),
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.preview(id)
      });
    },
    ...options
  });
};
var useDraftOrderRemovePromotions = (id, options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (payload) => sdk.admin.draftOrder.removePromotions(id, payload),
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.preview(id)
      });
    },
    ...options
  });
};
var useDraftOrderAddShippingMethod = (id, options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (payload) => sdk.admin.draftOrder.addShippingMethod(id, payload),
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.preview(id)
      });
    },
    ...options
  });
};
var useDraftOrderRemoveActionShippingMethod = (id, options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (action_id) => sdk.admin.draftOrder.removeActionShippingMethod(id, action_id),
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.preview(id)
      });
    },
    ...options
  });
};
var useDraftOrderRemoveShippingMethod = (id, options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (shipping_method_id) => sdk.admin.draftOrder.removeShippingMethod(id, shipping_method_id),
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.preview(id)
      });
    },
    ...options
  });
};
var useDraftOrderUpdateShippingMethod = (id, options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ method_id, ...payload }) => sdk.admin.draftOrder.updateShippingMethod(id, method_id, payload),
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.preview(id)
      });
    },
    ...options
  });
};
var useDraftOrderBeginEdit = (id, options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: () => sdk.admin.draftOrder.beginEdit(id),
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.preview(id)
      });
    },
    ...options
  });
};
var useDraftOrderCancelEdit = (id, options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: () => sdk.admin.draftOrder.cancelEdit(id),
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.preview(id)
      });
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.details()
      });
      queryClient.invalidateQueries({
        queryKey: draftOrdersQueryKeys.details()
      });
    },
    ...options
  });
};
var useDraftOrderRequestEdit = (id, options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: () => sdk.admin.draftOrder.requestEdit(id),
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.preview(id)
      });
    },
    ...options
  });
};
var useDraftOrderConfirmEdit = (id, options) => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: () => sdk.admin.draftOrder.confirmEdit(id),
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.preview(id)
      });
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.changes(id)
      });
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.details()
      });
      queryClient.invalidateQueries({
        queryKey: draftOrdersQueryKeys.detail(id)
      });
      queryClient.invalidateQueries({
        queryKey: draftOrdersQueryKeys.details()
      });
      queryClient.invalidateQueries({
        queryKey: draftOrdersQueryKeys.lists()
      });
    },
    ...options
  });
};
var REGION_QUERY_KEY = "regions";
var regionsQueryKeys = {
  list: (query2) => [
    REGION_QUERY_KEY,
    query2 ? query2 : void 0
  ],
  detail: (id, query2) => [
    REGION_QUERY_KEY,
    id,
    query2 ? query2 : void 0
  ]
};
var useRegion = (id, query2, options) => {
  const { data, ...rest } = useQuery({
    queryKey: regionsQueryKeys.detail(id, query2),
    queryFn: async () => sdk.admin.region.retrieve(id, query2),
    ...options
  });
  return { ...data, ...rest };
};
var useRegions = (query2, options) => {
  const { data, ...rest } = useQuery({
    queryKey: regionsQueryKeys.list(query2),
    queryFn: async () => sdk.admin.region.list(query2),
    ...options
  });
  return { ...data, ...rest };
};
var SALES_CHANNEL_QUERY_KEY = "sales-channels";
var salesChannelsQueryKeys = {
  list: (query2) => [
    SALES_CHANNEL_QUERY_KEY,
    query2 ? query2 : void 0
  ],
  detail: (id, query2) => [
    SALES_CHANNEL_QUERY_KEY,
    id,
    query2 ? query2 : void 0
  ]
};
var useSalesChannels = (query2, options) => {
  const { data, ...rest } = useQuery({
    queryKey: salesChannelsQueryKeys.list(query2),
    queryFn: async () => sdk.admin.salesChannel.list(query2),
    ...options
  });
  return { ...data, ...rest };
};
var LOCALE = enUS;
function getRelativeDate(date) {
  const now = /* @__PURE__ */ new Date();
  return formatDistance(sub(new Date(date), { minutes: 0 }), now, {
    addSuffix: true,
    locale: LOCALE
  });
}
var getFullDate = ({
  date,
  includeTime = false
}) => {
  const ensuredDate = new Date(date);
  if (isNaN(ensuredDate.getTime())) {
    return "";
  }
  const timeFormat = includeTime ? "p" : "";
  return format(ensuredDate, `PP ${timeFormat}`, {
    locale: LOCALE
  });
};
var filterHelper = createDataTableFilterHelper();
var useDateFilterOptions = () => {
  const today = (0, import_react.useMemo)(() => {
    const date = /* @__PURE__ */ new Date();
    date.setHours(0, 0, 0, 0);
    return date;
  }, []);
  return (0, import_react.useMemo)(() => {
    return [
      {
        label: "Today",
        value: {
          $gte: today.toISOString()
        }
      },
      {
        label: "Last 7 days",
        value: {
          $gte: subDays(today, 7).toISOString()
          // 7 days ago
        }
      },
      {
        label: "Last 30 days",
        value: {
          $gte: subDays(today, 30).toISOString()
          // 30 days ago
        }
      },
      {
        label: "Last 90 days",
        value: {
          $gte: subDays(today, 90).toISOString()
          // 90 days ago
        }
      },
      {
        label: "Last 12 months",
        value: {
          $gte: subMonths(today, 12).toISOString()
          // 12 months ago
        }
      }
    ];
  }, [today]);
};
var useDataTableDateFilters = (disableRangeOption) => {
  const dateFilterOptions = useDateFilterOptions();
  const rangeOptions = (0, import_react.useMemo)(() => {
    return {
      rangeOptionStartLabel: "Starting",
      rangeOptionEndLabel: "Ending",
      rangeOptionLabel: "Custom",
      options: dateFilterOptions
    };
  }, [disableRangeOption, dateFilterOptions]);
  return (0, import_react.useMemo)(() => {
    return [
      filterHelper.accessor("created_at", {
        type: "date",
        label: "Created at",
        format: "date",
        formatDateValue: (date) => getFullDate({ date }),
        options: dateFilterOptions,
        ...rangeOptions
      }),
      filterHelper.accessor("updated_at", {
        type: "date",
        label: "Updated at",
        format: "date",
        formatDateValue: (date) => getFullDate({ date }),
        options: dateFilterOptions,
        ...rangeOptions
      })
    ];
  }, [dateFilterOptions, getFullDate, rangeOptions]);
};
var PAGE_SIZE = 20;
var handle$1 = {
  breadcrumb: () => "Draft Orders"
};
var List = () => {
  const queryParams = useDraftOrderTableQuery({
    pageSize: PAGE_SIZE
  });
  const { draft_orders, count, isPending, isError, error } = useDraftOrders(
    {
      ...queryParams,
      order: queryParams.order ?? "-created_at",
      fields: "+customer.*,+sales_channel.*,+email,+display_id,+total,+currency_code,+shipping_total,+tax_total,+discount_total,+items.*,+items.variant.*,+items.variant.product.*,+items.variant.product.shipping_profile.*,+items.variant.options.*,+region.*"
    },
    {
      placeholderData: keepPreviousData
    }
  );
  const columns = useColumns$1();
  const filters = useFilters();
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime.jsxs)(import_react.Fragment, { children: [
    (0, import_jsx_runtime.jsx)(Container, { className: "p-0", children: (0, import_jsx_runtime.jsx)(
      DataTable2,
      {
        data: draft_orders,
        getRowId: (row) => row.id,
        columns,
        filters,
        isLoading: isPending,
        pageSize: PAGE_SIZE,
        rowCount: count,
        heading: "Draft Orders",
        action: {
          label: "Create",
          to: "create"
        },
        rowHref: (row) => `${row.id}`,
        emptyState: {
          empty: {
            heading: "No draft orders found",
            description: "Create a new draft order to get started."
          },
          filtered: {
            heading: "No results found",
            description: "No draft orders match your filter criteria."
          }
        }
      }
    ) }),
    (0, import_jsx_runtime.jsx)(Outlet, {})
  ] });
};
var config = defineRouteConfig({
  label: "Drafts",
  nested: "/orders"
});
var columnHelper$1 = createDataTableColumnHelper();
var useColumns$1 = () => {
  return (0, import_react.useMemo)(
    () => [
      columnHelper$1.accessor("display_id", {
        header: "Display ID",
        cell: ({ getValue }) => {
          return `#${getValue()}`;
        },
        enableSorting: true
      }),
      columnHelper$1.accessor("created_at", {
        header: "Date",
        cell: ({ getValue }) => {
          return (0, import_jsx_runtime.jsx)(
            Tooltip,
            {
              content: getFullDate({ date: getValue(), includeTime: true }),
              children: (0, import_jsx_runtime.jsx)("span", { children: getFullDate({ date: getValue() }) })
            }
          );
        },
        enableSorting: true
      }),
      columnHelper$1.accessor("customer_id", {
        header: "Customer",
        cell: ({ row }) => {
          var _a;
          return ((_a = row.original.customer) == null ? void 0 : _a.email) || "-";
        },
        enableSorting: true
      }),
      columnHelper$1.accessor("sales_channel_id", {
        header: "Sales Channel",
        cell: ({ row }) => {
          var _a;
          return ((_a = row.original.sales_channel) == null ? void 0 : _a.name) || "-";
        },
        enableSorting: true
      }),
      columnHelper$1.accessor("region_id", {
        header: "Region",
        cell: ({ row }) => {
          var _a;
          return ((_a = row.original.region) == null ? void 0 : _a.name) || "-";
        },
        enableSorting: true
      })
    ],
    []
  );
};
var useFilters = () => {
  const dateFilterOptions = useDataTableDateFilters();
  const { customers } = useCustomers(
    {
      limit: 1e3,
      fields: "id,email"
    },
    {
      throwOnError: true
    }
  );
  const { sales_channels } = useSalesChannels(
    {
      limit: 1e3,
      fields: "id,name"
    },
    {
      throwOnError: true
    }
  );
  const { regions } = useRegions(
    {
      limit: 1e3,
      fields: "id,name"
    },
    { throwOnError: true }
  );
  return (0, import_react.useMemo)(() => {
    return [
      {
        id: "customer_id",
        label: "Customer",
        options: (customers == null ? void 0 : customers.map((customer) => ({
          label: customer.email,
          value: customer.id
        }))) ?? [],
        type: "select"
      },
      {
        id: "sales_channel_id",
        label: "Sales Channel",
        options: (sales_channels == null ? void 0 : sales_channels.map((sales_channel) => ({
          label: sales_channel.name,
          value: sales_channel.id
        }))) ?? [],
        type: "select"
      },
      {
        id: "region_id",
        label: "Region",
        options: (regions == null ? void 0 : regions.map((region) => ({
          label: region.name,
          value: region.id
        }))) ?? [],
        type: "select"
      },
      ...dateFilterOptions
    ];
  }, [customers, sales_channels, regions, dateFilterOptions]);
};
var useDraftOrderTableQuery = ({
  prefix,
  pageSize = 20
}) => {
  const queryObject = useQueryParams(
    [
      "offset",
      "q",
      "order",
      "customer_id",
      "region_id",
      "created_at",
      "updated_at"
    ],
    prefix
  );
  const { offset, created_at, updated_at, ...rest } = queryObject;
  const searchParams = {
    limit: pageSize,
    offset: offset ? Number(offset) : 0,
    created_at: created_at ? JSON.parse(created_at) : void 0,
    updated_at: updated_at ? JSON.parse(updated_at) : void 0,
    ...rest
  };
  return searchParams;
};
var util;
(function(util2) {
  util2.assertEqual = (_) => {
  };
  function assertIs(_arg) {
  }
  util2.assertIs = assertIs;
  function assertNever(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
    const filtered = {};
    for (const k of validKeys) {
      filtered[k] = obj[k];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e) {
      return obj[e];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
    const keys = [];
    for (const key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        keys.push(key);
      }
    }
    return keys;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return void 0;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && Number.isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator = " | ") {
    return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
  }
  util2.joinValues = joinValues;
  util2.jsonStringifyReplacer = (_, value) => {
    if (typeof value === "bigint") {
      return value.toString();
    }
    return value;
  };
})(util || (util = {}));
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second
      // second overwrites first
    };
  };
})(objectUtil || (objectUtil = {}));
var ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
var getParsedType = (data) => {
  const t2 = typeof data;
  switch (t2) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "symbol":
      return ZodParsedType.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};
var ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
var ZodError = class _ZodError extends Error {
  get errors() {
    return this.issues;
  }
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub2) => {
      this.issues = [...this.issues, sub2];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue) {
      return issue.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error) => {
      for (const issue of error.issues) {
        if (issue.code === "invalid_union") {
          issue.unionErrors.map(processError);
        } else if (issue.code === "invalid_return_type") {
          processError(issue.returnTypeError);
        } else if (issue.code === "invalid_arguments") {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i = 0;
          while (i < issue.path.length) {
            const el = issue.path[i];
            const terminal = i === issue.path.length - 1;
            if (!terminal) {
              curr[el] = curr[el] || { _errors: [] };
            } else {
              curr[el] = curr[el] || { _errors: [] };
              curr[el]._errors.push(mapper(issue));
            }
            curr = curr[el];
            i++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  static assert(value) {
    if (!(value instanceof _ZodError)) {
      throw new Error(`Not a ZodError: ${value}`);
    }
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub2 of this.issues) {
      if (sub2.path.length > 0) {
        const firstEl = sub2.path[0];
        fieldErrors[firstEl] = fieldErrors[firstEl] || [];
        fieldErrors[firstEl].push(mapper(sub2));
      } else {
        formErrors.push(mapper(sub2));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
};
ZodError.create = (issues) => {
  const error = new ZodError(issues);
  return error;
};
var errorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (typeof issue.validation === "object") {
        if ("includes" in issue.validation) {
          message = `Invalid input: must include "${issue.validation.includes}"`;
          if (typeof issue.validation.position === "number") {
            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
          }
        } else if ("startsWith" in issue.validation) {
          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ("endsWith" in issue.validation) {
          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util.assertNever(issue.validation);
        }
      } else if (issue.validation !== "regex") {
        message = `Invalid ${issue.validation}`;
      } else {
        message = "Invalid";
      }
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "bigint")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "bigint")
        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    case ZodIssueCode.not_finite:
      message = "Number must be finite";
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message };
};
var overrideErrorMap = errorMap;
function getErrorMap() {
  return overrideErrorMap;
}
var makeIssue = (params) => {
  const { data, path, errorMaps, issueData } = params;
  const fullPath = [...path, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  if (issueData.message !== void 0) {
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message
    };
  }
  let errorMessage = "";
  const maps = errorMaps.filter((m) => !!m).slice().reverse();
  for (const map of maps) {
    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: errorMessage
  };
};
function addIssueToContext(ctx, issueData) {
  const overrideMap = getErrorMap();
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      // contextual error map is first priority
      ctx.schemaErrorMap,
      // then schema-bound map if available
      overrideMap,
      // then global override map
      overrideMap === errorMap ? void 0 : errorMap
      // then global default map
    ].filter((x) => !!x)
  });
  ctx.common.issues.push(issue);
}
var ParseStatus = class _ParseStatus {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s of results) {
      if (s.status === "aborted")
        return INVALID;
      if (s.status === "dirty")
        status.dirty();
      arrayValue.push(s.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      const key = await pair.key;
      const value = await pair.value;
      syncPairs.push({
        key,
        value
      });
    }
    return _ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
};
var INVALID = Object.freeze({
  status: "aborted"
});
var DIRTY = (value) => ({ status: "dirty", value });
var OK = (value) => ({ status: "valid", value });
var isAborted = (x) => x.status === "aborted";
var isDirty = (x) => x.status === "dirty";
var isValid = (x) => x.status === "valid";
var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message == null ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));
var ParseInputLazyPath = class {
  constructor(parent, value, path, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (Array.isArray(this._key)) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
};
var handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error = new ZodError(ctx.common.issues);
        this._error = error;
        return this._error;
      }
    };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    const { message } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message ?? ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: message ?? required_error ?? ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: message ?? invalid_type_error ?? ctx.defaultError };
  };
  return { errorMap: customMap, description };
}
var ZodType = class {
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    const ctx = {
      common: {
        issues: [],
        async: (params == null ? void 0 : params.async) ?? false,
        contextualErrorMap: params == null ? void 0 : params.errorMap
      },
      path: (params == null ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  "~validate"(data) {
    var _a, _b;
    const ctx = {
      common: {
        issues: [],
        async: !!this["~standard"].async
      },
      path: [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    if (!this["~standard"].async) {
      try {
        const result = this._parseSync({ data, path: [], parent: ctx });
        return isValid(result) ? {
          value: result.value
        } : {
          issues: ctx.common.issues
        };
      } catch (err) {
        if ((_b = (_a = err == null ? void 0 : err.message) == null ? void 0 : _a.toLowerCase()) == null ? void 0 : _b.includes("encountered")) {
          this["~standard"].async = true;
        }
        ctx.common = {
          issues: [],
          async: true
        };
      }
    }
    return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result) ? {
      value: result.value
    } : {
      issues: ctx.common.issues
    });
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params == null ? void 0 : params.errorMap,
        async: true
      },
      path: (params == null ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  constructor(def) {
    this.spa = this.safeParseAsync;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.readonly = this.readonly.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
    this["~standard"] = {
      version: 1,
      vendor: "zod",
      validate: (data) => this["~validate"](data)
    };
  }
  optional() {
    return ZodOptional.create(this, this._def);
  }
  nullable() {
    return ZodNullable.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray.create(this);
  }
  promise() {
    return ZodPromise.create(this, this._def);
  }
  or(option) {
    return ZodUnion.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming, this._def);
  }
  transform(transform) {
    return new ZodEffects({
      ...processCreateParams(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault({
      ...processCreateParams(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(this._def)
    });
  }
  catch(def) {
    const catchValueFunc = typeof def === "function" ? def : () => def;
    return new ZodCatch({
      ...processCreateParams(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline.create(this, target);
  }
  readonly() {
    return ZodReadonly.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
};
var cuidRegex = /^c[^\s-]{8,}$/i;
var cuid2Regex = /^[0-9a-z]+$/;
var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
var nanoidRegex = /^[a-z0-9_-]{21}$/i;
var jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
var emojiRegex;
var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
var ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
var ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
var ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
var base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
var dateRegex = new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
  let secondsRegexSource = `[0-5]\\d`;
  if (args.precision) {
    secondsRegexSource = `${secondsRegexSource}\\.\\d{${args.precision}}`;
  } else if (args.precision == null) {
    secondsRegexSource = `${secondsRegexSource}(\\.\\d+)?`;
  }
  const secondsQuantifier = args.precision ? "+" : "?";
  return `([01]\\d|2[0-3]):[0-5]\\d(:${secondsRegexSource})${secondsQuantifier}`;
}
function timeRegex(args) {
  return new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
  let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
  const opts = [];
  opts.push(args.local ? `Z?` : `Z`);
  if (args.offset)
    opts.push(`([+-]\\d{2}:?\\d{2})`);
  regex = `${regex}(${opts.join("|")})`;
  return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version) {
  if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
function isValidJWT(jwt, alg) {
  if (!jwtRegex.test(jwt))
    return false;
  try {
    const [header] = jwt.split(".");
    if (!header)
      return false;
    const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
    const decoded = JSON.parse(atob(base64));
    if (typeof decoded !== "object" || decoded === null)
      return false;
    if ("typ" in decoded && (decoded == null ? void 0 : decoded.typ) !== "JWT")
      return false;
    if (!decoded.alg)
      return false;
    if (alg && decoded.alg !== alg)
      return false;
    return true;
  } catch {
    return false;
  }
}
function isValidCidr(ip, version) {
  if ((version === "v4" || !version) && ipv4CidrRegex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6CidrRegex.test(ip)) {
    return true;
  }
  return false;
}
var ZodString = class _ZodString extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = String(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.string,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "length") {
        const tooBig = input.data.length > check.value;
        const tooSmall = input.data.length < check.value;
        if (tooBig || tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          if (tooBig) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          } else if (tooSmall) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          }
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "emoji") {
        if (!emojiRegex) {
          emojiRegex = new RegExp(_emojiRegex, "u");
        }
        if (!emojiRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "emoji",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "nanoid") {
        if (!nanoidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "nanoid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid2") {
        if (!cuid2Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid2",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ulid") {
        if (!ulidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ulid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "trim") {
        input.data = input.data.trim();
      } else if (check.kind === "includes") {
        if (!input.data.includes(check.value, check.position)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { includes: check.value, position: check.position },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "toLowerCase") {
        input.data = input.data.toLowerCase();
      } else if (check.kind === "toUpperCase") {
        input.data = input.data.toUpperCase();
      } else if (check.kind === "startsWith") {
        if (!input.data.startsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { startsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "endsWith") {
        if (!input.data.endsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { endsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "datetime") {
        const regex = datetimeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "datetime",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "date") {
        const regex = dateRegex;
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "date",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "time") {
        const regex = timeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "time",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "duration") {
        if (!durationRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "duration",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ip") {
        if (!isValidIP(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ip",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "jwt") {
        if (!isValidJWT(input.data, check.alg)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "jwt",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cidr") {
        if (!isValidCidr(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cidr",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64") {
        if (!base64Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64url") {
        if (!base64urlRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _regex(regex, validation, message) {
    return this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message)
    });
  }
  _addCheck(check) {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  emoji(message) {
    return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  nanoid(message) {
    return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  cuid2(message) {
    return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
  }
  ulid(message) {
    return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
  }
  base64(message) {
    return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
  }
  base64url(message) {
    return this._addCheck({
      kind: "base64url",
      ...errorUtil.errToObj(message)
    });
  }
  jwt(options) {
    return this._addCheck({ kind: "jwt", ...errorUtil.errToObj(options) });
  }
  ip(options) {
    return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
  }
  cidr(options) {
    return this._addCheck({ kind: "cidr", ...errorUtil.errToObj(options) });
  }
  datetime(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "datetime",
        precision: null,
        offset: false,
        local: false,
        message: options
      });
    }
    return this._addCheck({
      kind: "datetime",
      precision: typeof (options == null ? void 0 : options.precision) === "undefined" ? null : options == null ? void 0 : options.precision,
      offset: (options == null ? void 0 : options.offset) ?? false,
      local: (options == null ? void 0 : options.local) ?? false,
      ...errorUtil.errToObj(options == null ? void 0 : options.message)
    });
  }
  date(message) {
    return this._addCheck({ kind: "date", message });
  }
  time(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "time",
        precision: null,
        message: options
      });
    }
    return this._addCheck({
      kind: "time",
      precision: typeof (options == null ? void 0 : options.precision) === "undefined" ? null : options == null ? void 0 : options.precision,
      ...errorUtil.errToObj(options == null ? void 0 : options.message)
    });
  }
  duration(message) {
    return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil.errToObj(message)
    });
  }
  includes(value, options) {
    return this._addCheck({
      kind: "includes",
      value,
      position: options == null ? void 0 : options.position,
      ...errorUtil.errToObj(options == null ? void 0 : options.message)
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this._addCheck({
      kind: "length",
      value: len,
      ...errorUtil.errToObj(message)
    });
  }
  /**
   * Equivalent to `.min(1)`
   */
  nonempty(message) {
    return this.min(1, errorUtil.errToObj(message));
  }
  trim() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((ch) => ch.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((ch) => ch.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((ch) => ch.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((ch) => ch.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((ch) => ch.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((ch) => ch.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((ch) => ch.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((ch) => ch.kind === "ip");
  }
  get isCIDR() {
    return !!this._def.checks.find((ch) => ch.kind === "cidr");
  }
  get isBase64() {
    return !!this._def.checks.find((ch) => ch.kind === "base64");
  }
  get isBase64url() {
    return !!this._def.checks.find((ch) => ch.kind === "base64url");
  }
  get minLength() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxLength() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodString.create = (params) => {
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    coerce: (params == null ? void 0 : params.coerce) ?? false,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / 10 ** decCount;
}
var ZodNumber = class _ZodNumber extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = Number(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "finite") {
        if (!Number.isFinite(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_finite,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new _ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new _ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  finite(message) {
    return this._addCheck({
      kind: "finite",
      message: errorUtil.toString(message)
    });
  }
  safe(message) {
    return this._addCheck({
      kind: "min",
      inclusive: true,
      value: Number.MIN_SAFE_INTEGER,
      message: errorUtil.toString(message)
    })._addCheck({
      kind: "max",
      inclusive: true,
      value: Number.MAX_SAFE_INTEGER,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
  }
  get isFinite() {
    let max = null;
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
        return true;
      } else if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      } else if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return Number.isFinite(min) && Number.isFinite(max);
  }
};
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    coerce: (params == null ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodBigInt = class _ZodBigInt extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
  }
  _parse(input) {
    if (this._def.coerce) {
      try {
        input.data = BigInt(input.data);
      } catch {
        return this._getInvalidInput(input);
      }
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      return this._getInvalidInput(input);
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            type: "bigint",
            minimum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            type: "bigint",
            maximum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (input.data % check.value !== BigInt(0)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _getInvalidInput(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.bigint,
      received: ctx.parsedType
    });
    return INVALID;
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new _ZodBigInt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new _ZodBigInt({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodBigInt.create = (params) => {
  return new ZodBigInt({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    coerce: (params == null ? void 0 : params.coerce) ?? false,
    ...processCreateParams(params)
  });
};
var ZodBoolean = class extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = Boolean(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodBoolean.create = (params) => {
  return new ZodBoolean({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    coerce: (params == null ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodDate = class _ZodDate extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = new Date(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    if (Number.isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_date
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.getTime() < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            message: check.message,
            inclusive: true,
            exact: false,
            minimum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.getTime() > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            message: check.message,
            inclusive: true,
            exact: false,
            maximum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check) {
    return new _ZodDate({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  get minDate() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max != null ? new Date(max) : null;
  }
};
ZodDate.create = (params) => {
  return new ZodDate({
    checks: [],
    coerce: (params == null ? void 0 : params.coerce) || false,
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};
var ZodSymbol = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.symbol) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.symbol,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodSymbol.create = (params) => {
  return new ZodSymbol({
    typeName: ZodFirstPartyTypeKind.ZodSymbol,
    ...processCreateParams(params)
  });
};
var ZodUndefined = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodUndefined.create = (params) => {
  return new ZodUndefined({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};
var ZodNull = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodNull.create = (params) => {
  return new ZodNull({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};
var ZodAny = class extends ZodType {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodAny.create = (params) => {
  return new ZodAny({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};
var ZodUnknown = class extends ZodType {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodUnknown.create = (params) => {
  return new ZodUnknown({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};
var ZodNever = class extends ZodType {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
};
ZodNever.create = (params) => {
  return new ZodNever({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};
var ZodVoid = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodVoid.create = (params) => {
  return new ZodVoid({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};
var ZodArray = class _ZodArray extends ZodType {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def.exactLength !== null) {
      const tooBig = ctx.data.length > def.exactLength.value;
      const tooSmall = ctx.data.length < def.exactLength.value;
      if (tooBig || tooSmall) {
        addIssueToContext(ctx, {
          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
          minimum: tooSmall ? def.exactLength.value : void 0,
          maximum: tooBig ? def.exactLength.value : void 0,
          type: "array",
          inclusive: true,
          exact: true,
          message: def.exactLength.message
        });
        status.dirty();
      }
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all([...ctx.data].map((item, i) => {
        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
      })).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = [...ctx.data].map((item, i) => {
      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new _ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new _ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return new _ZodArray({
      ...this._def,
      exactLength: { value: len, message: errorUtil.toString(message) }
    });
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodArray.create = (schema2, params) => {
  return new ZodArray({
    type: schema2,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
function deepPartialify(schema2) {
  if (schema2 instanceof ZodObject) {
    const newShape = {};
    for (const key in schema2.shape) {
      const fieldSchema = schema2.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema2._def,
      shape: () => newShape
    });
  } else if (schema2 instanceof ZodArray) {
    return new ZodArray({
      ...schema2._def,
      type: deepPartialify(schema2.element)
    });
  } else if (schema2 instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema2.unwrap()));
  } else if (schema2 instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema2.unwrap()));
  } else if (schema2 instanceof ZodTuple) {
    return ZodTuple.create(schema2.items.map((item) => deepPartialify(item)));
  } else {
    return schema2;
  }
}
var ZodObject = class _ZodObject extends ZodType {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys = util.objectKeys(shape);
    this._cached = { shape, keys };
    return this._cached;
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
      for (const key in ctx.data) {
        if (!shapeKeys.includes(key)) {
          extraKeys.push(key);
        }
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip") ;
      else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(
            new ParseInputLazyPath(ctx, value, ctx.path, key)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil.errToObj;
    return new _ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== void 0 ? {
        errorMap: (issue, ctx) => {
          var _a, _b;
          const defaultError = ((_b = (_a = this._def).errorMap) == null ? void 0 : _b.call(_a, issue, ctx).message) ?? ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: errorUtil.errToObj(message).message ?? defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new _ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new _ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(augmentation) {
    return new _ZodObject({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...augmentation
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(merging) {
    const merged = new _ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...merging._def.shape()
      }),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(key, schema2) {
    return this.augment({ [key]: schema2 });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(index) {
    return new _ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    for (const key of util.objectKeys(mask)) {
      if (mask[key] && this.shape[key]) {
        shape[key] = this.shape[key];
      }
    }
    return new _ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    for (const key of util.objectKeys(this.shape)) {
      if (!mask[key]) {
        shape[key] = this.shape[key];
      }
    }
    return new _ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    for (const key of util.objectKeys(this.shape)) {
      const fieldSchema = this.shape[key];
      if (mask && !mask[key]) {
        newShape[key] = fieldSchema;
      } else {
        newShape[key] = fieldSchema.optional();
      }
    }
    return new _ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required(mask) {
    const newShape = {};
    for (const key of util.objectKeys(this.shape)) {
      if (mask && !mask[key]) {
        newShape[key] = this.shape[key];
      } else {
        const fieldSchema = this.shape[key];
        let newField = fieldSchema;
        while (newField instanceof ZodOptional) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
    }
    return new _ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum(util.objectKeys(this.shape));
  }
};
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
var ZodUnion = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = void 0;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
};
ZodUnion.create = (types, params) => {
  return new ZodUnion({
    options: types,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
function mergeValues(a, b) {
  const aType = getParsedType(a);
  const bType = getParsedType(b);
  if (a === b) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b);
    const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a[key], b[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a.length !== b.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a.length; index++) {
      const itemA = a[index];
      const itemB = b[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}
var ZodIntersection = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
};
ZodIntersection.create = (left, right, params) => {
  return new ZodIntersection({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};
var ZodTuple = class _ZodTuple extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      status.dirty();
    }
    const items = [...ctx.data].map((item, itemIndex) => {
      const schema2 = this._def.items[itemIndex] || this._def.rest;
      if (!schema2)
        return null;
      return schema2._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
    }).filter((x) => !!x);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new _ZodTuple({
      ...this._def,
      rest
    });
  }
};
ZodTuple.create = (schemas, params) => {
  if (!Array.isArray(schemas)) {
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  }
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};
var ZodMap = class extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = /* @__PURE__ */ new Map();
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
};
ZodMap.create = (keyType, valueType, params) => {
  return new ZodMap({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};
var ZodSet = class _ZodSet extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = /* @__PURE__ */ new Set();
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new _ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new _ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};
var ZodLazy = class extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
};
ZodLazy.create = (getter, params) => {
  return new ZodLazy({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};
var ZodLiteral = class extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
};
ZodLiteral.create = (value, params) => {
  return new ZodLiteral({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
var ZodEnum = class _ZodEnum extends ZodType {
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!this._cache) {
      this._cache = new Set(this._def.values);
    }
    if (!this._cache.has(input.data)) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  extract(values, newDef = this._def) {
    return _ZodEnum.create(values, {
      ...this._def,
      ...newDef
    });
  }
  exclude(values, newDef = this._def) {
    return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
      ...this._def,
      ...newDef
    });
  }
};
ZodEnum.create = createZodEnum;
var ZodNativeEnum = class extends ZodType {
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!this._cache) {
      this._cache = new Set(util.getValidEnumValues(this._def.values));
    }
    if (!this._cache.has(input.data)) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
};
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};
var ZodPromise = class extends ZodType {
  unwrap() {
    return this._def.type;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
};
ZodPromise.create = (schema2, params) => {
  return new ZodPromise({
    type: schema2,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};
var ZodEffects = class extends ZodType {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data, checkCtx);
      if (ctx.common.async) {
        return Promise.resolve(processed).then(async (processed2) => {
          if (status.value === "aborted")
            return INVALID;
          const result = await this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
          if (result.status === "aborted")
            return INVALID;
          if (result.status === "dirty")
            return DIRTY(result.value);
          if (status.value === "dirty")
            return DIRTY(result.value);
          return result;
        });
      } else {
        if (status.value === "aborted")
          return INVALID;
        const result = this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
        if (result.status === "aborted")
          return INVALID;
        if (result.status === "dirty")
          return DIRTY(result.value);
        if (status.value === "dirty")
          return DIRTY(result.value);
        return result;
      }
    }
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base))
          return INVALID;
        const result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid(base))
            return INVALID;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({
            status: status.value,
            value: result
          }));
        });
      }
    }
    util.assertNever(effect);
  }
};
ZodEffects.create = (schema2, effect, params) => {
  return new ZodEffects({
    schema: schema2,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects.createWithPreprocess = (preprocess, schema2, params) => {
  return new ZodEffects({
    schema: schema2,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};
var ZodOptional = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(void 0);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodOptional.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};
var ZodNullable = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodNullable.create = (type, params) => {
  return new ZodNullable({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};
var ZodDefault = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
};
ZodDefault.create = (type, params) => {
  return new ZodDefault({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodDefault,
    defaultValue: typeof params.default === "function" ? params.default : () => params.default,
    ...processCreateParams(params)
  });
};
var ZodCatch = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const newCtx = {
      ...ctx,
      common: {
        ...ctx.common,
        issues: []
      }
    };
    const result = this._def.innerType._parse({
      data: newCtx.data,
      path: newCtx.path,
      parent: {
        ...newCtx
      }
    });
    if (isAsync(result)) {
      return result.then((result2) => {
        return {
          status: "valid",
          value: result2.status === "valid" ? result2.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      });
    } else {
      return {
        status: "valid",
        value: result.status === "valid" ? result.value : this._def.catchValue({
          get error() {
            return new ZodError(newCtx.common.issues);
          },
          input: newCtx.data
        })
      };
    }
  }
  removeCatch() {
    return this._def.innerType;
  }
};
ZodCatch.create = (type, params) => {
  return new ZodCatch({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodCatch,
    catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
    ...processCreateParams(params)
  });
};
var ZodNaN = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
};
ZodNaN.create = (params) => {
  return new ZodNaN({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
var ZodBranded = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
};
var ZodPipeline = class _ZodPipeline extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.common.async) {
      const handleAsync = async () => {
        const inResult = await this._def.in._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return DIRTY(inResult.value);
        } else {
          return this._def.out._parseAsync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      };
      return handleAsync();
    } else {
      const inResult = this._def.in._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
      if (inResult.status === "aborted")
        return INVALID;
      if (inResult.status === "dirty") {
        status.dirty();
        return {
          status: "dirty",
          value: inResult.value
        };
      } else {
        return this._def.out._parseSync({
          data: inResult.value,
          path: ctx.path,
          parent: ctx
        });
      }
    }
  }
  static create(a, b) {
    return new _ZodPipeline({
      in: a,
      out: b,
      typeName: ZodFirstPartyTypeKind.ZodPipeline
    });
  }
};
var ZodReadonly = class extends ZodType {
  _parse(input) {
    const result = this._def.innerType._parse(input);
    const freeze = (data) => {
      if (isValid(data)) {
        data.value = Object.freeze(data.value);
      }
      return data;
    };
    return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodReadonly.create = (type, params) => {
  return new ZodReadonly({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodReadonly,
    ...processCreateParams(params)
  });
};
({
  object: ZodObject.lazycreate
});
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
  ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
  ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
  ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var stringType = ZodString.create;
var numberType = ZodNumber.create;
var booleanType = ZodBoolean.create;
var anyType = ZodAny.create;
ZodNever.create;
var arrayType = ZodArray.create;
var objectType = ZodObject.create;
ZodObject.strictCreate;
var unionType = ZodUnion.create;
ZodIntersection.create;
ZodTuple.create;
ZodEnum.create;
ZodPromise.create;
ZodOptional.create;
ZodNullable.create;
function getCountryByIso2(iso2) {
  if (!iso2) {
    return;
  }
  return countries.find((c) => c.iso_2.toLowerCase() === iso2.toLowerCase());
}
var countries = [
  {
    iso_2: "af",
    iso_3: "afg",
    num_code: "4",
    name: "AFGHANISTAN",
    display_name: "Afghanistan"
  },
  {
    iso_2: "al",
    iso_3: "alb",
    num_code: "8",
    name: "ALBANIA",
    display_name: "Albania"
  },
  {
    iso_2: "dz",
    iso_3: "dza",
    num_code: "12",
    name: "ALGERIA",
    display_name: "Algeria"
  },
  {
    iso_2: "as",
    iso_3: "asm",
    num_code: "16",
    name: "AMERICAN SAMOA",
    display_name: "American Samoa"
  },
  {
    iso_2: "ad",
    iso_3: "and",
    num_code: "20",
    name: "ANDORRA",
    display_name: "Andorra"
  },
  {
    iso_2: "ao",
    iso_3: "ago",
    num_code: "24",
    name: "ANGOLA",
    display_name: "Angola"
  },
  {
    iso_2: "ai",
    iso_3: "aia",
    num_code: "660",
    name: "ANGUILLA",
    display_name: "Anguilla"
  },
  {
    iso_2: "aq",
    iso_3: "ata",
    num_code: "10",
    name: "ANTARCTICA",
    display_name: "Antarctica"
  },
  {
    iso_2: "ag",
    iso_3: "atg",
    num_code: "28",
    name: "ANTIGUA AND BARBUDA",
    display_name: "Antigua and Barbuda"
  },
  {
    iso_2: "ar",
    iso_3: "arg",
    num_code: "32",
    name: "ARGENTINA",
    display_name: "Argentina"
  },
  {
    iso_2: "am",
    iso_3: "arm",
    num_code: "51",
    name: "ARMENIA",
    display_name: "Armenia"
  },
  {
    iso_2: "aw",
    iso_3: "abw",
    num_code: "533",
    name: "ARUBA",
    display_name: "Aruba"
  },
  {
    iso_2: "au",
    iso_3: "aus",
    num_code: "36",
    name: "AUSTRALIA",
    display_name: "Australia"
  },
  {
    iso_2: "at",
    iso_3: "aut",
    num_code: "40",
    name: "AUSTRIA",
    display_name: "Austria"
  },
  {
    iso_2: "az",
    iso_3: "aze",
    num_code: "31",
    name: "AZERBAIJAN",
    display_name: "Azerbaijan"
  },
  {
    iso_2: "bs",
    iso_3: "bhs",
    num_code: "44",
    name: "BAHAMAS",
    display_name: "Bahamas"
  },
  {
    iso_2: "bh",
    iso_3: "bhr",
    num_code: "48",
    name: "BAHRAIN",
    display_name: "Bahrain"
  },
  {
    iso_2: "bd",
    iso_3: "bgd",
    num_code: "50",
    name: "BANGLADESH",
    display_name: "Bangladesh"
  },
  {
    iso_2: "bb",
    iso_3: "brb",
    num_code: "52",
    name: "BARBADOS",
    display_name: "Barbados"
  },
  {
    iso_2: "by",
    iso_3: "blr",
    num_code: "112",
    name: "BELARUS",
    display_name: "Belarus"
  },
  {
    iso_2: "be",
    iso_3: "bel",
    num_code: "56",
    name: "BELGIUM",
    display_name: "Belgium"
  },
  {
    iso_2: "bz",
    iso_3: "blz",
    num_code: "84",
    name: "BELIZE",
    display_name: "Belize"
  },
  {
    iso_2: "bj",
    iso_3: "ben",
    num_code: "204",
    name: "BENIN",
    display_name: "Benin"
  },
  {
    iso_2: "bm",
    iso_3: "bmu",
    num_code: "60",
    name: "BERMUDA",
    display_name: "Bermuda"
  },
  {
    iso_2: "bt",
    iso_3: "btn",
    num_code: "64",
    name: "BHUTAN",
    display_name: "Bhutan"
  },
  {
    iso_2: "bo",
    iso_3: "bol",
    num_code: "68",
    name: "BOLIVIA",
    display_name: "Bolivia"
  },
  {
    iso_2: "bq",
    iso_3: "bes",
    num_code: "535",
    name: "BONAIRE, SINT EUSTATIUS AND SABA",
    display_name: "Bonaire, Sint Eustatius and Saba"
  },
  {
    iso_2: "ba",
    iso_3: "bih",
    num_code: "70",
    name: "BOSNIA AND HERZEGOVINA",
    display_name: "Bosnia and Herzegovina"
  },
  {
    iso_2: "bw",
    iso_3: "bwa",
    num_code: "72",
    name: "BOTSWANA",
    display_name: "Botswana"
  },
  {
    iso_2: "bv",
    iso_3: "bvd",
    num_code: "74",
    name: "BOUVET ISLAND",
    display_name: "Bouvet Island"
  },
  {
    iso_2: "br",
    iso_3: "bra",
    num_code: "76",
    name: "BRAZIL",
    display_name: "Brazil"
  },
  {
    iso_2: "io",
    iso_3: "iot",
    num_code: "86",
    name: "BRITISH INDIAN OCEAN TERRITORY",
    display_name: "British Indian Ocean Territory"
  },
  {
    iso_2: "bn",
    iso_3: "brn",
    num_code: "96",
    name: "BRUNEI DARUSSALAM",
    display_name: "Brunei Darussalam"
  },
  {
    iso_2: "bg",
    iso_3: "bgr",
    num_code: "100",
    name: "BULGARIA",
    display_name: "Bulgaria"
  },
  {
    iso_2: "bf",
    iso_3: "bfa",
    num_code: "854",
    name: "BURKINA FASO",
    display_name: "Burkina Faso"
  },
  {
    iso_2: "bi",
    iso_3: "bdi",
    num_code: "108",
    name: "BURUNDI",
    display_name: "Burundi"
  },
  {
    iso_2: "kh",
    iso_3: "khm",
    num_code: "116",
    name: "CAMBODIA",
    display_name: "Cambodia"
  },
  {
    iso_2: "cm",
    iso_3: "cmr",
    num_code: "120",
    name: "CAMEROON",
    display_name: "Cameroon"
  },
  {
    iso_2: "ca",
    iso_3: "can",
    num_code: "124",
    name: "CANADA",
    display_name: "Canada"
  },
  {
    iso_2: "cv",
    iso_3: "cpv",
    num_code: "132",
    name: "CAPE VERDE",
    display_name: "Cape Verde"
  },
  {
    iso_2: "ky",
    iso_3: "cym",
    num_code: "136",
    name: "CAYMAN ISLANDS",
    display_name: "Cayman Islands"
  },
  {
    iso_2: "cf",
    iso_3: "caf",
    num_code: "140",
    name: "CENTRAL AFRICAN REPUBLIC",
    display_name: "Central African Republic"
  },
  {
    iso_2: "td",
    iso_3: "tcd",
    num_code: "148",
    name: "CHAD",
    display_name: "Chad"
  },
  {
    iso_2: "cl",
    iso_3: "chl",
    num_code: "152",
    name: "CHILE",
    display_name: "Chile"
  },
  {
    iso_2: "cn",
    iso_3: "chn",
    num_code: "156",
    name: "CHINA",
    display_name: "China"
  },
  {
    iso_2: "cx",
    iso_3: "cxr",
    num_code: "162",
    name: "CHRISTMAS ISLAND",
    display_name: "Christmas Island"
  },
  {
    iso_2: "cc",
    iso_3: "cck",
    num_code: "166",
    name: "COCOS (KEELING) ISLANDS",
    display_name: "Cocos (Keeling) Islands"
  },
  {
    iso_2: "co",
    iso_3: "col",
    num_code: "170",
    name: "COLOMBIA",
    display_name: "Colombia"
  },
  {
    iso_2: "km",
    iso_3: "com",
    num_code: "174",
    name: "COMOROS",
    display_name: "Comoros"
  },
  {
    iso_2: "cg",
    iso_3: "cog",
    num_code: "178",
    name: "CONGO",
    display_name: "Congo"
  },
  {
    iso_2: "cd",
    iso_3: "cod",
    num_code: "180",
    name: "CONGO, THE DEMOCRATIC REPUBLIC OF THE",
    display_name: "Congo, the Democratic Republic of the"
  },
  {
    iso_2: "ck",
    iso_3: "cok",
    num_code: "184",
    name: "COOK ISLANDS",
    display_name: "Cook Islands"
  },
  {
    iso_2: "cr",
    iso_3: "cri",
    num_code: "188",
    name: "COSTA RICA",
    display_name: "Costa Rica"
  },
  {
    iso_2: "ci",
    iso_3: "civ",
    num_code: "384",
    name: "COTE D'IVOIRE",
    display_name: "Cote D'Ivoire"
  },
  {
    iso_2: "hr",
    iso_3: "hrv",
    num_code: "191",
    name: "CROATIA",
    display_name: "Croatia"
  },
  {
    iso_2: "cu",
    iso_3: "cub",
    num_code: "192",
    name: "CUBA",
    display_name: "Cuba"
  },
  {
    iso_2: "cw",
    iso_3: "cuw",
    num_code: "531",
    name: "CURAÇAO",
    display_name: "Curaçao"
  },
  {
    iso_2: "cy",
    iso_3: "cyp",
    num_code: "196",
    name: "CYPRUS",
    display_name: "Cyprus"
  },
  {
    iso_2: "cz",
    iso_3: "cze",
    num_code: "203",
    name: "CZECH REPUBLIC",
    display_name: "Czech Republic"
  },
  {
    iso_2: "dk",
    iso_3: "dnk",
    num_code: "208",
    name: "DENMARK",
    display_name: "Denmark"
  },
  {
    iso_2: "dj",
    iso_3: "dji",
    num_code: "262",
    name: "DJIBOUTI",
    display_name: "Djibouti"
  },
  {
    iso_2: "dm",
    iso_3: "dma",
    num_code: "212",
    name: "DOMINICA",
    display_name: "Dominica"
  },
  {
    iso_2: "do",
    iso_3: "dom",
    num_code: "214",
    name: "DOMINICAN REPUBLIC",
    display_name: "Dominican Republic"
  },
  {
    iso_2: "ec",
    iso_3: "ecu",
    num_code: "218",
    name: "ECUADOR",
    display_name: "Ecuador"
  },
  {
    iso_2: "eg",
    iso_3: "egy",
    num_code: "818",
    name: "EGYPT",
    display_name: "Egypt"
  },
  {
    iso_2: "sv",
    iso_3: "slv",
    num_code: "222",
    name: "EL SALVADOR",
    display_name: "El Salvador"
  },
  {
    iso_2: "gq",
    iso_3: "gnq",
    num_code: "226",
    name: "EQUATORIAL GUINEA",
    display_name: "Equatorial Guinea"
  },
  {
    iso_2: "er",
    iso_3: "eri",
    num_code: "232",
    name: "ERITREA",
    display_name: "Eritrea"
  },
  {
    iso_2: "ee",
    iso_3: "est",
    num_code: "233",
    name: "ESTONIA",
    display_name: "Estonia"
  },
  {
    iso_2: "et",
    iso_3: "eth",
    num_code: "231",
    name: "ETHIOPIA",
    display_name: "Ethiopia"
  },
  {
    iso_2: "fk",
    iso_3: "flk",
    num_code: "238",
    name: "FALKLAND ISLANDS (MALVINAS)",
    display_name: "Falkland Islands (Malvinas)"
  },
  {
    iso_2: "fo",
    iso_3: "fro",
    num_code: "234",
    name: "FAROE ISLANDS",
    display_name: "Faroe Islands"
  },
  {
    iso_2: "fj",
    iso_3: "fji",
    num_code: "242",
    name: "FIJI",
    display_name: "Fiji"
  },
  {
    iso_2: "fi",
    iso_3: "fin",
    num_code: "246",
    name: "FINLAND",
    display_name: "Finland"
  },
  {
    iso_2: "fr",
    iso_3: "fra",
    num_code: "250",
    name: "FRANCE",
    display_name: "France"
  },
  {
    iso_2: "gf",
    iso_3: "guf",
    num_code: "254",
    name: "FRENCH GUIANA",
    display_name: "French Guiana"
  },
  {
    iso_2: "pf",
    iso_3: "pyf",
    num_code: "258",
    name: "FRENCH POLYNESIA",
    display_name: "French Polynesia"
  },
  {
    iso_2: "tf",
    iso_3: "atf",
    num_code: "260",
    name: "FRENCH SOUTHERN TERRITORIES",
    display_name: "French Southern Territories"
  },
  {
    iso_2: "ga",
    iso_3: "gab",
    num_code: "266",
    name: "GABON",
    display_name: "Gabon"
  },
  {
    iso_2: "gm",
    iso_3: "gmb",
    num_code: "270",
    name: "GAMBIA",
    display_name: "Gambia"
  },
  {
    iso_2: "ge",
    iso_3: "geo",
    num_code: "268",
    name: "GEORGIA",
    display_name: "Georgia"
  },
  {
    iso_2: "de",
    iso_3: "deu",
    num_code: "276",
    name: "GERMANY",
    display_name: "Germany"
  },
  {
    iso_2: "gh",
    iso_3: "gha",
    num_code: "288",
    name: "GHANA",
    display_name: "Ghana"
  },
  {
    iso_2: "gi",
    iso_3: "gib",
    num_code: "292",
    name: "GIBRALTAR",
    display_name: "Gibraltar"
  },
  {
    iso_2: "gr",
    iso_3: "grc",
    num_code: "300",
    name: "GREECE",
    display_name: "Greece"
  },
  {
    iso_2: "gl",
    iso_3: "grl",
    num_code: "304",
    name: "GREENLAND",
    display_name: "Greenland"
  },
  {
    iso_2: "gd",
    iso_3: "grd",
    num_code: "308",
    name: "GRENADA",
    display_name: "Grenada"
  },
  {
    iso_2: "gp",
    iso_3: "glp",
    num_code: "312",
    name: "GUADELOUPE",
    display_name: "Guadeloupe"
  },
  {
    iso_2: "gu",
    iso_3: "gum",
    num_code: "316",
    name: "GUAM",
    display_name: "Guam"
  },
  {
    iso_2: "gt",
    iso_3: "gtm",
    num_code: "320",
    name: "GUATEMALA",
    display_name: "Guatemala"
  },
  {
    iso_2: "gg",
    iso_3: "ggy",
    num_code: "831",
    name: "GUERNSEY",
    display_name: "Guernsey"
  },
  {
    iso_2: "gn",
    iso_3: "gin",
    num_code: "324",
    name: "GUINEA",
    display_name: "Guinea"
  },
  {
    iso_2: "gw",
    iso_3: "gnb",
    num_code: "624",
    name: "GUINEA-BISSAU",
    display_name: "Guinea-Bissau"
  },
  {
    iso_2: "gy",
    iso_3: "guy",
    num_code: "328",
    name: "GUYANA",
    display_name: "Guyana"
  },
  {
    iso_2: "ht",
    iso_3: "hti",
    num_code: "332",
    name: "HAITI",
    display_name: "Haiti"
  },
  {
    iso_2: "hm",
    iso_3: "hmd",
    num_code: "334",
    name: "HEARD ISLAND AND MCDONALD ISLANDS",
    display_name: "Heard Island And Mcdonald Islands"
  },
  {
    iso_2: "va",
    iso_3: "vat",
    num_code: "336",
    name: "HOLY SEE (VATICAN CITY STATE)",
    display_name: "Holy See (Vatican City State)"
  },
  {
    iso_2: "hn",
    iso_3: "hnd",
    num_code: "340",
    name: "HONDURAS",
    display_name: "Honduras"
  },
  {
    iso_2: "hk",
    iso_3: "hkg",
    num_code: "344",
    name: "HONG KONG",
    display_name: "Hong Kong"
  },
  {
    iso_2: "hu",
    iso_3: "hun",
    num_code: "348",
    name: "HUNGARY",
    display_name: "Hungary"
  },
  {
    iso_2: "is",
    iso_3: "isl",
    num_code: "352",
    name: "ICELAND",
    display_name: "Iceland"
  },
  {
    iso_2: "in",
    iso_3: "ind",
    num_code: "356",
    name: "INDIA",
    display_name: "India"
  },
  {
    iso_2: "id",
    iso_3: "idn",
    num_code: "360",
    name: "INDONESIA",
    display_name: "Indonesia"
  },
  {
    iso_2: "ir",
    iso_3: "irn",
    num_code: "364",
    name: "IRAN, ISLAMIC REPUBLIC OF",
    display_name: "Iran, Islamic Republic of"
  },
  {
    iso_2: "iq",
    iso_3: "irq",
    num_code: "368",
    name: "IRAQ",
    display_name: "Iraq"
  },
  {
    iso_2: "ie",
    iso_3: "irl",
    num_code: "372",
    name: "IRELAND",
    display_name: "Ireland"
  },
  {
    iso_2: "im",
    iso_3: "imn",
    num_code: "833",
    name: "ISLE OF MAN",
    display_name: "Isle Of Man"
  },
  {
    iso_2: "il",
    iso_3: "isr",
    num_code: "376",
    name: "ISRAEL",
    display_name: "Israel"
  },
  {
    iso_2: "it",
    iso_3: "ita",
    num_code: "380",
    name: "ITALY",
    display_name: "Italy"
  },
  {
    iso_2: "jm",
    iso_3: "jam",
    num_code: "388",
    name: "JAMAICA",
    display_name: "Jamaica"
  },
  {
    iso_2: "jp",
    iso_3: "jpn",
    num_code: "392",
    name: "JAPAN",
    display_name: "Japan"
  },
  {
    iso_2: "je",
    iso_3: "jey",
    num_code: "832",
    name: "JERSEY",
    display_name: "Jersey"
  },
  {
    iso_2: "jo",
    iso_3: "jor",
    num_code: "400",
    name: "JORDAN",
    display_name: "Jordan"
  },
  {
    iso_2: "kz",
    iso_3: "kaz",
    num_code: "398",
    name: "KAZAKHSTAN",
    display_name: "Kazakhstan"
  },
  {
    iso_2: "ke",
    iso_3: "ken",
    num_code: "404",
    name: "KENYA",
    display_name: "Kenya"
  },
  {
    iso_2: "ki",
    iso_3: "kir",
    num_code: "296",
    name: "KIRIBATI",
    display_name: "Kiribati"
  },
  {
    iso_2: "kp",
    iso_3: "prk",
    num_code: "408",
    name: "KOREA, DEMOCRATIC PEOPLE'S REPUBLIC OF",
    display_name: "Korea, Democratic People's Republic of"
  },
  {
    iso_2: "kr",
    iso_3: "kor",
    num_code: "410",
    name: "KOREA, REPUBLIC OF",
    display_name: "Korea, Republic of"
  },
  {
    iso_2: "xk",
    iso_3: "xkx",
    num_code: "900",
    name: "KOSOVO",
    display_name: "Kosovo"
  },
  {
    iso_2: "kw",
    iso_3: "kwt",
    num_code: "414",
    name: "KUWAIT",
    display_name: "Kuwait"
  },
  {
    iso_2: "kg",
    iso_3: "kgz",
    num_code: "417",
    name: "KYRGYZSTAN",
    display_name: "Kyrgyzstan"
  },
  {
    iso_2: "la",
    iso_3: "lao",
    num_code: "418",
    name: "LAO PEOPLE'S DEMOCRATIC REPUBLIC",
    display_name: "Lao People's Democratic Republic"
  },
  {
    iso_2: "lv",
    iso_3: "lva",
    num_code: "428",
    name: "LATVIA",
    display_name: "Latvia"
  },
  {
    iso_2: "lb",
    iso_3: "lbn",
    num_code: "422",
    name: "LEBANON",
    display_name: "Lebanon"
  },
  {
    iso_2: "ls",
    iso_3: "lso",
    num_code: "426",
    name: "LESOTHO",
    display_name: "Lesotho"
  },
  {
    iso_2: "lr",
    iso_3: "lbr",
    num_code: "430",
    name: "LIBERIA",
    display_name: "Liberia"
  },
  {
    iso_2: "ly",
    iso_3: "lby",
    num_code: "434",
    name: "LIBYA",
    display_name: "Libya"
  },
  {
    iso_2: "li",
    iso_3: "lie",
    num_code: "438",
    name: "LIECHTENSTEIN",
    display_name: "Liechtenstein"
  },
  {
    iso_2: "lt",
    iso_3: "ltu",
    num_code: "440",
    name: "LITHUANIA",
    display_name: "Lithuania"
  },
  {
    iso_2: "lu",
    iso_3: "lux",
    num_code: "442",
    name: "LUXEMBOURG",
    display_name: "Luxembourg"
  },
  {
    iso_2: "mo",
    iso_3: "mac",
    num_code: "446",
    name: "MACAO",
    display_name: "Macao"
  },
  {
    iso_2: "mk",
    iso_3: "mkd",
    num_code: "807",
    name: "MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF",
    display_name: "Macedonia, the Former Yugoslav Republic of"
  },
  {
    iso_2: "mg",
    iso_3: "mdg",
    num_code: "450",
    name: "MADAGASCAR",
    display_name: "Madagascar"
  },
  {
    iso_2: "mw",
    iso_3: "mwi",
    num_code: "454",
    name: "MALAWI",
    display_name: "Malawi"
  },
  {
    iso_2: "my",
    iso_3: "mys",
    num_code: "458",
    name: "MALAYSIA",
    display_name: "Malaysia"
  },
  {
    iso_2: "mv",
    iso_3: "mdv",
    num_code: "462",
    name: "MALDIVES",
    display_name: "Maldives"
  },
  {
    iso_2: "ml",
    iso_3: "mli",
    num_code: "466",
    name: "MALI",
    display_name: "Mali"
  },
  {
    iso_2: "mt",
    iso_3: "mlt",
    num_code: "470",
    name: "MALTA",
    display_name: "Malta"
  },
  {
    iso_2: "mh",
    iso_3: "mhl",
    num_code: "584",
    name: "MARSHALL ISLANDS",
    display_name: "Marshall Islands"
  },
  {
    iso_2: "mq",
    iso_3: "mtq",
    num_code: "474",
    name: "MARTINIQUE",
    display_name: "Martinique"
  },
  {
    iso_2: "mr",
    iso_3: "mrt",
    num_code: "478",
    name: "MAURITANIA",
    display_name: "Mauritania"
  },
  {
    iso_2: "mu",
    iso_3: "mus",
    num_code: "480",
    name: "MAURITIUS",
    display_name: "Mauritius"
  },
  {
    iso_2: "yt",
    iso_3: "myt",
    num_code: "175",
    name: "MAYOTTE",
    display_name: "Mayotte"
  },
  {
    iso_2: "mx",
    iso_3: "mex",
    num_code: "484",
    name: "MEXICO",
    display_name: "Mexico"
  },
  {
    iso_2: "fm",
    iso_3: "fsm",
    num_code: "583",
    name: "MICRONESIA, FEDERATED STATES OF",
    display_name: "Micronesia, Federated States of"
  },
  {
    iso_2: "md",
    iso_3: "mda",
    num_code: "498",
    name: "MOLDOVA, REPUBLIC OF",
    display_name: "Moldova, Republic of"
  },
  {
    iso_2: "mc",
    iso_3: "mco",
    num_code: "492",
    name: "MONACO",
    display_name: "Monaco"
  },
  {
    iso_2: "mn",
    iso_3: "mng",
    num_code: "496",
    name: "MONGOLIA",
    display_name: "Mongolia"
  },
  {
    iso_2: "me",
    iso_3: "mne",
    num_code: "499",
    name: "MONTENEGRO",
    display_name: "Montenegro"
  },
  {
    iso_2: "ms",
    iso_3: "msr",
    num_code: "500",
    name: "MONTSERRAT",
    display_name: "Montserrat"
  },
  {
    iso_2: "ma",
    iso_3: "mar",
    num_code: "504",
    name: "MOROCCO",
    display_name: "Morocco"
  },
  {
    iso_2: "mz",
    iso_3: "moz",
    num_code: "508",
    name: "MOZAMBIQUE",
    display_name: "Mozambique"
  },
  {
    iso_2: "mm",
    iso_3: "mmr",
    num_code: "104",
    name: "MYANMAR",
    display_name: "Myanmar"
  },
  {
    iso_2: "na",
    iso_3: "nam",
    num_code: "516",
    name: "NAMIBIA",
    display_name: "Namibia"
  },
  {
    iso_2: "nr",
    iso_3: "nru",
    num_code: "520",
    name: "NAURU",
    display_name: "Nauru"
  },
  {
    iso_2: "np",
    iso_3: "npl",
    num_code: "524",
    name: "NEPAL",
    display_name: "Nepal"
  },
  {
    iso_2: "nl",
    iso_3: "nld",
    num_code: "528",
    name: "NETHERLANDS",
    display_name: "Netherlands"
  },
  {
    iso_2: "nc",
    iso_3: "ncl",
    num_code: "540",
    name: "NEW CALEDONIA",
    display_name: "New Caledonia"
  },
  {
    iso_2: "nz",
    iso_3: "nzl",
    num_code: "554",
    name: "NEW ZEALAND",
    display_name: "New Zealand"
  },
  {
    iso_2: "ni",
    iso_3: "nic",
    num_code: "558",
    name: "NICARAGUA",
    display_name: "Nicaragua"
  },
  {
    iso_2: "ne",
    iso_3: "ner",
    num_code: "562",
    name: "NIGER",
    display_name: "Niger"
  },
  {
    iso_2: "ng",
    iso_3: "nga",
    num_code: "566",
    name: "NIGERIA",
    display_name: "Nigeria"
  },
  {
    iso_2: "nu",
    iso_3: "niu",
    num_code: "570",
    name: "NIUE",
    display_name: "Niue"
  },
  {
    iso_2: "nf",
    iso_3: "nfk",
    num_code: "574",
    name: "NORFOLK ISLAND",
    display_name: "Norfolk Island"
  },
  {
    iso_2: "mp",
    iso_3: "mnp",
    num_code: "580",
    name: "NORTHERN MARIANA ISLANDS",
    display_name: "Northern Mariana Islands"
  },
  {
    iso_2: "no",
    iso_3: "nor",
    num_code: "578",
    name: "NORWAY",
    display_name: "Norway"
  },
  {
    iso_2: "om",
    iso_3: "omn",
    num_code: "512",
    name: "OMAN",
    display_name: "Oman"
  },
  {
    iso_2: "pk",
    iso_3: "pak",
    num_code: "586",
    name: "PAKISTAN",
    display_name: "Pakistan"
  },
  {
    iso_2: "pw",
    iso_3: "plw",
    num_code: "585",
    name: "PALAU",
    display_name: "Palau"
  },
  {
    iso_2: "ps",
    iso_3: "pse",
    num_code: "275",
    name: "PALESTINIAN TERRITORY, OCCUPIED",
    display_name: "Palestinian Territory, Occupied"
  },
  {
    iso_2: "pa",
    iso_3: "pan",
    num_code: "591",
    name: "PANAMA",
    display_name: "Panama"
  },
  {
    iso_2: "pg",
    iso_3: "png",
    num_code: "598",
    name: "PAPUA NEW GUINEA",
    display_name: "Papua New Guinea"
  },
  {
    iso_2: "py",
    iso_3: "pry",
    num_code: "600",
    name: "PARAGUAY",
    display_name: "Paraguay"
  },
  {
    iso_2: "pe",
    iso_3: "per",
    num_code: "604",
    name: "PERU",
    display_name: "Peru"
  },
  {
    iso_2: "ph",
    iso_3: "phl",
    num_code: "608",
    name: "PHILIPPINES",
    display_name: "Philippines"
  },
  {
    iso_2: "pn",
    iso_3: "pcn",
    num_code: "612",
    name: "PITCAIRN",
    display_name: "Pitcairn"
  },
  {
    iso_2: "pl",
    iso_3: "pol",
    num_code: "616",
    name: "POLAND",
    display_name: "Poland"
  },
  {
    iso_2: "pt",
    iso_3: "prt",
    num_code: "620",
    name: "PORTUGAL",
    display_name: "Portugal"
  },
  {
    iso_2: "pr",
    iso_3: "pri",
    num_code: "630",
    name: "PUERTO RICO",
    display_name: "Puerto Rico"
  },
  {
    iso_2: "qa",
    iso_3: "qat",
    num_code: "634",
    name: "QATAR",
    display_name: "Qatar"
  },
  {
    iso_2: "re",
    iso_3: "reu",
    num_code: "638",
    name: "REUNION",
    display_name: "Reunion"
  },
  {
    iso_2: "ro",
    iso_3: "rom",
    num_code: "642",
    name: "ROMANIA",
    display_name: "Romania"
  },
  {
    iso_2: "ru",
    iso_3: "rus",
    num_code: "643",
    name: "RUSSIAN FEDERATION",
    display_name: "Russian Federation"
  },
  {
    iso_2: "rw",
    iso_3: "rwa",
    num_code: "646",
    name: "RWANDA",
    display_name: "Rwanda"
  },
  {
    iso_2: "bl",
    iso_3: "blm",
    num_code: "652",
    name: "SAINT BARTHÉLEMY",
    display_name: "Saint Barthélemy"
  },
  {
    iso_2: "sh",
    iso_3: "shn",
    num_code: "654",
    name: "SAINT HELENA",
    display_name: "Saint Helena"
  },
  {
    iso_2: "kn",
    iso_3: "kna",
    num_code: "659",
    name: "SAINT KITTS AND NEVIS",
    display_name: "Saint Kitts and Nevis"
  },
  {
    iso_2: "lc",
    iso_3: "lca",
    num_code: "662",
    name: "SAINT LUCIA",
    display_name: "Saint Lucia"
  },
  {
    iso_2: "mf",
    iso_3: "maf",
    num_code: "663",
    name: "SAINT MARTIN (FRENCH PART)",
    display_name: "Saint Martin (French part)"
  },
  {
    iso_2: "pm",
    iso_3: "spm",
    num_code: "666",
    name: "SAINT PIERRE AND MIQUELON",
    display_name: "Saint Pierre and Miquelon"
  },
  {
    iso_2: "vc",
    iso_3: "vct",
    num_code: "670",
    name: "SAINT VINCENT AND THE GRENADINES",
    display_name: "Saint Vincent and the Grenadines"
  },
  {
    iso_2: "ws",
    iso_3: "wsm",
    num_code: "882",
    name: "SAMOA",
    display_name: "Samoa"
  },
  {
    iso_2: "sm",
    iso_3: "smr",
    num_code: "674",
    name: "SAN MARINO",
    display_name: "San Marino"
  },
  {
    iso_2: "st",
    iso_3: "stp",
    num_code: "678",
    name: "SAO TOME AND PRINCIPE",
    display_name: "Sao Tome and Principe"
  },
  {
    iso_2: "sa",
    iso_3: "sau",
    num_code: "682",
    name: "SAUDI ARABIA",
    display_name: "Saudi Arabia"
  },
  {
    iso_2: "sn",
    iso_3: "sen",
    num_code: "686",
    name: "SENEGAL",
    display_name: "Senegal"
  },
  {
    iso_2: "rs",
    iso_3: "srb",
    num_code: "688",
    name: "SERBIA",
    display_name: "Serbia"
  },
  {
    iso_2: "sc",
    iso_3: "syc",
    num_code: "690",
    name: "SEYCHELLES",
    display_name: "Seychelles"
  },
  {
    iso_2: "sl",
    iso_3: "sle",
    num_code: "694",
    name: "SIERRA LEONE",
    display_name: "Sierra Leone"
  },
  {
    iso_2: "sg",
    iso_3: "sgp",
    num_code: "702",
    name: "SINGAPORE",
    display_name: "Singapore"
  },
  {
    iso_2: "sx",
    iso_3: "sxm",
    num_code: "534",
    name: "SINT MAARTEN",
    display_name: "Sint Maarten"
  },
  {
    iso_2: "sk",
    iso_3: "svk",
    num_code: "703",
    name: "SLOVAKIA",
    display_name: "Slovakia"
  },
  {
    iso_2: "si",
    iso_3: "svn",
    num_code: "705",
    name: "SLOVENIA",
    display_name: "Slovenia"
  },
  {
    iso_2: "sb",
    iso_3: "slb",
    num_code: "90",
    name: "SOLOMON ISLANDS",
    display_name: "Solomon Islands"
  },
  {
    iso_2: "so",
    iso_3: "som",
    num_code: "706",
    name: "SOMALIA",
    display_name: "Somalia"
  },
  {
    iso_2: "za",
    iso_3: "zaf",
    num_code: "710",
    name: "SOUTH AFRICA",
    display_name: "South Africa"
  },
  {
    iso_2: "gs",
    iso_3: "sgs",
    num_code: "239",
    name: "SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS",
    display_name: "South Georgia and the South Sandwich Islands"
  },
  {
    iso_2: "ss",
    iso_3: "ssd",
    num_code: "728",
    name: "SOUTH SUDAN",
    display_name: "South Sudan"
  },
  {
    iso_2: "es",
    iso_3: "esp",
    num_code: "724",
    name: "SPAIN",
    display_name: "Spain"
  },
  {
    iso_2: "lk",
    iso_3: "lka",
    num_code: "144",
    name: "SRI LANKA",
    display_name: "Sri Lanka"
  },
  {
    iso_2: "sd",
    iso_3: "sdn",
    num_code: "729",
    name: "SUDAN",
    display_name: "Sudan"
  },
  {
    iso_2: "sr",
    iso_3: "sur",
    num_code: "740",
    name: "SURINAME",
    display_name: "Suriname"
  },
  {
    iso_2: "sj",
    iso_3: "sjm",
    num_code: "744",
    name: "SVALBARD AND JAN MAYEN",
    display_name: "Svalbard and Jan Mayen"
  },
  {
    iso_2: "sz",
    iso_3: "swz",
    num_code: "748",
    name: "SWAZILAND",
    display_name: "Swaziland"
  },
  {
    iso_2: "se",
    iso_3: "swe",
    num_code: "752",
    name: "SWEDEN",
    display_name: "Sweden"
  },
  {
    iso_2: "ch",
    iso_3: "che",
    num_code: "756",
    name: "SWITZERLAND",
    display_name: "Switzerland"
  },
  {
    iso_2: "sy",
    iso_3: "syr",
    num_code: "760",
    name: "SYRIAN ARAB REPUBLIC",
    display_name: "Syrian Arab Republic"
  },
  {
    iso_2: "tw",
    iso_3: "twn",
    num_code: "158",
    name: "TAIWAN, PROVINCE OF CHINA",
    display_name: "Taiwan, Province of China"
  },
  {
    iso_2: "tj",
    iso_3: "tjk",
    num_code: "762",
    name: "TAJIKISTAN",
    display_name: "Tajikistan"
  },
  {
    iso_2: "tz",
    iso_3: "tza",
    num_code: "834",
    name: "TANZANIA, UNITED REPUBLIC OF",
    display_name: "Tanzania, United Republic of"
  },
  {
    iso_2: "th",
    iso_3: "tha",
    num_code: "764",
    name: "THAILAND",
    display_name: "Thailand"
  },
  {
    iso_2: "tl",
    iso_3: "tls",
    num_code: "626",
    name: "TIMOR LESTE",
    display_name: "Timor Leste"
  },
  {
    iso_2: "tg",
    iso_3: "tgo",
    num_code: "768",
    name: "TOGO",
    display_name: "Togo"
  },
  {
    iso_2: "tk",
    iso_3: "tkl",
    num_code: "772",
    name: "TOKELAU",
    display_name: "Tokelau"
  },
  {
    iso_2: "to",
    iso_3: "ton",
    num_code: "776",
    name: "TONGA",
    display_name: "Tonga"
  },
  {
    iso_2: "tt",
    iso_3: "tto",
    num_code: "780",
    name: "TRINIDAD AND TOBAGO",
    display_name: "Trinidad and Tobago"
  },
  {
    iso_2: "tn",
    iso_3: "tun",
    num_code: "788",
    name: "TUNISIA",
    display_name: "Tunisia"
  },
  {
    iso_2: "tr",
    iso_3: "tur",
    num_code: "792",
    name: "TURKEY",
    display_name: "Turkey"
  },
  {
    iso_2: "tm",
    iso_3: "tkm",
    num_code: "795",
    name: "TURKMENISTAN",
    display_name: "Turkmenistan"
  },
  {
    iso_2: "tc",
    iso_3: "tca",
    num_code: "796",
    name: "TURKS AND CAICOS ISLANDS",
    display_name: "Turks and Caicos Islands"
  },
  {
    iso_2: "tv",
    iso_3: "tuv",
    num_code: "798",
    name: "TUVALU",
    display_name: "Tuvalu"
  },
  {
    iso_2: "ug",
    iso_3: "uga",
    num_code: "800",
    name: "UGANDA",
    display_name: "Uganda"
  },
  {
    iso_2: "ua",
    iso_3: "ukr",
    num_code: "804",
    name: "UKRAINE",
    display_name: "Ukraine"
  },
  {
    iso_2: "ae",
    iso_3: "are",
    num_code: "784",
    name: "UNITED ARAB EMIRATES",
    display_name: "United Arab Emirates"
  },
  {
    iso_2: "gb",
    iso_3: "gbr",
    num_code: "826",
    name: "UNITED KINGDOM",
    display_name: "United Kingdom"
  },
  {
    iso_2: "us",
    iso_3: "usa",
    num_code: "840",
    name: "UNITED STATES",
    display_name: "United States"
  },
  {
    iso_2: "um",
    iso_3: "umi",
    num_code: "581",
    name: "UNITED STATES MINOR OUTLYING ISLANDS",
    display_name: "United States Minor Outlying Islands"
  },
  {
    iso_2: "uy",
    iso_3: "ury",
    num_code: "858",
    name: "URUGUAY",
    display_name: "Uruguay"
  },
  {
    iso_2: "uz",
    iso_3: "uzb",
    num_code: "860",
    name: "UZBEKISTAN",
    display_name: "Uzbekistan"
  },
  {
    iso_2: "vu",
    iso_3: "vut",
    num_code: "548",
    name: "VANUATU",
    display_name: "Vanuatu"
  },
  {
    iso_2: "ve",
    iso_3: "ven",
    num_code: "862",
    name: "VENEZUELA",
    display_name: "Venezuela"
  },
  {
    iso_2: "vn",
    iso_3: "vnm",
    num_code: "704",
    name: "VIET NAM",
    display_name: "Viet Nam"
  },
  {
    iso_2: "vg",
    iso_3: "vgb",
    num_code: "92",
    name: "VIRGIN ISLANDS, BRITISH",
    display_name: "Virgin Islands, British"
  },
  {
    iso_2: "vi",
    iso_3: "vir",
    num_code: "850",
    name: "VIRGIN ISLANDS, U.S.",
    display_name: "Virgin Islands, U.S."
  },
  {
    iso_2: "wf",
    iso_3: "wlf",
    num_code: "876",
    name: "WALLIS AND FUTUNA",
    display_name: "Wallis and Futuna"
  },
  {
    iso_2: "eh",
    iso_3: "esh",
    num_code: "732",
    name: "WESTERN SAHARA",
    display_name: "Western Sahara"
  },
  {
    iso_2: "ye",
    iso_3: "yem",
    num_code: "887",
    name: "YEMEN",
    display_name: "Yemen"
  },
  {
    iso_2: "zm",
    iso_3: "zmb",
    num_code: "894",
    name: "ZAMBIA",
    display_name: "Zambia"
  },
  {
    iso_2: "zw",
    iso_3: "zwe",
    num_code: "716",
    name: "ZIMBABWE",
    display_name: "Zimbabwe"
  },
  {
    iso_2: "ax",
    iso_3: "ala",
    num_code: "248",
    name: "ÅLAND ISLANDS",
    display_name: "Åland Islands"
  }
];
function isSameAddress(a, b) {
  if (!a || !b) {
    return false;
  }
  return a.first_name === b.first_name && a.last_name === b.last_name && a.address_1 === b.address_1 && a.address_2 === b.address_2 && a.city === b.city && a.postal_code === b.postal_code && a.province === b.province && a.country_code === b.country_code && a.phone === b.phone && a.company === b.company;
}
function getFormattedAddress(address) {
  if (!address) {
    return [];
  }
  const {
    first_name,
    last_name,
    company,
    address_1,
    address_2,
    city,
    postal_code,
    province,
    country_code
  } = address;
  const country = "country" in address ? address.country : null;
  const name = [first_name, last_name].filter(Boolean).join(" ");
  const formattedAddress = [];
  if (name) {
    formattedAddress.push(name);
  }
  if (company) {
    formattedAddress.push(company);
  }
  if (address_1) {
    formattedAddress.push(address_1);
  }
  if (address_2) {
    formattedAddress.push(address_2);
  }
  const cityProvincePostal = [city, province, postal_code].filter(Boolean).join(" ");
  if (cityProvincePostal) {
    formattedAddress.push(cityProvincePostal);
  }
  if (country) {
    formattedAddress.push(country.display_name);
  } else if (country_code) {
    const country2 = getCountryByIso2(country_code);
    if (country2) {
      formattedAddress.push(country2.display_name);
    } else {
      formattedAddress.push(country_code.toUpperCase());
    }
  }
  return formattedAddress;
}
var AddressCard = ({
  customerId,
  addressId,
  tag = "shipping",
  onRemove
}) => {
  const { address, isPending, isError, error } = useCustomerAddress(
    customerId,
    addressId
  );
  if (isError) {
    throw error;
  }
  const isReady = !isPending && !!address;
  return (0, import_jsx_runtime.jsxs)("div", { className: "px-3 py-2 rounded-lg bg-ui-bg-component shadow-elevation-card-rest flex items-center gap-4", children: [
    !isReady ? (0, import_jsx_runtime.jsx)(LoadingState$1, {}) : (0, import_jsx_runtime.jsx)(AddressInfo, { address }),
    (0, import_jsx_runtime.jsx)(Badge, { size: "2xsmall", children: tag === "shipping" ? "Shipping" : "Billing" }),
    onRemove && (0, import_jsx_runtime.jsx)(
      IconButton,
      {
        className: "shrink-0",
        variant: "transparent",
        size: "small",
        onClick: onRemove,
        type: "button",
        children: (0, import_jsx_runtime.jsx)(XMark, {})
      }
    )
  ] });
};
var LoadingState$1 = () => {
  return (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-0.5", children: [
    (0, import_jsx_runtime.jsx)(Skeleton, { className: "w-20 h-5" }),
    (0, import_jsx_runtime.jsx)(Skeleton, { className: "w-16 h-5" }),
    (0, import_jsx_runtime.jsx)(Skeleton, { className: "w-16 h-5" })
  ] });
};
var AddressInfo = ({ address }) => {
  const addressSegments = getFormattedAddress(address);
  return (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col flex-1", children: [
    address.address_name && (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: address.address_name }),
    addressSegments.map((segment, idx) => (0, import_jsx_runtime.jsxs)(Text, { size: "small", leading: "compact", className: "text-ui-fg-subtle", children: [
      segment,
      idx < addressSegments.length - 1 && ", "
    ] }))
  ] });
};
var CustomerCard = ({ customerId, onRemove }) => {
  const { customer, isPending, isError, error } = useCustomer(customerId);
  if (isError) {
    throw error;
  }
  const isReady = !isPending && !!customer;
  return (0, import_jsx_runtime.jsxs)("div", { className: "px-3 py-2 rounded-lg bg-ui-bg-component shadow-elevation-card-rest flex items-center gap-4", children: [
    !isReady ? (0, import_jsx_runtime.jsx)(LoadingState, {}) : (0, import_jsx_runtime.jsx)(CustomerInfo, { customer }),
    onRemove && (0, import_jsx_runtime.jsx)(
      IconButton,
      {
        className: "shrink-0",
        variant: "transparent",
        size: "small",
        onClick: onRemove,
        type: "button",
        children: (0, import_jsx_runtime.jsx)(XMark, {})
      }
    )
  ] });
};
var LoadingState = () => {
  return (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-4", children: [
    (0, import_jsx_runtime.jsx)(Skeleton, { className: "w-7 h-7 rounded-full" }),
    (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-1", children: [
      (0, import_jsx_runtime.jsx)(Skeleton, { className: "w-20 h-5" }),
      (0, import_jsx_runtime.jsx)(Skeleton, { className: "w-16 h-5" })
    ] })
  ] });
};
var CustomerInfo = ({ customer }) => {
  const name = [customer.first_name, customer.last_name].filter(Boolean).join(" ");
  const fallback = name ? name[0] : customer.email[0];
  return (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-4 flex-1", children: [
    (0, import_jsx_runtime.jsx)(Avatar, { size: "small", fallback, className: "w-6 h-6" }),
    (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col flex-1 overflow-hidden", children: [
      name && (0, import_jsx_runtime.jsx)(
        Text,
        {
          leading: "compact",
          size: "small",
          weight: "plus",
          className: "truncate",
          children: name
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Text,
        {
          leading: "compact",
          size: "small",
          className: "text-ui-fg-subtle truncate",
          children: customer.email
        }
      )
    ] })
  ] });
};
var Provider = FormProvider;
var FormFieldContext = (0, import_react.createContext)(
  {}
);
var Field = ({
  ...props
}) => {
  return (0, import_jsx_runtime.jsx)(FormFieldContext.Provider, { value: { name: props.name }, children: (0, import_jsx_runtime.jsx)(Controller, { ...props }) });
};
var FormItemContext = (0, import_react.createContext)(
  {}
);
var useFormField = () => {
  const fieldContext = (0, import_react.useContext)(FormFieldContext);
  const itemContext = (0, import_react.useContext)(FormItemContext);
  const { getFieldState } = useFormContext();
  const formState = useFormState({ name: fieldContext.name });
  const fieldState = getFieldState(fieldContext.name, formState);
  if (!fieldContext) {
    throw new Error("useFormField should be used within a FormField");
  }
  const { id } = itemContext;
  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formLabelId: `${id}-form-item-label`,
    formDescriptionId: `${id}-form-item-description`,
    formErrorMessageId: `${id}-form-item-message`,
    ...fieldState
  };
};
var Item$2 = (0, import_react.forwardRef)(
  ({ className, ...props }, ref) => {
    const id = (0, import_react.useId)();
    return (0, import_jsx_runtime.jsx)(FormItemContext.Provider, { value: { id }, children: (0, import_jsx_runtime.jsx)(
      "div",
      {
        ref,
        className: clx("flex flex-col space-y-2", className),
        ...props
      }
    ) });
  }
);
Item$2.displayName = "Form.Item";
var Label2 = (0, import_react.forwardRef)(
  ({
    className,
    optional = false,
    tooltip,
    icon,
    variant = "default",
    ...props
  }, ref) => {
    const { formLabelId, formItemId } = useFormField();
    return (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-1", children: [
      (0, import_jsx_runtime.jsx)(
        Label,
        {
          id: formLabelId,
          ref,
          className: clx(
            {
              "text-ui-fg-subtle": variant === "subtle"
            },
            className
          ),
          htmlFor: formItemId,
          size: "small",
          weight: variant === "default" ? "plus" : "regular",
          ...props
        }
      ),
      tooltip && (0, import_jsx_runtime.jsx)(Tooltip, { content: tooltip, children: (0, import_jsx_runtime.jsx)(InformationCircleSolid, { className: "text-ui-fg-muted" }) }),
      icon,
      optional && (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", className: "text-ui-fg-muted", children: "(Optional)" })
    ] });
  }
);
Label2.displayName = "Form.Label";
var Control = (0, import_react.forwardRef)(({ ...props }, ref) => {
  const {
    error,
    formItemId,
    formDescriptionId,
    formErrorMessageId,
    formLabelId
  } = useFormField();
  return (0, import_jsx_runtime.jsx)(
    dist_exports.Root,
    {
      ref,
      id: formItemId,
      "aria-describedby": !error ? `${formDescriptionId}` : `${formDescriptionId} ${formErrorMessageId}`,
      "aria-invalid": !!error,
      "aria-labelledby": formLabelId,
      ...props
    }
  );
});
Control.displayName = "Form.Control";
var Hint2 = (0, import_react.forwardRef)(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();
  return (0, import_jsx_runtime.jsx)(
    Hint,
    {
      ref,
      id: formDescriptionId,
      className,
      ...props
    }
  );
});
Hint2.displayName = "Form.Hint";
var ErrorMessage = (0, import_react.forwardRef)(({ className, children, ...props }, ref) => {
  const { error, formErrorMessageId } = useFormField();
  const msg = error ? String(error == null ? void 0 : error.message) : children;
  if (!msg || msg === "undefined") {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(
    Hint,
    {
      ref,
      id: formErrorMessageId,
      className,
      variant: error ? "error" : "info",
      ...props,
      children: msg
    }
  );
});
ErrorMessage.displayName = "Form.ErrorMessage";
var Form$2 = Object.assign(Provider, {
  Item: Item$2,
  Label: Label2,
  Control,
  Hint: Hint2,
  ErrorMessage,
  Field
});
var KeyboundForm = import_react.default.forwardRef(({ onSubmit, onKeyDown, ...rest }, ref) => {
  const handleSubmit = (event) => {
    event.preventDefault();
    onSubmit == null ? void 0 : onSubmit(event);
  };
  const handleKeyDown = (event) => {
    if (event.key === "Enter") {
      if (event.target instanceof HTMLTextAreaElement && !(event.metaKey || event.ctrlKey)) {
        return;
      }
      event.preventDefault();
      if (event.metaKey || event.ctrlKey) {
        handleSubmit(event);
      }
    }
  };
  return (0, import_jsx_runtime.jsx)(
    "form",
    {
      ...rest,
      onSubmit: handleSubmit,
      onKeyDown: onKeyDown ?? handleKeyDown,
      ref
    }
  );
});
KeyboundForm.displayName = "KeyboundForm";
function genericForwardRef(render) {
  return (0, import_react.forwardRef)(render);
}
var TABLUAR_NUM_WIDTH = 8;
var TAG_BASE_WIDTH = 28;
var ComboboxImpl = ({
  value: controlledValue,
  onChange,
  searchValue: controlledSearchValue,
  onSearchValueChange,
  options,
  className,
  placeholder,
  fetchNextPage,
  isFetchingNextPage,
  onCreateOption,
  noResultsPlaceholder,
  ...inputProps
}, ref) => {
  var _a;
  const [open, setOpen] = (0, import_react.useState)(false);
  const [isPending, startTransition] = (0, import_react.useTransition)();
  const comboboxRef = (0, import_react.useRef)(null);
  const listboxRef = (0, import_react.useRef)(null);
  (0, import_react.useImperativeHandle)(ref, () => comboboxRef.current);
  const isValueControlled = controlledValue !== void 0;
  const isSearchControlled = controlledSearchValue !== void 0;
  const isArrayValue = Array.isArray(controlledValue);
  const emptyState = isArrayValue ? [] : "";
  const [uncontrolledSearchValue, setUncontrolledSearchValue] = (0, import_react.useState)(
    controlledSearchValue || ""
  );
  const defferedSearchValue = (0, import_react.useDeferredValue)(uncontrolledSearchValue);
  const [uncontrolledValue, setUncontrolledValue] = (0, import_react.useState)(emptyState);
  const searchValue = isSearchControlled ? controlledSearchValue : uncontrolledSearchValue;
  const selectedValues = isValueControlled ? controlledValue : uncontrolledValue;
  const handleValueChange = (newValues) => {
    const exists = options.filter((o) => !o.disabled).find((o) => {
      if (isArrayValue) {
        return newValues == null ? void 0 : newValues.includes(o.value);
      }
      return o.value === newValues;
    });
    if (!exists && onCreateOption && newValues) {
      onCreateOption(newValues);
    }
    if (!isValueControlled) {
      setUncontrolledValue(newValues || emptyState);
    }
    if (onChange) {
      onChange(newValues);
    }
    setUncontrolledSearchValue("");
  };
  const handleSearchChange = (query2) => {
    setUncontrolledSearchValue(query2);
    if (onSearchValueChange) {
      onSearchValueChange(query2);
    }
  };
  const matches = (0, import_react.useMemo)(() => {
    if (isSearchControlled) {
      return [];
    }
    return matchSorter(options, defferedSearchValue, {
      keys: ["label"]
    });
  }, [options, defferedSearchValue, isSearchControlled]);
  const observer = (0, import_react.useRef)(
    new IntersectionObserver(
      (entries) => {
        const first = entries[0];
        if (first.isIntersecting) {
          fetchNextPage == null ? void 0 : fetchNextPage();
        }
      },
      { threshold: 1 }
    )
  );
  const lastOptionRef = (0, import_react.useCallback)(
    (node) => {
      if (isFetchingNextPage) {
        return;
      }
      if (observer.current) {
        observer.current.disconnect();
      }
      if (node) {
        observer.current.observe(node);
      }
    },
    [isFetchingNextPage]
  );
  const handleOpenChange = (open2) => {
    if (!open2) {
      setUncontrolledSearchValue("");
    }
    setOpen(open2);
  };
  const hasValue = (selectedValues == null ? void 0 : selectedValues.length) > 0;
  const showTag = hasValue && isArrayValue;
  const showSelected = showTag && !searchValue && !open;
  const hideInput = !isArrayValue && hasValue && !open;
  const selectedLabel = (_a = options.find((o) => o.value === selectedValues)) == null ? void 0 : _a.label;
  const hidePlaceholder = hasValue || showSelected || open;
  const tagWidth = (0, import_react.useMemo)(() => {
    if (!Array.isArray(selectedValues)) {
      return TAG_BASE_WIDTH + TABLUAR_NUM_WIDTH;
    }
    const count = selectedValues.length;
    const digits = count.toString().length;
    return TAG_BASE_WIDTH + digits * TABLUAR_NUM_WIDTH;
  }, [selectedValues]);
  const results = (0, import_react.useMemo)(() => {
    return isSearchControlled ? options : matches;
  }, [matches, options, isSearchControlled]);
  return (0, import_jsx_runtime.jsxs)(
    ComboboxProvider,
    {
      open,
      setOpen: handleOpenChange,
      selectedValue: selectedValues,
      setSelectedValue: (value) => handleValueChange(value),
      value: uncontrolledSearchValue,
      setValue: (query2) => {
        startTransition(() => handleSearchChange(query2));
      },
      children: [
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            className: clx(
              "relative flex cursor-pointer items-center gap-x-2 overflow-hidden",
              "h-8 w-full rounded-md",
              "bg-ui-bg-field transition-fg shadow-borders-base",
              "has-[input:focus]:shadow-borders-interactive-with-active",
              "has-[:invalid]:shadow-borders-error has-[[aria-invalid=true]]:shadow-borders-error",
              "has-[:disabled]:bg-ui-bg-disabled has-[:disabled]:text-ui-fg-disabled has-[:disabled]:cursor-not-allowed",
              className
            ),
            style: {
              "--tag-width": `${tagWidth}px`
            },
            children: [
              showTag && (0, import_jsx_runtime.jsxs)(
                "button",
                {
                  type: "button",
                  onClick: (e) => {
                    e.preventDefault();
                    handleValueChange(void 0);
                  },
                  className: "bg-ui-bg-base hover:bg-ui-bg-base-hover txt-compact-small-plus text-ui-fg-subtle focus-within:border-ui-fg-interactive transition-fg absolute left-0.5 top-0.5 z-[1] flex h-[28px] items-center rounded-[4px] border py-[3px] pl-1.5 pr-1 outline-none",
                  children: [
                    (0, import_jsx_runtime.jsx)("span", { className: "tabular-nums", children: selectedValues.length }),
                    (0, import_jsx_runtime.jsx)(XMarkMini, { className: "text-ui-fg-muted" })
                  ]
                }
              ),
              (0, import_jsx_runtime.jsxs)("div", { className: "relative flex size-full items-center", children: [
                showSelected && (0, import_jsx_runtime.jsx)(
                  "div",
                  {
                    className: clx(
                      "pointer-events-none absolute inset-y-0 flex size-full items-center",
                      {
                        "left-[calc(var(--tag-width)+8px)]": showTag,
                        "left-2": !showTag
                      }
                    ),
                    children: (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", children: "Selected" })
                  }
                ),
                hideInput && (0, import_jsx_runtime.jsx)(
                  "div",
                  {
                    className: clx(
                      "pointer-events-none absolute inset-y-0 flex size-full items-center overflow-hidden pr-10",
                      {
                        "left-[calc(var(--tag-width)+8px)]": showTag,
                        "left-2": !showTag
                      }
                    ),
                    children: (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", className: "truncate", children: selectedLabel })
                  }
                ),
                (0, import_jsx_runtime.jsx)(
                  Combobox,
                  {
                    autoSelect: true,
                    ref: comboboxRef,
                    onFocus: () => setOpen(true),
                    className: clx(
                      "txt-compact-small text-ui-fg-base !placeholder:text-ui-fg-muted transition-fg size-full cursor-pointer bg-transparent pl-2 pr-8 outline-none focus:cursor-text",
                      "hover:bg-ui-bg-field-hover",
                      {
                        "pl-2": !showTag,
                        "pl-[calc(var(--tag-width)+8px)]": showTag,
                        "opacity-0": hideInput
                      }
                    ),
                    placeholder: hidePlaceholder ? void 0 : placeholder,
                    ...inputProps
                  }
                )
              ] }),
              (0, import_jsx_runtime.jsx)(
                ComboboxDisclosure,
                {
                  render: (props) => {
                    return (0, import_jsx_runtime.jsx)(
                      "button",
                      {
                        ...props,
                        type: "button",
                        className: "text-ui-fg-muted transition-fg hover:bg-ui-bg-field-hover absolute right-0 flex size-8 items-center justify-center rounded-r outline-none",
                        children: (0, import_jsx_runtime.jsx)(TrianglesMini, {})
                      }
                    );
                  }
                }
              )
            ]
          }
        ),
        (0, import_jsx_runtime.jsxs)(
          ComboboxPopover,
          {
            gutter: 4,
            sameWidth: true,
            ref: listboxRef,
            role: "listbox",
            className: clx(
              "shadow-elevation-flyout bg-ui-bg-base z-50 rounded-[8px] p-1",
              "max-h-[200px] overflow-y-auto",
              "data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95",
              "data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95",
              "data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2"
            ),
            style: {
              pointerEvents: open ? "auto" : "none"
            },
            "aria-busy": isPending,
            children: [
              results.map(({ value, label, disabled }) => (0, import_jsx_runtime.jsxs)(
                ComboboxItem,
                {
                  value,
                  focusOnHover: true,
                  setValueOnClick: false,
                  disabled,
                  className: clx(
                    "transition-fg bg-ui-bg-base data-[active-item=true]:bg-ui-bg-base-hover group flex cursor-pointer items-center gap-x-2 rounded-[4px] px-2 py-1",
                    {
                      "text-ui-fg-disabled": disabled,
                      "bg-ui-bg-component": disabled
                    }
                  ),
                  children: [
                    (0, import_jsx_runtime.jsx)(ComboboxItemCheck, { className: "flex !size-5 items-center justify-center", children: isArrayValue ? (0, import_jsx_runtime.jsx)(CheckMini, {}) : (0, import_jsx_runtime.jsx)(EllipseMiniSolid, {}) }),
                    (0, import_jsx_runtime.jsx)(ComboboxItemValue, { className: "txt-compact-small", children: label })
                  ]
                },
                value
              )),
              !!fetchNextPage && (0, import_jsx_runtime.jsx)("div", { ref: lastOptionRef, className: "w-px" }),
              isFetchingNextPage && (0, import_jsx_runtime.jsx)("div", { className: "transition-fg bg-ui-bg-base flex items-center rounded-[4px] px-2 py-1.5", children: (0, import_jsx_runtime.jsx)("div", { className: "bg-ui-bg-component size-full h-5 w-full animate-pulse rounded-[4px]" }) }),
              !results.length && (noResultsPlaceholder && !(searchValue == null ? void 0 : searchValue.length) ? noResultsPlaceholder : (0, import_jsx_runtime.jsx)("div", { className: "flex items-center gap-x-2 rounded-[4px] px-2 py-1.5", children: (0, import_jsx_runtime.jsx)(
                Text,
                {
                  size: "small",
                  leading: "compact",
                  className: "text-ui-fg-subtle",
                  children: "No results found"
                }
              ) })),
              !results.length && onCreateOption && (0, import_jsx_runtime.jsxs)(import_react.Fragment, { children: [
                (0, import_jsx_runtime.jsx)(Separator, { className: "bg-ui-border-base -mx-1" }),
                (0, import_jsx_runtime.jsxs)(
                  ComboboxItem,
                  {
                    value: uncontrolledSearchValue,
                    focusOnHover: true,
                    setValueOnClick: false,
                    className: "transition-fg bg-ui-bg-base data-[active-item=true]:bg-ui-bg-base-hover group mt-1 flex cursor-pointer items-center gap-x-2 rounded-[4px] px-2 py-1.5",
                    children: [
                      (0, import_jsx_runtime.jsx)(PlusMini, { className: "text-ui-fg-subtle" }),
                      (0, import_jsx_runtime.jsxs)(Text, { size: "small", leading: "compact", children: [
                        'Create "',
                        searchValue,
                        '"'
                      ] })
                    ]
                  }
                )
              ] })
            ]
          }
        )
      ]
    }
  );
};
var Combobox2 = genericForwardRef(ComboboxImpl);
var CountrySelect = (0, import_react.forwardRef)(
  ({ className, disabled, placeholder, value, defaultValue, ...props }, ref) => {
    var _a;
    const innerRef = (0, import_react.useRef)(null);
    (0, import_react.useImperativeHandle)(ref, () => innerRef.current);
    const isPlaceholder = ((_a = innerRef.current) == null ? void 0 : _a.value) === "";
    return (0, import_jsx_runtime.jsxs)("div", { className: "relative", children: [
      (0, import_jsx_runtime.jsx)(
        TrianglesMini,
        {
          className: clx(
            "text-ui-fg-muted transition-fg pointer-events-none absolute right-2 top-1/2 -translate-y-1/2",
            {
              "text-ui-fg-disabled": disabled
            }
          )
        }
      ),
      (0, import_jsx_runtime.jsxs)(
        "select",
        {
          value: value !== void 0 ? value.toLowerCase() : void 0,
          defaultValue: defaultValue ? defaultValue.toLowerCase() : void 0,
          disabled,
          className: clx(
            "bg-ui-bg-field shadow-buttons-neutral transition-fg txt-compact-small flex w-full select-none appearance-none items-center justify-between rounded-md px-2 py-1.5 outline-none",
            "placeholder:text-ui-fg-muted text-ui-fg-base",
            "hover:bg-ui-bg-field-hover",
            "focus-visible:shadow-borders-interactive-with-active data-[state=open]:!shadow-borders-interactive-with-active",
            "aria-[invalid=true]:border-ui-border-error aria-[invalid=true]:shadow-borders-error",
            "invalid::border-ui-border-error invalid:shadow-borders-error",
            "disabled:!bg-ui-bg-disabled disabled:!text-ui-fg-disabled",
            {
              "text-ui-fg-muted": isPlaceholder
            },
            className
          ),
          ...props,
          ref: innerRef,
          children: [
            (0, import_jsx_runtime.jsx)("option", { value: "", disabled: true, className: "text-ui-fg-muted", children: placeholder || "Select country" }),
            countries.map((country) => {
              return (0, import_jsx_runtime.jsx)("option", { value: country.iso_2.toLowerCase(), children: country.display_name }, country.iso_2);
            })
          ]
        }
      )
    ] });
  }
);
CountrySelect.displayName = "CountrySelect";
var RouteModalForm = ({
  form,
  blockSearchParams: blockSearch = false,
  children,
  onClose
}) => {
  const {
    formState: { isDirty: isDirty2 }
  } = form;
  const blocker = useBlocker(({ currentLocation, nextLocation }) => {
    const { isSubmitSuccessful } = nextLocation.state || {};
    if (isSubmitSuccessful) {
      onClose == null ? void 0 : onClose(true);
      return false;
    }
    const isPathChanged = currentLocation.pathname !== nextLocation.pathname;
    const isSearchChanged = currentLocation.search !== nextLocation.search;
    if (blockSearch) {
      const ret2 = isDirty2 && (isPathChanged || isSearchChanged);
      if (!ret2) {
        onClose == null ? void 0 : onClose(isSubmitSuccessful);
      }
      return ret2;
    }
    const ret = isDirty2 && isPathChanged;
    if (!ret) {
      onClose == null ? void 0 : onClose(isSubmitSuccessful);
    }
    return ret;
  });
  const handleCancel = () => {
    var _a;
    (_a = blocker == null ? void 0 : blocker.reset) == null ? void 0 : _a.call(blocker);
  };
  const handleContinue = () => {
    var _a;
    (_a = blocker == null ? void 0 : blocker.proceed) == null ? void 0 : _a.call(blocker);
    onClose == null ? void 0 : onClose(false);
  };
  return (0, import_jsx_runtime.jsxs)(Form$2, { ...form, children: [
    children,
    (0, import_jsx_runtime.jsx)(Prompt, { open: blocker.state === "blocked", variant: "confirmation", children: (0, import_jsx_runtime.jsxs)(Prompt.Content, { children: [
      (0, import_jsx_runtime.jsxs)(Prompt.Header, { children: [
        (0, import_jsx_runtime.jsx)(Prompt.Title, { children: "Unsaved Changes" }),
        (0, import_jsx_runtime.jsx)(Prompt.Description, { children: "You have unsaved changes. Are you sure you want to leave?" })
      ] }),
      (0, import_jsx_runtime.jsxs)(Prompt.Footer, { children: [
        (0, import_jsx_runtime.jsx)(Prompt.Cancel, { onClick: handleCancel, type: "button", children: "Cancel" }),
        (0, import_jsx_runtime.jsx)(Prompt.Action, { onClick: handleContinue, type: "button", children: "Continue" })
      ] })
    ] }) })
  ] });
};
var RouteModalProviderContext = (0, import_react.createContext)(null);
var RouteModalProvider = ({
  prev,
  children
}) => {
  const navigate = useNavigate();
  const [closeOnEscape, setCloseOnEscape] = (0, import_react.useState)(true);
  const handleSuccess = (0, import_react.useCallback)(
    (path) => {
      const to = path || prev;
      navigate(to, { replace: true, state: { isSubmitSuccessful: true } });
    },
    [navigate, prev]
  );
  const value = (0, import_react.useMemo)(
    () => ({
      handleSuccess,
      setCloseOnEscape,
      __internal: { closeOnEscape }
    }),
    [handleSuccess, setCloseOnEscape, closeOnEscape]
  );
  return (0, import_jsx_runtime.jsx)(RouteModalProviderContext.Provider, { value, children });
};
var StackedModalContext = (0, import_react.createContext)(null);
var StackedModalProvider = ({
  children,
  onOpenChange
}) => {
  const [state, setState] = (0, import_react.useState)({});
  const getIsOpen = (id) => {
    return state[id] || false;
  };
  const setIsOpen = (id, open) => {
    setState((prevState) => ({
      ...prevState,
      [id]: open
    }));
    onOpenChange(open);
  };
  const register = (id) => {
    setState((prevState) => ({
      ...prevState,
      [id]: false
    }));
  };
  const unregister = (id) => {
    setState((prevState) => {
      const newState = { ...prevState };
      delete newState[id];
      return newState;
    });
  };
  return (0, import_jsx_runtime.jsx)(
    StackedModalContext.Provider,
    {
      value: {
        getIsOpen,
        setIsOpen,
        register,
        unregister
      },
      children
    }
  );
};
var useStackedModal = () => {
  const context = (0, import_react.useContext)(StackedModalContext);
  if (!context) {
    throw new Error(
      "useStackedModal must be used within a StackedModalProvider"
    );
  }
  return context;
};
var Root$3 = ({ prev = "..", onClose, children }) => {
  const navigate = useNavigate();
  const [open, setOpen] = (0, import_react.useState)(false);
  const [stackedModalOpen, onStackedModalOpen] = (0, import_react.useState)(false);
  (0, import_react.useEffect)(() => {
    setOpen(true);
    return () => {
      setOpen(false);
      onStackedModalOpen(false);
    };
  }, []);
  const handleOpenChange = async (open2) => {
    if (!open2) {
      if (onClose) {
        const ret = await onClose();
        if (!ret) {
          return;
        }
      }
      document.body.style.pointerEvents = "auto";
      navigate(prev, { replace: true });
      return;
    }
    setOpen(open2);
  };
  return (0, import_jsx_runtime.jsx)(Drawer, { open, onOpenChange: handleOpenChange, children: (0, import_jsx_runtime.jsx)(RouteModalProvider, { prev, children: (0, import_jsx_runtime.jsx)(StackedModalProvider, { onOpenChange: onStackedModalOpen, children: (0, import_jsx_runtime.jsx)(
    Drawer.Content,
    {
      "aria-describedby": void 0,
      className: clx({
        "!bg-ui-bg-disabled !inset-y-5 !right-5": stackedModalOpen
      }),
      children
    }
  ) }) }) });
};
var Header$4 = Drawer.Header;
var Title$3 = Drawer.Title;
var Description$3 = Drawer.Description;
var Body$3 = Drawer.Body;
var Footer$5 = Drawer.Footer;
var Close$3 = Drawer.Close;
var Form$1 = RouteModalForm;
var RouteDrawer = Object.assign(Root$3, {
  Header: Header$4,
  Title: Title$3,
  Body: Body$3,
  Description: Description$3,
  Footer: Footer$5,
  Close: Close$3,
  Form: Form$1
});
var useRouteModal = () => {
  const context = (0, import_react.useContext)(RouteModalProviderContext);
  if (!context) {
    throw new Error("useRouteModal must be used within a RouteModalProvider");
  }
  return context;
};
var Root$2 = ({ prev = "..", onClose, children }) => {
  const navigate = useNavigate();
  const [open, setOpen] = (0, import_react.useState)(false);
  const [stackedModalOpen, onStackedModalOpen] = (0, import_react.useState)(false);
  (0, import_react.useEffect)(() => {
    setOpen(true);
    return () => {
      setOpen(false);
      onStackedModalOpen(false);
    };
  }, []);
  const handleOpenChange = async (open2) => {
    if (!open2) {
      if (onClose) {
        const ret = await onClose();
        if (!ret) {
          return;
        }
      }
      document.body.style.pointerEvents = "auto";
      navigate(prev, { replace: true });
      return;
    }
    setOpen(open2);
  };
  return (0, import_jsx_runtime.jsx)(FocusModal, { open, onOpenChange: handleOpenChange, children: (0, import_jsx_runtime.jsx)(RouteModalProvider, { prev, children: (0, import_jsx_runtime.jsx)(StackedModalProvider, { onOpenChange: onStackedModalOpen, children: (0, import_jsx_runtime.jsx)(Content$2, { stackedModalOpen, children }) }) }) });
};
var Content$2 = ({ stackedModalOpen, children }) => {
  const { __internal } = useRouteModal();
  const shouldPreventClose = !__internal.closeOnEscape;
  return (0, import_jsx_runtime.jsx)(
    FocusModal.Content,
    {
      onEscapeKeyDown: shouldPreventClose ? (e) => {
        e.preventDefault();
      } : void 0,
      className: clx({
        "!bg-ui-bg-disabled !inset-x-5 !inset-y-3": stackedModalOpen
      }),
      children
    }
  );
};
var Header$3 = FocusModal.Header;
var Title$2 = FocusModal.Title;
var Description$2 = FocusModal.Description;
var Footer$4 = FocusModal.Footer;
var Body$2 = FocusModal.Body;
var Close$2 = FocusModal.Close;
var Form = RouteModalForm;
var RouteFocusModal = Object.assign(Root$2, {
  Header: Header$3,
  Title: Title$2,
  Body: Body$2,
  Description: Description$2,
  Footer: Footer$4,
  Close: Close$2,
  Form
});
var Root$1 = ({ id, children }) => {
  const { register, unregister, getIsOpen, setIsOpen } = useStackedModal();
  (0, import_react.useEffect)(() => {
    register(id);
    return () => unregister(id);
  }, []);
  return (0, import_jsx_runtime.jsx)(Drawer, { open: getIsOpen(id), onOpenChange: (open) => setIsOpen(id, open), children });
};
var Close$1 = Drawer.Close;
Close$1.displayName = "StackedDrawer.Close";
var Header$2 = Drawer.Header;
Header$2.displayName = "StackedDrawer.Header";
var Body$1 = Drawer.Body;
Body$1.displayName = "StackedDrawer.Body";
var Trigger$1 = Drawer.Trigger;
Trigger$1.displayName = "StackedDrawer.Trigger";
var Footer$3 = Drawer.Footer;
Footer$3.displayName = "StackedDrawer.Footer";
var Title$1 = Drawer.Title;
Title$1.displayName = "StackedDrawer.Title";
var Description$1 = Drawer.Description;
Description$1.displayName = "StackedDrawer.Description";
var Content$1 = (0, import_react.forwardRef)(({ className, ...props }, ref) => {
  return (0, import_jsx_runtime.jsx)(
    Drawer.Content,
    {
      ref,
      className: clx(className),
      overlayProps: {
        className: "bg-transparent"
      },
      ...props
    }
  );
});
Content$1.displayName = "StackedDrawer.Content";
Object.assign(Root$1, {
  Close: Close$1,
  Header: Header$2,
  Body: Body$1,
  Content: Content$1,
  Trigger: Trigger$1,
  Footer: Footer$3,
  Description: Description$1,
  Title: Title$1
});
var Root = ({
  id,
  onOpenChangeCallback,
  children
}) => {
  const { register, unregister, getIsOpen, setIsOpen } = useStackedModal();
  (0, import_react.useEffect)(() => {
    register(id);
    return () => unregister(id);
  }, []);
  const handleOpenChange = (open) => {
    setIsOpen(id, open);
    onOpenChangeCallback == null ? void 0 : onOpenChangeCallback(open);
  };
  return (0, import_jsx_runtime.jsx)(FocusModal, { open: getIsOpen(id), onOpenChange: handleOpenChange, children });
};
var Close = FocusModal.Close;
Close.displayName = "StackedFocusModal.Close";
var Header$1 = FocusModal.Header;
Header$1.displayName = "StackedFocusModal.Header";
var Body = FocusModal.Body;
Body.displayName = "StackedFocusModal.Body";
var Trigger = FocusModal.Trigger;
Trigger.displayName = "StackedFocusModal.Trigger";
var Footer$2 = FocusModal.Footer;
Footer$2.displayName = "StackedFocusModal.Footer";
var Title = FocusModal.Title;
Title.displayName = "StackedFocusModal.Title";
var Description = FocusModal.Description;
Description.displayName = "StackedFocusModal.Description";
var Content = (0, import_react.forwardRef)(({ className, ...props }, ref) => {
  return (0, import_jsx_runtime.jsx)(
    FocusModal.Content,
    {
      ref,
      className: clx("!top-6", className),
      overlayProps: {
        className: "bg-transparent"
      },
      ...props
    }
  );
});
Content.displayName = "StackedFocusModal.Content";
var StackedFocusModal = Object.assign(Root, {
  Close,
  Header: Header$1,
  Body,
  Content,
  Trigger,
  Footer: Footer$2,
  Description,
  Title
});
var useDebouncedSearch = () => {
  const [searchValue, onSearchValueChange] = (0, import_react.useState)("");
  const [debouncedQuery, setDebouncedQuery] = (0, import_react.useState)("");
  const debouncedUpdate = (0, import_react.useCallback)(
    (0, import_debounce.default)((query2) => setDebouncedQuery(query2), 300),
    []
  );
  (0, import_react.useEffect)(() => {
    debouncedUpdate(searchValue);
    return () => debouncedUpdate.cancel();
  }, [searchValue, debouncedUpdate]);
  return {
    searchValue,
    onSearchValueChange,
    query: debouncedQuery
  };
};
var useComboboxData = ({
  queryKey,
  queryFn,
  getOptions,
  defaultValue,
  defaultValueKey,
  pageSize = 10,
  enabled = true
}) => {
  const { searchValue, onSearchValueChange, query: query2 } = useDebouncedSearch();
  const queryInitialDataBy = defaultValueKey || "id";
  const { data: initialData } = useQuery({
    queryKey,
    queryFn: async () => {
      return queryFn({
        [queryInitialDataBy]: defaultValue,
        limit: Array.isArray(defaultValue) ? defaultValue.length : 1
      });
    },
    enabled: !!defaultValue
  });
  const { data, ...rest } = useInfiniteQuery({
    queryKey: [...queryKey, query2],
    queryFn: async ({ pageParam = 0 }) => {
      return await queryFn({
        q: query2,
        limit: pageSize,
        offset: pageParam
      });
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => {
      const moreItemsExist = lastPage.count > lastPage.offset + lastPage.limit;
      return moreItemsExist ? lastPage.offset + lastPage.limit : void 0;
    },
    placeholderData: keepPreviousData,
    enabled
  });
  const options = (data == null ? void 0 : data.pages.flatMap((page) => getOptions(page))) ?? [];
  const defaultOptions = initialData ? getOptions(initialData) : [];
  const disabled = !rest.isPending && !options.length && !searchValue;
  if (defaultValue && defaultOptions.length && !searchValue) {
    defaultOptions.forEach((option) => {
      if (!options.find((o) => o.value === option.value)) {
        options.unshift(option);
      }
    });
  }
  return {
    options,
    searchValue,
    onSearchValueChange,
    disabled,
    ...rest
  };
};
var addressSchema = objectType({
  country_code: stringType().min(1),
  first_name: stringType().min(1),
  last_name: stringType().min(1),
  address_1: stringType().min(1),
  address_2: stringType().optional(),
  company: stringType().optional(),
  city: stringType().min(1),
  province: stringType().optional(),
  postal_code: stringType().min(1),
  phone: stringType().optional()
});
var Create = () => {
  return (0, import_jsx_runtime.jsx)(RouteFocusModal, { children: (0, import_jsx_runtime.jsx)(CreateForm, {}) });
};
var CreateForm = () => {
  const { handleSuccess } = useRouteModal();
  const form = useForm({
    defaultValues: {
      region_id: "",
      sales_channel_id: "",
      customer_id: "",
      email: "",
      shipping_address_id: "",
      shipping_address: initialAddress,
      billing_address_id: "",
      billing_address: null,
      same_as_shipping: true
    },
    resolver: t(schema$6)
  });
  const regions = useComboboxData({
    queryFn: async (params) => {
      return await sdk.admin.region.list(params);
    },
    queryKey: ["regions"],
    getOptions: (data) => {
      return data.regions.map((region) => ({
        label: region.name,
        value: region.id
      }));
    }
  });
  const salesChannels = useComboboxData({
    queryFn: async (params) => {
      return await sdk.admin.salesChannel.list(params);
    },
    queryKey: ["sales-channels"],
    getOptions: (data) => {
      return data.sales_channels.map((salesChannel) => ({
        label: salesChannel.name,
        value: salesChannel.id
      }));
    }
  });
  const { mutateAsync } = useCreateDraftOrder();
  const onSubmit = form.handleSubmit(
    async (data) => {
      const billingAddress = data.same_as_shipping ? data.shipping_address : data.billing_address;
      await mutateAsync(
        {
          region_id: data.region_id,
          sales_channel_id: data.sales_channel_id,
          customer_id: data.customer_id || void 0,
          email: !data.customer_id ? data.email : void 0,
          shipping_address: data.shipping_address,
          billing_address: billingAddress
        },
        {
          onSuccess: (response) => {
            handleSuccess(`/draft-orders/${response.draft_order.id}`);
          },
          onError: (error) => {
            toast.error(error.message);
          }
        }
      );
    },
    (error) => {
      toast.error(JSON.stringify(error, null, 2));
    }
  );
  if (regions.isError) {
    throw regions.error;
  }
  if (salesChannels.isError) {
    throw salesChannels.error;
  }
  return (0, import_jsx_runtime.jsx)(RouteFocusModal.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      className: "flex h-full flex-col overflow-hidden",
      onSubmit,
      children: [
        (0, import_jsx_runtime.jsx)(RouteFocusModal.Header, {}),
        (0, import_jsx_runtime.jsx)(RouteFocusModal.Body, { className: "flex flex-1 flex-col overflow-hidden", children: (0, import_jsx_runtime.jsx)("div", { className: "flex flex-1 flex-col items-center overflow-y-auto", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex w-full max-w-[720px] flex-col gap-y-6 px-2 py-16", children: [
          (0, import_jsx_runtime.jsxs)("div", { children: [
            (0, import_jsx_runtime.jsx)(RouteFocusModal.Title, { asChild: true, children: (0, import_jsx_runtime.jsx)(Heading, { children: "Create Draft Order" }) }),
            (0, import_jsx_runtime.jsx)(RouteFocusModal.Description, { asChild: true, children: (0, import_jsx_runtime.jsx)("span", { className: "sr-only", children: "Create a new draft order" }) })
          ] }),
          (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
          (0, import_jsx_runtime.jsx)("div", { children: (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control: form.control,
              name: "region_id",
              render: ({ field }) => {
                return (0, import_jsx_runtime.jsx)(Form$2.Item, { children: (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-x-3", children: [
                  (0, import_jsx_runtime.jsxs)("div", { children: [
                    (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Region" }),
                    (0, import_jsx_runtime.jsx)(Form$2.Hint, { children: "Choose region" })
                  ] }),
                  (0, import_jsx_runtime.jsxs)("div", { children: [
                    (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(
                      Combobox2,
                      {
                        options: regions.options,
                        fetchNextPage: regions.fetchNextPage,
                        isFetchingNextPage: regions.isFetchingNextPage,
                        searchValue: regions.searchValue,
                        onSearchValueChange: regions.onSearchValueChange,
                        placeholder: "Select region",
                        ...field,
                        autoComplete: "off"
                      }
                    ) }),
                    (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
                  ] })
                ] }) });
              }
            }
          ) }),
          (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
          (0, import_jsx_runtime.jsx)("div", { children: (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control: form.control,
              name: "sales_channel_id",
              render: ({ field }) => {
                return (0, import_jsx_runtime.jsx)(Form$2.Item, { children: (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-x-3", children: [
                  (0, import_jsx_runtime.jsxs)("div", { children: [
                    (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Sales Channel" }),
                    (0, import_jsx_runtime.jsx)(Form$2.Hint, { children: "Choose sales channel" })
                  ] }),
                  (0, import_jsx_runtime.jsxs)("div", { children: [
                    (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(
                      Combobox2,
                      {
                        options: salesChannels.options,
                        fetchNextPage: salesChannels.fetchNextPage,
                        isFetchingNextPage: salesChannels.isFetchingNextPage,
                        searchValue: salesChannels.searchValue,
                        onSearchValueChange: salesChannels.onSearchValueChange,
                        placeholder: "Select sales channel",
                        ...field
                      }
                    ) }),
                    (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
                  ] })
                ] }) });
              }
            }
          ) }),
          (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
          (0, import_jsx_runtime.jsx)(CustomerField$1, { control: form.control, setValue: form.setValue }),
          (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
          (0, import_jsx_runtime.jsx)(EmailField, { control: form.control }),
          (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
          (0, import_jsx_runtime.jsx)(
            AddressField,
            {
              type: "shipping_address",
              control: form.control,
              setValue: form.setValue
            }
          ),
          (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
          (0, import_jsx_runtime.jsx)(
            AddressField,
            {
              type: "billing_address",
              control: form.control,
              setValue: form.setValue
            }
          )
        ] }) }) }),
        (0, import_jsx_runtime.jsx)(RouteFocusModal.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex justify-end gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(RouteFocusModal.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { variant: "secondary", size: "small", children: "Cancel" }) }),
          (0, import_jsx_runtime.jsx)(Button, { size: "small", children: "Save" })
        ] }) })
      ]
    }
  ) });
};
var EmailField = ({ control }) => {
  const customerId = useWatch({ control, name: "customer_id" });
  return (0, import_jsx_runtime.jsx)(
    Form$2.Field,
    {
      control,
      name: "email",
      render: ({ field }) => {
        return (0, import_jsx_runtime.jsx)(Form$2.Item, { children: (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-x-3", children: [
          (0, import_jsx_runtime.jsxs)("div", { children: [
            (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Email" }),
            (0, import_jsx_runtime.jsx)(Form$2.Hint, { children: "Input a email to associate with the order" })
          ] }),
          (0, import_jsx_runtime.jsx)(
            ConditionalTooltip,
            {
              content: "You cannot change the email when a customer is selected",
              showTooltip: !!customerId,
              children: (0, import_jsx_runtime.jsxs)("div", { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(
                  Input,
                  {
                    ...field,
                    placeholder: "john@doe.com",
                    disabled: field.disabled || !!customerId
                  }
                ) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          )
        ] }) });
      }
    }
  );
};
var CustomerField$1 = ({ control, setValue }) => {
  const email = useWatch({ control, name: "email" });
  const customerId = useWatch({ control, name: "customer_id" });
  const customers = useComboboxData({
    queryFn: async (params) => {
      return await sdk.admin.customer.list(params);
    },
    queryKey: ["customers"],
    getOptions: (data) => {
      return data.customers.map((customer) => {
        const name = [customer.first_name, customer.last_name].filter(Boolean).join(" ");
        return {
          label: name ? `${name} (${customer.email})` : customer.email,
          value: customer.id
        };
      });
    }
  });
  const onPropagateEmail = (0, import_react.useCallback)(
    (value) => {
      var _a, _b;
      const label = (_a = customers.options.find(
        (option) => option.value === value
      )) == null ? void 0 : _a.label;
      const customerEmail = ((_b = label == null ? void 0 : label.match(/\((.*@.*)\)$/)) == null ? void 0 : _b[1]) || label;
      if (!email && customerEmail) {
        setValue("email", customerEmail, {
          shouldDirty: true,
          shouldTouch: true
        });
      }
    },
    [email, setValue, customers.options]
  );
  if (customers.isError) {
    throw customers.error;
  }
  return (0, import_jsx_runtime.jsx)(
    Form$2.Field,
    {
      control,
      name: "customer_id",
      render: ({ field: { onChange, ...field } }) => {
        const onRemove = () => {
          onChange("");
          setValue("shipping_address_id", "");
        };
        return (0, import_jsx_runtime.jsx)(Form$2.Item, { children: (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-x-3", children: [
          (0, import_jsx_runtime.jsxs)("div", { children: [
            (0, import_jsx_runtime.jsx)(Form$2.Label, { optional: true, children: "Customer" }),
            (0, import_jsx_runtime.jsx)(Form$2.Hint, { children: "Choose an existing customer" })
          ] }),
          (0, import_jsx_runtime.jsx)(Form$2.Control, { children: customerId ? (0, import_jsx_runtime.jsx)(CustomerCard, { customerId, onRemove }) : (0, import_jsx_runtime.jsx)(
            Combobox2,
            {
              options: customers.options,
              fetchNextPage: customers.fetchNextPage,
              isFetchingNextPage: customers.isFetchingNextPage,
              searchValue: customers.searchValue,
              onSearchValueChange: customers.onSearchValueChange,
              placeholder: "Select customer",
              onChange: (value) => {
                onPropagateEmail(value);
                onChange(value);
              },
              ...field
            }
          ) })
        ] }) });
      }
    }
  );
};
var AddressField = ({ type, control, setValue }) => {
  const customerId = useWatch({ control, name: "customer_id" });
  const addressId = useWatch({ control, name: `${type}_id` });
  const sameAsShipping = useWatch({ control, name: "same_as_shipping" });
  const { customer } = useCustomer(
    customerId,
    {},
    {
      enabled: !!customerId
    }
  );
  const addresses = useComboboxData({
    queryFn: async (params) => {
      const response = await sdk.client.fetch(
        "/admin/customers/" + customerId + "/addresses",
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json"
          },
          query: params,
          credentials: "include"
        }
      );
      return response;
    },
    queryKey: [type, customerId],
    getOptions: (data) => {
      return data.addresses.map((address) => {
        const formattedAddress = getFormattedAddress(address).join(",\n");
        return {
          label: formattedAddress,
          value: address.id
        };
      });
    },
    enabled: !!customerId
  });
  const onSelectAddress = async (addressId2) => {
    if (!addressId2 || !customerId) {
      return;
    }
    const response = await sdk.client.fetch(
      "/admin/customers/" + customerId + "/addresses/" + addressId2,
      {
        method: "GET",
        credentials: "include"
      }
    );
    const address = response.address;
    setValue(type, {
      ...address,
      first_name: address.first_name || (customer == null ? void 0 : customer.first_name),
      last_name: address.last_name || (customer == null ? void 0 : customer.last_name)
    });
  };
  const showFields = type === "billing_address" ? !sameAsShipping : true;
  return (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-x-3", children: [
    (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-1", children: [
      (0, import_jsx_runtime.jsx)(Label, { size: "small", weight: "plus", children: type === "shipping_address" ? "Shipping address" : "Billing address" }),
      (0, import_jsx_runtime.jsxs)(Hint, { children: [
        "Address used for",
        " ",
        type === "shipping_address" ? "shipping" : "billing"
      ] })
    ] }),
    (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-3", children: [
      type === "billing_address" && (0, import_jsx_runtime.jsx)(
        Form$2.Field,
        {
          control,
          name: "same_as_shipping",
          render: ({ field: { value, onChange, ...field } }) => {
            const onCheckedChange = (checked) => {
              if (!checked) {
                setValue("billing_address", initialAddress);
              } else {
                setValue("billing_address_id", "");
                setValue("billing_address", null);
              }
              onChange(checked);
            };
            return (0, import_jsx_runtime.jsx)(Form$2.Item, { children: (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-[28px_1fr] items-start gap-3", children: [
              (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(
                Switch,
                {
                  size: "small",
                  ...field,
                  checked: value,
                  onCheckedChange
                }
              ) }),
              (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col", children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Same as shipping address" }),
                (0, import_jsx_runtime.jsx)(Form$2.Hint, { children: "Use the same address for billing and shipping" })
              ] })
            ] }) });
          }
        }
      ),
      showFields && (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-3", children: [
        customerId && (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-3", children: [
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control,
              name: `${type}_id`,
              render: ({ field: { onChange, ...field } }) => {
                const onRemove = () => {
                  onChange("");
                };
                return (0, import_jsx_runtime.jsx)(Form$2.Item, { children: addressId ? (0, import_jsx_runtime.jsx)(
                  AddressCard,
                  {
                    customerId,
                    addressId,
                    tag: type === "shipping_address" ? "shipping" : "billing",
                    onRemove
                  }
                ) : (0, import_jsx_runtime.jsxs)(import_react.Fragment, { children: [
                  (0, import_jsx_runtime.jsx)(Form$2.Label, { optional: true, variant: "subtle", children: "Saved addresses" }),
                  (0, import_jsx_runtime.jsx)(Form$2.Hint, { children: "Choose one of the customers saved addresses." }),
                  (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(
                    Combobox2,
                    {
                      options: addresses.options,
                      fetchNextPage: addresses.fetchNextPage,
                      isFetchingNextPage: addresses.isFetchingNextPage,
                      searchValue: addresses.searchValue,
                      onSearchValueChange: addresses.onSearchValueChange,
                      placeholder: type === "shipping_address" ? "Select shipping address" : "Select billing address",
                      onChange: (value) => {
                        onSelectAddress(value);
                        onChange(value);
                      },
                      ...field
                    }
                  ) }),
                  (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
                ] }) });
              }
            }
          ),
          (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" })
        ] }),
        !addressId && (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-3", children: [
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control,
              name: `${type}.country_code`,
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { variant: "subtle", children: "Country" }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(CountrySelect, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          ),
          (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
            (0, import_jsx_runtime.jsx)(
              Form$2.Field,
              {
                control,
                name: `${type}.first_name`,
                render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form$2.Label, { variant: "subtle", children: "First name" }),
                  (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                  (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
                ] })
              }
            ),
            (0, import_jsx_runtime.jsx)(
              Form$2.Field,
              {
                control,
                name: `${type}.last_name`,
                render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form$2.Label, { variant: "subtle", children: "Last name" }),
                  (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                  (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
                ] })
              }
            )
          ] }),
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control,
              name: `${type}.company`,
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { optional: true, variant: "subtle", children: "Company" }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          ),
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control,
              name: `${type}.address_1`,
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { variant: "subtle", children: "Address" }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          ),
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control,
              name: `${type}.address_2`,
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { optional: true, variant: "subtle", children: "Apartment, suite, etc." }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          ),
          (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
            (0, import_jsx_runtime.jsx)(
              Form$2.Field,
              {
                control,
                name: `${type}.postal_code`,
                render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form$2.Label, { variant: "subtle", children: "Postal code" }),
                  (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                  (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
                ] })
              }
            ),
            (0, import_jsx_runtime.jsx)(
              Form$2.Field,
              {
                control,
                name: `${type}.city`,
                render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form$2.Label, { variant: "subtle", children: "City" }),
                  (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                  (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
                ] })
              }
            )
          ] }),
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control,
              name: `${type}.province`,
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { optional: true, variant: "subtle", children: "Province / State" }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          ),
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control,
              name: `${type}.phone`,
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { optional: true, variant: "subtle", children: "Phone" }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          )
        ] })
      ] })
    ] })
  ] });
};
var initialAddress = {
  country_code: "",
  first_name: "",
  last_name: "",
  address_1: "",
  address_2: "",
  city: "",
  province: "",
  postal_code: "",
  phone: "",
  company: ""
};
var schema$6 = objectType({
  region_id: stringType().min(1),
  sales_channel_id: stringType().min(1),
  customer_id: stringType().optional(),
  email: stringType().email().optional(),
  shipping_address_id: stringType().optional(),
  shipping_address: addressSchema,
  billing_address_id: stringType().optional(),
  billing_address: addressSchema.nullable(),
  same_as_shipping: booleanType().default(true)
}).superRefine((data, ctx) => {
  if (!data.customer_id && !data.email) {
    ctx.addIssue({
      code: ZodIssueCode.custom,
      message: "Either a customer or email must be provided",
      path: ["customer_id", "email"]
    });
  }
  if (!data.shipping_address && !data.shipping_address_id) {
    ctx.addIssue({
      code: ZodIssueCode.custom,
      message: "Shipping address is required",
      path: ["shipping_address"]
    });
  }
  if (data.same_as_shipping === false) {
    if (!data.billing_address && !data.billing_address_id) {
      ctx.addIssue({
        code: ZodIssueCode.custom,
        message: "Billing address is required",
        path: ["billing_address"]
      });
    }
  }
});
var PageSkeleton = ({
  mainSections = 2,
  sidebarSections = 1,
  showJSON = false,
  showMetadata = true
}) => {
  const showExtraData = showJSON || showMetadata;
  return (0, import_jsx_runtime.jsx)("div", { className: "flex flex-col gap-y-3", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-x-4 gap-y-3 xl:flex-row xl:items-start", children: [
    (0, import_jsx_runtime.jsxs)("div", { className: "flex w-full flex-col gap-y-3", children: [
      Array.from({ length: mainSections }, (_, i) => i).map((section) => {
        return (0, import_jsx_runtime.jsx)(
          Skeleton,
          {
            className: clx("h-full max-h-[460px] w-full rounded-lg", {
              "max-h-[219px]": section === 0
            })
          },
          section
        );
      }),
      showExtraData && (0, import_jsx_runtime.jsxs)("div", { className: "hidden flex-col gap-y-3 xl:flex", children: [
        showMetadata && (0, import_jsx_runtime.jsx)(Skeleton, { className: "h-[60px] w-full rounded-lg" }),
        showJSON && (0, import_jsx_runtime.jsx)(Skeleton, { className: "h-[60px] w-full rounded-lg" })
      ] })
    ] }),
    (0, import_jsx_runtime.jsxs)("div", { className: "flex w-full max-w-[100%] flex-col gap-y-3 xl:mt-0 xl:max-w-[440px]", children: [
      Array.from({ length: sidebarSections }, (_, i) => i).map(
        (section) => {
          return (0, import_jsx_runtime.jsx)(
            Skeleton,
            {
              className: clx("h-full max-h-[320px] w-full rounded-lg", {
                "max-h-[140px]": section === 0
              })
            },
            section
          );
        }
      ),
      showExtraData && (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-3 xl:hidden", children: [
        showMetadata && (0, import_jsx_runtime.jsx)(Skeleton, { className: "h-[60px] w-full rounded-lg" }),
        showJSON && (0, import_jsx_runtime.jsx)(Skeleton, { className: "h-[60px] w-full rounded-lg" })
      ] })
    ] })
  ] }) });
};
var DETAILS_PAGE_REGEX = /\/draft-orders\/[a-zA-Z0-9_-]+\/?$/;
var ActiveOrderChange = ({ orderId }) => {
  var _a;
  const { order: preview } = useOrderPreview(orderId);
  const location = useLocation();
  const isPending = ((_a = preview == null ? void 0 : preview.order_change) == null ? void 0 : _a.status) === "pending";
  const isDetailsPage = DETAILS_PAGE_REGEX.test(location.pathname);
  const { mutateAsync, isPending: isMutating } = useDraftOrderCancelEdit(orderId);
  if (!isPending || !isDetailsPage) {
    return null;
  }
  const onCancel = async () => {
    await mutateAsync(void 0, {
      onError: (e) => {
        toast.error(e.message);
      },
      onSuccess: () => {
        toast.success("Edit cancelled");
      }
    });
  };
  const actions = preview.order_change.actions;
  const noActions = !actions || actions.length === 0;
  return (0, import_jsx_runtime.jsx)(
    "div",
    {
      className: "border-b border-x px-3 py-3 -mx-4 -mt-3",
      style: {
        background: "repeating-linear-gradient(-45deg, rgb(212, 212, 216, 0.15), rgb(212, 212, 216,.15) 10px, transparent 10px, transparent 20px)"
      },
      children: (0, import_jsx_runtime.jsxs)(Container, { className: "p-0 overflow-hidden", children: [
        (0, import_jsx_runtime.jsxs)("div", { className: "px-6 py-4 flex items-center gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(ExclamationCircleSolid, { className: "text-ui-fg-interactive" }),
          (0, import_jsx_runtime.jsx)(Heading, { children: "Edit pending" })
        ] }),
        (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
        (0, import_jsx_runtime.jsx)("div", { className: "px-6 py-4", children: (0, import_jsx_runtime.jsx)(Text, { className: "text-pretty", children: noActions ? "There is a pending edit on this draft order with no changes. Click below to cancel it, or open one of the menus to start making changes." : "There is a pending edit on this draft order with changes. Click below to cancel it, or continue to complete the edit." }) }),
        (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
        (0, import_jsx_runtime.jsxs)("div", { className: "bg-ui-bg-component px-6 py-4 justify-end items-center flex gap-x-2", children: [
          !noActions && (0, import_jsx_runtime.jsx)(
            Button,
            {
              size: "small",
              variant: "secondary",
              isLoading: isMutating,
              onClick: onCancel,
              children: "Continue"
            }
          ),
          (0, import_jsx_runtime.jsx)(
            Button,
            {
              size: "small",
              variant: "secondary",
              isLoading: isMutating,
              onClick: onCancel,
              children: "Cancel"
            }
          )
        ] })
      ] })
    }
  );
};
var USER_QUERY_KEY = "users";
var usersQueryKeys = {
  list: (query2) => [
    USER_QUERY_KEY,
    query2 ? query2 : void 0
  ],
  detail: (id, query2) => [
    USER_QUERY_KEY,
    id,
    query2 ? query2 : void 0
  ]
};
var useUser = (id, query2, options) => {
  const { data, ...rest } = useQuery({
    queryKey: usersQueryKeys.detail(id, query2),
    queryFn: async () => sdk.admin.user.retrieve(id, query2),
    ...options
  });
  return { ...data, ...rest };
};
var ActivitySection = ({ order, changes }) => {
  const activityItems = (0, import_react.useMemo)(
    () => getActivityItems(order, changes),
    [order, changes]
  );
  return (0, import_jsx_runtime.jsxs)(Container, { className: "p-0 overflow-hidden", children: [
    (0, import_jsx_runtime.jsx)("div", { className: "px-6 py-4", children: (0, import_jsx_runtime.jsx)(Heading, { children: "Activity" }) }),
    (0, import_jsx_runtime.jsx)(ActivityItemList, { items: activityItems })
  ] });
};
var ActivityItemList = ({ items }) => {
  if (items.length <= 3) {
    return (0, import_jsx_runtime.jsx)("div", { className: "flex flex-col gap-y-0.5 px-6 pb-6", children: items.map((item, idx) => (0, import_jsx_runtime.jsx)(
      ActivityItem,
      {
        item,
        isFirst: idx === items.length - 1
      },
      idx
    )) });
  }
  const lastItems = items.slice(0, 2);
  const collapsibleItems = items.slice(2, items.length - 1);
  const firstItem = items[items.length - 1];
  return (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-0.5 px-6 pb-6", children: [
    lastItems.map((item, idx) => (0, import_jsx_runtime.jsx)(ActivityItem, { item }, idx)),
    (0, import_jsx_runtime.jsx)(CollapsibleActivityItemList, { items: collapsibleItems }),
    (0, import_jsx_runtime.jsx)(ActivityItem, { item: firstItem, isFirst: true }, items.length - 1)
  ] });
};
var CollapsibleActivityItemList = ({
  items
}) => {
  const [open, setOpen] = (0, import_react.useState)(false);
  return (0, import_jsx_runtime.jsxs)(dist_exports2.Root, { open, onOpenChange: setOpen, children: [
    !open && (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-[20px_1fr] items-start gap-2", children: [
      (0, import_jsx_runtime.jsx)("div", { className: "flex size-full flex-col items-center", children: (0, import_jsx_runtime.jsx)("div", { className: "border-ui-border-strong w-px flex-1 bg-[linear-gradient(var(--border-strong)_33%,rgba(255,255,255,0)_0%)] bg-[length:1px_3px] bg-right bg-repeat-y bg-clip-content" }) }),
      (0, import_jsx_runtime.jsx)(dist_exports2.Trigger, { className: "text-left p-0 m-0 pb-4 text-ui-fg-muted hover:text-ui-fg-base focus:text-ui-fg-base outline-none transition-colors", children: (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: `Show ${items.length} more ${items.length === 1 ? "activity" : "activities"}` }) })
    ] }),
    (0, import_jsx_runtime.jsx)(dist_exports2.Content, { children: (0, import_jsx_runtime.jsx)("div", { className: "flex flex-col gap-y-0.5", children: items.map((item, idx) => {
      return (0, import_jsx_runtime.jsx)(ActivityItem, { item }, idx);
    }) }) })
  ] });
};
var ActivityItem = ({ item, isFirst = false }) => {
  const { user, isPending, isError, error } = useUser(item.userId, void 0, {
    enabled: !!item.userId
  });
  if (isError) {
    throw error;
  }
  const isUserLoaded = !isPending && !!user && !!item.userId;
  return (0, import_jsx_runtime.jsxs)(
    "div",
    {
      className: clx("grid grid-cols-[20px_1fr] items-start gap-x-2 w-full"),
      children: [
        (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col items-center gap-0.5 h-full", children: [
          (0, import_jsx_runtime.jsx)("div", { className: "size-5 flex items-center justify-center", children: (0, import_jsx_runtime.jsx)("div", { className: "size-2.5 rounded-full shadow-borders-base flex items-center justify-center", children: (0, import_jsx_runtime.jsx)("div", { className: "size-1.5 rounded-full bg-ui-tag-neutral-icon" }) }) }),
          !isFirst && (0, import_jsx_runtime.jsx)("div", { className: "flex flex-1 items-center justify-center", children: (0, import_jsx_runtime.jsx)("div", { className: "h-full w-px bg-ui-border-base" }) })
        ] }),
        (0, import_jsx_runtime.jsxs)("div", { className: clx("flex flex-col", !isFirst && "pb-4"), children: [
          (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-2 justify-between", children: [
            (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: item.label }),
            (0, import_jsx_runtime.jsx)(
              Tooltip,
              {
                content: getFullDate({ date: item.timestamp, includeTime: true }),
                children: (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", className: "cursor-default", children: getRelativeDate(item.timestamp) })
              }
            )
          ] }),
          item.content && renderContent(item.content),
          item.userId && (0, import_jsx_runtime.jsx)("div", { className: "pt-2 text-ui-fg-muted", children: isUserLoaded ? (0, import_jsx_runtime.jsx)(Link, { to: `/settings/users/${user.id}`, className: "w-fit", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-1.5 w-fit", children: [
            (0, import_jsx_runtime.jsx)(Text, { size: "small", children: "By" }),
            (0, import_jsx_runtime.jsx)(
              Avatar,
              {
                size: "2xsmall",
                fallback: [user.first_name, user.last_name].filter(Boolean).join("").slice(0, 1)
              }
            ),
            (0, import_jsx_runtime.jsxs)(Text, { size: "small", children: [
              user.first_name,
              " ",
              user.last_name
            ] })
          ] }) }) : (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-1.5", children: [
            (0, import_jsx_runtime.jsx)(Text, { size: "small", children: "By" }),
            (0, import_jsx_runtime.jsx)(Skeleton, { className: "rounded-full w-5 h-5" }),
            (0, import_jsx_runtime.jsx)(Skeleton, { className: "w-[75px] h-4" })
          ] }) })
        ] })
      ]
    }
  );
};
function renderContent(content) {
  if (typeof content === "string") {
    return (0, import_jsx_runtime.jsx)(Text, { size: "small", className: "text-ui-fg-subtle", children: content });
  }
  return content;
}
function getEditActivityItems(change) {
  const activityItems = [];
  const counts = {
    itemsAdded: 0,
    itemsRemoved: 0,
    shippingMethodsAdded: 0,
    shippingMethodsRemoved: 0,
    promotionsAdded: 0,
    promotionsRemoved: 0
  };
  for (const action of change.actions) {
    if (!action.details) {
      continue;
    }
    switch (action.action) {
      case "ITEM_ADD":
        counts.itemsAdded += action.details.quantity;
        break;
      case "ITEM_UPDATE":
        const diff = action.details.quantity_diff;
        diff > 0 ? counts.itemsAdded += diff : counts.itemsRemoved += diff;
        break;
      case "SHIPPING_ADD":
        counts.shippingMethodsAdded += 1;
        break;
      case "SHIPPING_REMOVE":
        counts.shippingMethodsRemoved += 1;
        break;
      case "PROMOTION_ADD":
        counts.promotionsAdded += 1;
        break;
      case "PROMOTION_REMOVE":
        counts.promotionsRemoved += 1;
        break;
    }
  }
  const createActivityItem = (type, added, removed) => {
    if (added === 0 && removed === 0) return;
    const getText = (count, singular, plural) => count === 1 ? `${count} ${singular}` : `${count} ${plural}`;
    const addedText = getText(
      added,
      type === "items" ? "item" : type === "shipping" ? "shipping method" : "promotion",
      type === "items" ? "items" : type === "shipping" ? "shipping methods" : "promotions"
    );
    const removedText = getText(
      Math.abs(removed),
      type === "items" ? "item" : type === "shipping" ? "shipping method" : "promotion",
      type === "items" ? "items" : type === "shipping" ? "shipping methods" : "promotions"
    );
    const content = added && removed ? `Added ${addedText}, removed ${removedText}` : added ? `Added ${addedText}` : `Removed ${removedText}`;
    const label = added && removed ? `${type === "items" ? "Items" : type === "shipping" ? "Shipping methods" : "Promotions"} updated` : added ? `${type === "items" ? "Items" : type === "shipping" ? "Shipping methods" : "Promotions"} added` : `${type === "items" ? "Items" : type === "shipping" ? "Shipping methods" : "Promotions"} removed`;
    activityItems.push({
      label,
      content,
      timestamp: new Date(change.created_at).toISOString(),
      userId: change.confirmed_by
    });
  };
  createActivityItem("items", counts.itemsAdded, counts.itemsRemoved);
  createActivityItem(
    "shipping",
    counts.shippingMethodsAdded,
    counts.shippingMethodsRemoved
  );
  createActivityItem(
    "promotions",
    counts.promotionsAdded,
    counts.promotionsRemoved
  );
  return activityItems;
}
function getTransferActivityItem(change) {
  return {
    label: "Transferred",
    content: "Draft order transferred",
    timestamp: new Date(change.created_at).toISOString()
  };
}
function getUpdateOrderActivityItem(change) {
  var _a;
  const { details } = ((_a = change.actions) == null ? void 0 : _a[0]) || {};
  if (!details) {
    return null;
  }
  switch (details.type) {
    case "customer_id":
      return {
        label: "Customer updated",
        timestamp: new Date(change.created_at).toISOString(),
        userId: change.confirmed_by
      };
    case "sales_channel_id":
      return {
        label: "Sales channel updated",
        timestamp: new Date(change.created_at).toISOString(),
        userId: change.confirmed_by
      };
    case "billing_address":
      return {
        label: "Billing address updated",
        timestamp: new Date(change.created_at).toISOString(),
        userId: change.confirmed_by
      };
    case "shipping_address":
      return {
        label: "Shipping address updated",
        timestamp: new Date(change.created_at).toISOString(),
        userId: change.confirmed_by
      };
    case "email":
      return {
        label: "Email updated",
        timestamp: new Date(change.created_at).toISOString(),
        userId: change.confirmed_by
      };
    default:
      return null;
  }
}
function getActivityItems(order, changes) {
  const items = [];
  if (order.created_at) {
    items.push({
      label: "Created",
      content: "Draft order created",
      timestamp: new Date(order.created_at).toISOString()
    });
  }
  changes.forEach((change) => {
    if (!change.change_type || !change.confirmed_at) {
      return;
    }
    switch (change.change_type) {
      case "edit": {
        items.push(...getEditActivityItems(change));
        break;
      }
      case "transfer":
        items.push(getTransferActivityItem(change));
        break;
      case "update_order": {
        const item = getUpdateOrderActivityItem(change);
        if (item) {
          items.push(item);
        }
        break;
      }
    }
  });
  return items.sort(
    (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
  );
}
function getUniqueShippingProfiles(items) {
  const profiles = /* @__PURE__ */ new Map();
  items.forEach((item) => {
    var _a, _b;
    const profile = (_b = (_a = item.variant) == null ? void 0 : _a.product) == null ? void 0 : _b.shipping_profile;
    if (profile) {
      profiles.set(profile.id, profile);
    }
  });
  return Array.from(profiles.values());
}
function getItemsWithShippingProfile(shipping_profile_id, items) {
  return items.filter(
    (item) => {
      var _a, _b, _c;
      return ((_c = (_b = (_a = item.variant) == null ? void 0 : _a.product) == null ? void 0 : _b.shipping_profile) == null ? void 0 : _c.id) === shipping_profile_id;
    }
  );
}
function getOrderCustomer(obj) {
  const { first_name: sFirstName, last_name: sLastName } = obj.shipping_address || {};
  const { first_name: bFirstName, last_name: bLastName } = obj.billing_address || {};
  const { first_name: cFirstName, last_name: cLastName } = obj.customer || {};
  const customerName = [cFirstName, cLastName].filter(Boolean).join(" ");
  const shippingName = [sFirstName, sLastName].filter(Boolean).join(" ");
  const billingName = [bFirstName, bLastName].filter(Boolean).join(" ");
  const name = customerName || shippingName || billingName;
  return name;
}
var CustomerSection = ({ order }) => {
  return (0, import_jsx_runtime.jsxs)(Container, { className: "p-0 divide-y", children: [
    (0, import_jsx_runtime.jsx)(Header, {}),
    (0, import_jsx_runtime.jsx)(ID$1, { order }),
    (0, import_jsx_runtime.jsx)(Contact, { order }),
    (0, import_jsx_runtime.jsx)(Addresses, { order })
  ] });
};
var Header = () => {
  return (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-between px-6 py-4 gap-2", children: [
    (0, import_jsx_runtime.jsx)(Heading, { level: "h2", children: "Customer" }),
    (0, import_jsx_runtime.jsx)(
      ActionMenu,
      {
        groups: [
          {
            actions: [
              {
                label: "Transfer ownership",
                to: "transfer-ownership",
                icon: (0, import_jsx_runtime.jsx)(ArrowPath, {})
              }
            ]
          },
          {
            actions: [
              {
                label: "Edit shipping address",
                to: "shipping-address",
                icon: (0, import_jsx_runtime.jsx)(FlyingBox, {})
              },
              {
                label: "Edit billing address",
                to: "billing-address",
                icon: (0, import_jsx_runtime.jsx)(CurrencyDollar, {})
              }
            ]
          },
          {
            actions: [
              {
                label: "Edit email",
                to: `email`,
                icon: (0, import_jsx_runtime.jsx)(Envelope, {})
              }
            ]
          }
        ]
      }
    )
  ] });
};
var ID$1 = ({ order }) => {
  const id = order.customer_id;
  const name = getOrderCustomer(order);
  const email = order.email;
  const fallback = (name || email || "").charAt(0).toUpperCase();
  return (0, import_jsx_runtime.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-center px-6 py-4", children: [
    (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: "ID" }),
    (0, import_jsx_runtime.jsx)(
      Link,
      {
        to: `/customers/${id}`,
        className: "focus:shadow-borders-focus rounded-[4px] outline-none transition-shadow",
        children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(Avatar, { size: "2xsmall", fallback }),
          (0, import_jsx_runtime.jsx)("div", { className: "flex flex-1 overflow-hidden", children: (0, import_jsx_runtime.jsx)(
            Text,
            {
              size: "small",
              leading: "compact",
              className: "text-ui-fg-subtle hover:text-ui-fg-base transition-fg truncate",
              children: name || email
            }
          ) })
        ] })
      }
    )
  ] });
};
var Contact = ({ order }) => {
  var _a, _b;
  const phone = ((_a = order.shipping_address) == null ? void 0 : _a.phone) || ((_b = order.billing_address) == null ? void 0 : _b.phone);
  const email = order.email || "";
  return (0, import_jsx_runtime.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-start px-6 py-4", children: [
    (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: "Contact" }),
    (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-2", children: [
      (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-[1fr_20px] items-start gap-x-2", children: [
        (0, import_jsx_runtime.jsx)(
          Text,
          {
            size: "small",
            leading: "compact",
            className: "text-pretty break-all",
            children: email
          }
        ),
        (0, import_jsx_runtime.jsx)("div", { className: "flex justify-end", children: (0, import_jsx_runtime.jsx)(Copy, { content: email, className: "text-ui-fg-muted" }) })
      ] }),
      phone && (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-[1fr_20px] items-start gap-x-2", children: [
        (0, import_jsx_runtime.jsx)(
          Text,
          {
            size: "small",
            leading: "compact",
            className: "text-pretty break-all",
            children: phone
          }
        ),
        (0, import_jsx_runtime.jsx)("div", { className: "flex justify-end", children: (0, import_jsx_runtime.jsx)(Copy, { content: email, className: "text-ui-fg-muted" }) })
      ] })
    ] })
  ] });
};
var AddressPrint = ({
  address,
  type
}) => {
  return (0, import_jsx_runtime.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-start px-6 py-4", children: [
    (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: type === "shipping" ? "Shipping address" : "Billing address" }),
    address ? (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-[1fr_20px] items-start gap-x-2", children: [
      (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", children: getFormattedAddress(address).map((line, i) => {
        return (0, import_jsx_runtime.jsxs)("span", { className: "break-words", children: [
          line,
          (0, import_jsx_runtime.jsx)("br", {})
        ] }, i);
      }) }),
      (0, import_jsx_runtime.jsx)("div", { className: "flex justify-end", children: (0, import_jsx_runtime.jsx)(
        Copy,
        {
          content: getFormattedAddress(address).join("\n"),
          className: "text-ui-fg-muted"
        }
      ) })
    ] }) : (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", children: "-" })
  ] });
};
var Addresses = ({ order }) => {
  return (0, import_jsx_runtime.jsxs)("div", { className: "divide-y", children: [
    (0, import_jsx_runtime.jsx)(AddressPrint, { address: order.shipping_address, type: "shipping" }),
    !isSameAddress(order.shipping_address, order.billing_address) ? (0, import_jsx_runtime.jsx)(AddressPrint, { address: order.billing_address, type: "billing" }) : (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 items-center px-6 py-4", children: [
      (0, import_jsx_runtime.jsx)(
        Text,
        {
          size: "small",
          leading: "compact",
          weight: "plus",
          className: "text-ui-fg-subtle",
          children: "Billing address"
        }
      ),
      (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", className: "text-ui-fg-muted", children: "Same as shipping address" })
    ] })
  ] });
};
var GeneralSection = ({ order }) => {
  var _a;
  const navigate = useNavigate();
  const { mutateAsync: deleteDraftOrder, isPending: isDeleting } = useDeleteDraftOrder();
  const { region, isPending, isError, error } = useRegion(
    order.region_id,
    void 0,
    {
      enabled: !!order.region_id
    }
  );
  const isRegionLoaded = !!region && !isPending;
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime.jsxs)(Container, { className: "flex items-center justify-between gap-4", children: [
    (0, import_jsx_runtime.jsxs)("div", { children: [
      (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-2", children: [
        (0, import_jsx_runtime.jsxs)(Heading, { children: [
          "Draft Order #",
          order.display_id
        ] }),
        (0, import_jsx_runtime.jsx)(Copy, { content: `#${order.display_id}` }),
        isRegionLoaded ? (0, import_jsx_runtime.jsx)(Badge, { size: "2xsmall", rounded: "full", asChild: true, children: (0, import_jsx_runtime.jsx)(Link, { to: `/settings/regions/${region == null ? void 0 : region.id}`, children: region == null ? void 0 : region.name }) }) : (0, import_jsx_runtime.jsx)(Skeleton, { className: "w-14 h-5 rounded-full" })
      ] }),
      (0, import_jsx_runtime.jsx)(Text, { size: "small", className: "text-ui-fg-subtle", children: `${getFullDate({
        date: order.created_at,
        includeTime: true
      })} from ${(_a = order.sales_channel) == null ? void 0 : _a.name}` })
    ] }),
    (0, import_jsx_runtime.jsx)(
      ActionMenu,
      {
        groups: [
          {
            actions: [
              {
                label: "Edit sales channel",
                icon: (0, import_jsx_runtime.jsx)(Channels, {}),
                to: "sales-channel"
              },
              {
                label: "Delete draft order",
                icon: (0, import_jsx_runtime.jsx)(Trash, {}),
                onClick: async () => {
                  try {
                    await deleteDraftOrder(order.id);
                    navigate("/draft-orders");
                  } catch (error2) {
                    toast.error(error2.message);
                  }
                },
                disabled: isDeleting
              }
            ]
          }
        ]
      }
    )
  ] });
};
var JsonViewSection = ({ data }) => {
  const numberOfKeys = Object.keys(data).length;
  return (0, import_jsx_runtime.jsxs)(Container, { className: "flex items-center justify-between px-6 py-4", children: [
    (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-4", children: [
      (0, import_jsx_runtime.jsx)(Heading, { level: "h2", children: "JSON" }),
      (0, import_jsx_runtime.jsx)(Badge, { size: "2xsmall", rounded: "full", children: `${numberOfKeys} ${numberOfKeys === 1 ? "key" : "keys"}` })
    ] }),
    (0, import_jsx_runtime.jsxs)(Drawer, { children: [
      (0, import_jsx_runtime.jsx)(Drawer.Trigger, { asChild: true, children: (0, import_jsx_runtime.jsx)(
        IconButton,
        {
          size: "small",
          variant: "transparent",
          className: "text-ui-fg-muted hover:text-ui-fg-subtle",
          children: (0, import_jsx_runtime.jsx)(ArrowUpRightOnBox, {})
        }
      ) }),
      (0, import_jsx_runtime.jsxs)(Drawer.Content, { className: "bg-ui-contrast-bg-base text-ui-code-fg-subtle !shadow-elevation-commandbar overflow-hidden border border-none max-md:inset-x-2 max-md:max-w-[calc(100%-16px)]", children: [
        (0, import_jsx_runtime.jsxs)("div", { className: "bg-ui-code-bg-base flex items-center justify-between px-6 py-4", children: [
          (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-4", children: [
            (0, import_jsx_runtime.jsx)(Drawer.Title, { asChild: true, children: (0, import_jsx_runtime.jsxs)(Heading, { className: "text-ui-contrast-fg-primary", children: [
              "JSON",
              " ",
              (0, import_jsx_runtime.jsx)("span", { className: "text-ui-fg-subtle", children: numberOfKeys }, "count-span")
            ] }) }),
            (0, import_jsx_runtime.jsx)(Drawer.Description, { className: "sr-only", children: "View the JSON representation of the draft order." })
          ] }),
          (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-2", children: [
            (0, import_jsx_runtime.jsx)(Kbd, { className: "bg-ui-contrast-bg-subtle border-ui-contrast-border-base text-ui-contrast-fg-secondary", children: "esc" }),
            (0, import_jsx_runtime.jsx)(Drawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(
              IconButton,
              {
                size: "small",
                variant: "transparent",
                className: "text-ui-contrast-fg-secondary hover:text-ui-contrast-fg-primary hover:bg-ui-contrast-bg-base-hover active:bg-ui-contrast-bg-base-pressed focus-visible:bg-ui-contrast-bg-base-hover focus-visible:shadow-borders-interactive-with-active",
                children: (0, import_jsx_runtime.jsx)(XMarkMini, {})
              }
            ) })
          ] })
        ] }),
        (0, import_jsx_runtime.jsx)(Drawer.Body, { className: "flex flex-1 flex-col overflow-hidden px-[5px] py-0 pb-[5px]", children: (0, import_jsx_runtime.jsx)("div", { className: "bg-ui-contrast-bg-subtle flex-1 overflow-auto rounded-b-[4px] rounded-t-lg p-3", children: (0, import_jsx_runtime.jsx)(
          import_react.Suspense,
          {
            fallback: (0, import_jsx_runtime.jsx)("div", { className: "flex size-full flex-col" }),
            children: (0, import_jsx_runtime.jsxs)(
              esm_default2,
              {
                value: data,
                displayDataTypes: false,
                style: {
                  "--w-rjv-font-family": "Roboto Mono, monospace",
                  "--w-rjv-line-color": "var(--contrast-border-base)",
                  "--w-rjv-curlybraces-color": "var(--contrast-fg-secondary)",
                  "--w-rjv-brackets-color": "var(--contrast-fg-secondary)",
                  "--w-rjv-key-string": "var(--contrast-fg-primary)",
                  "--w-rjv-info-color": "var(--contrast-fg-secondary)",
                  "--w-rjv-type-string-color": "var(--tag-green-icon)",
                  "--w-rjv-quotes-string-color": "var(--tag-green-icon)",
                  "--w-rjv-type-boolean-color": "var(--tag-orange-icon)",
                  "--w-rjv-type-int-color": "var(--tag-orange-icon)",
                  "--w-rjv-type-float-color": "var(--tag-orange-icon)",
                  "--w-rjv-type-bigint-color": "var(--tag-orange-icon)",
                  "--w-rjv-key-number": "var(--contrast-fg-secondary)",
                  "--w-rjv-arrow-color": "var(--contrast-fg-secondary)",
                  "--w-rjv-copied-color": "var(--contrast-fg-secondary)",
                  "--w-rjv-copied-success-color": "var(--contrast-fg-primary)",
                  "--w-rjv-colon-color": "var(--contrast-fg-primary)",
                  "--w-rjv-ellipsis-color": "var(--contrast-fg-secondary)"
                },
                collapsed: 1,
                children: [
                  (0, import_jsx_runtime.jsx)(esm_default2.Quote, { render: () => (0, import_jsx_runtime.jsx)("span", {}) }),
                  (0, import_jsx_runtime.jsx)(
                    esm_default2.Null,
                    {
                      render: () => (0, import_jsx_runtime.jsx)("span", { className: "text-ui-tag-red-icon", children: "null" })
                    }
                  ),
                  (0, import_jsx_runtime.jsx)(
                    esm_default2.Undefined,
                    {
                      render: () => (0, import_jsx_runtime.jsx)("span", { className: "text-ui-tag-blue-icon", children: "undefined" })
                    }
                  ),
                  (0, import_jsx_runtime.jsx)(
                    esm_default2.CountInfo,
                    {
                      render: (_props, { value }) => {
                        return (0, import_jsx_runtime.jsx)("span", { className: "text-ui-contrast-fg-secondary ml-2", children: `${Object.keys(value).length} ${Object.keys(value).length === 1 ? "key" : "keys"}` });
                      }
                    }
                  ),
                  (0, import_jsx_runtime.jsx)(esm_default2.Arrow, { children: (0, import_jsx_runtime.jsx)(TriangleDownMini, { className: "text-ui-contrast-fg-secondary -ml-[0.5px]" }) }),
                  (0, import_jsx_runtime.jsx)(esm_default2.Colon, { children: (0, import_jsx_runtime.jsx)("span", { className: "mr-1", children: ":" }) }),
                  (0, import_jsx_runtime.jsx)(
                    esm_default2.Copied,
                    {
                      render: ({ style }, { value }) => {
                        return (0, import_jsx_runtime.jsx)(Copied, { style, value });
                      }
                    }
                  )
                ]
              }
            )
          }
        ) }) })
      ] })
    ] })
  ] });
};
var Copied = ({ style, value }) => {
  const [copied, setCopied] = (0, import_react.useState)(false);
  const handler = (e) => {
    e.stopPropagation();
    setCopied(true);
    if (typeof value === "string") {
      navigator.clipboard.writeText(value);
    } else {
      const json = JSON.stringify(value, null, 2);
      navigator.clipboard.writeText(json);
    }
    setTimeout(() => {
      setCopied(false);
    }, 2e3);
  };
  const styl = { whiteSpace: "nowrap", width: "20px" };
  if (copied) {
    return (0, import_jsx_runtime.jsx)("span", { style: { ...style, ...styl }, children: (0, import_jsx_runtime.jsx)(Check, { className: "text-ui-contrast-fg-primary" }) });
  }
  return (0, import_jsx_runtime.jsx)("span", { style: { ...style, ...styl }, onClick: handler, children: (0, import_jsx_runtime.jsx)(SquareTwoStack, { className: "text-ui-contrast-fg-secondary" }) });
};
var MetadataSection = ({ order }) => {
  return (0, import_jsx_runtime.jsxs)(Container, { className: "flex items-center justify-between", children: [
    (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-2", children: [
      (0, import_jsx_runtime.jsx)(Heading, { level: "h2", children: "Metadata" }),
      (0, import_jsx_runtime.jsxs)(Badge, { size: "2xsmall", rounded: "full", children: [
        Object.keys(order.metadata || {}).length,
        " keys"
      ] })
    ] }),
    (0, import_jsx_runtime.jsx)(
      IconButton,
      {
        variant: "transparent",
        size: "small",
        className: "text-ui-fg-muted hover:text-ui-fg-subtle",
        asChild: true,
        children: (0, import_jsx_runtime.jsx)(Link, { to: "metadata", children: (0, import_jsx_runtime.jsx)(ArrowUpRightOnBox, {}) })
      }
    )
  ] });
};
function pluralize(count, plural, singular) {
  return count === 1 ? singular : plural;
}
var Thumbnail = ({ thumbnail, alt = "" }) => {
  return (0, import_jsx_runtime.jsx)("div", { className: "relative w-6 h-8 rounded overflow-hidden flex items-center justify-center bg-ui-bg-component", children: thumbnail ? (0, import_jsx_runtime.jsx)(
    "img",
    {
      src: thumbnail,
      className: "w-full h-full object-cover",
      alt: alt ?? void 0
    }
  ) : (0, import_jsx_runtime.jsx)(Photo, {}) });
};
var ShippingSection = ({ order }) => {
  const orderHasShipping = order.shipping_methods.length > 0;
  const {
    shipping_options = [],
    isPending,
    isError,
    error
  } = useShippingOptions(
    {
      id: order.shipping_methods.map((method) => method.shipping_option_id).filter(Boolean),
      fields: "+service_zone.*,+service_zone.fulfillment_set.*,+service_zone.fulfillment_set.location.*,shipping_profile.*"
    },
    {
      enabled: orderHasShipping
    }
  );
  if (isError) {
    throw error;
  }
  const ready = !orderHasShipping ? true : shipping_options && !isPending;
  const data = (0, import_react.useMemo)(() => {
    const shippingProfilesData = getShippingProfileData(order.items);
    const profileIdMap = /* @__PURE__ */ new Map();
    shippingProfilesData.forEach((profile) => {
      profileIdMap.set(profile.id, true);
    });
    const uniqueProfilesOfShippingMethods = Array.from(
      new Set(shipping_options.map((option) => option.shipping_profile_id))
    );
    const additionalShippingProfilesData = uniqueProfilesOfShippingMethods.filter((id) => !profileIdMap.has(id)).map((id) => {
      var _a, _b;
      return {
        id,
        name: ((_b = (_a = shipping_options.find((option) => option.shipping_profile_id === id)) == null ? void 0 : _a.shipping_profile) == null ? void 0 : _b.name) || "",
        items: []
      };
    });
    const shippingProfileDisplayData = [
      ...shippingProfilesData,
      ...additionalShippingProfilesData
    ];
    return shippingProfileDisplayData.sort(
      (a, b) => a.name.localeCompare(b.name)
    );
  }, [order.items, shipping_options]);
  const isSomeProfilesAssigned = data.some(
    (profile) => shipping_options == null ? void 0 : shipping_options.find(
      (option) => option.shipping_profile_id === profile.id
    )
  );
  return (0, import_jsx_runtime.jsxs)(Container, { className: "p-0 overflow-hidden", children: [
    (0, import_jsx_runtime.jsx)("div", { className: "px-6 py-4", children: (0, import_jsx_runtime.jsx)(Heading, { children: "Shipping" }) }),
    (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
    (0, import_jsx_runtime.jsx)(dist_exports3.Root, { type: "multiple", children: ready && data.map((profile, idx) => (0, import_jsx_runtime.jsx)("div", { children: renderShippingProfile(
      profile,
      shipping_options,
      idx === data.length - 1
    ) }, profile.id)) }),
    (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
    (0, import_jsx_runtime.jsx)(Footer$1, { isSomeProfilesAssigned })
  ] });
};
function renderShippingProfile(profile, shippingOptions, isLast) {
  const shippingOption = shippingOptions.find(
    (option) => option.shipping_profile_id === profile.id
  );
  if (shippingOption) {
    return (0, import_jsx_runtime.jsx)(
      ProfileWithShipping,
      {
        profile,
        shippingOption,
        isLast
      }
    );
  }
  return (0, import_jsx_runtime.jsx)(ProfileWithoutShipping, { profile, isLast });
}
var ProfileWithShipping = ({
  profile,
  shippingOption,
  isLast
}) => {
  var _a, _b, _c, _d, _e, _f;
  const hasItems = profile.items.length > 0;
  return (0, import_jsx_runtime.jsxs)("div", { children: [
    (0, import_jsx_runtime.jsxs)(dist_exports3.Item, { value: profile.id, children: [
      (0, import_jsx_runtime.jsx)("div", { className: "flex items-center px-6 py-4 justify-between gap-x-3", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-3 max-sm:items-start", children: [
        (0, import_jsx_runtime.jsx)(dist_exports3.Trigger, { asChild: true, children: (0, import_jsx_runtime.jsx)(
          IconButton,
          {
            size: "2xsmall",
            variant: "transparent",
            className: "group/trigger",
            disabled: !hasItems,
            children: (0, import_jsx_runtime.jsx)(TriangleRightMini, { className: "group-data-[state=open]/trigger:rotate-90 transition-transform" })
          }
        ) }),
        (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-[5px] max-sm:flex-col max-sm:items-start flex-1 w-full overflow-hidden", children: [
          (0, import_jsx_runtime.jsx)(
            Tooltip,
            {
              content: (0, import_jsx_runtime.jsx)("ul", { children: profile.items.map((item) => {
                var _a2, _b2, _c2;
                return (0, import_jsx_runtime.jsx)(
                  "li",
                  {
                    children: `${item.quantity}x ${(_b2 = (_a2 = item.variant) == null ? void 0 : _a2.product) == null ? void 0 : _b2.title} (${(_c2 = item.variant) == null ? void 0 : _c2.title})`
                  },
                  item.id
                );
              }) }),
              children: (0, import_jsx_runtime.jsxs)(
                Badge,
                {
                  className: "flex items-center gap-x-[3px] overflow-hidden cursor-default",
                  size: "xsmall",
                  children: [
                    (0, import_jsx_runtime.jsx)(Shopping, { className: "shrink-0" }),
                    (0, import_jsx_runtime.jsxs)("span", { className: "truncate", children: [
                      profile.items.reduce(
                        (acc, item) => acc + item.quantity,
                        0
                      ),
                      "x ",
                      pluralize(profile.items.length, "items", "item")
                    ] })
                  ]
                }
              )
            }
          ),
          (0, import_jsx_runtime.jsx)(
            Tooltip,
            {
              content: (_c = (_b = (_a = shippingOption.service_zone) == null ? void 0 : _a.fulfillment_set) == null ? void 0 : _b.location) == null ? void 0 : _c.name,
              children: (0, import_jsx_runtime.jsxs)(
                Badge,
                {
                  className: "flex items-center gap-x-[3px] overflow-hidden cursor-default",
                  size: "xsmall",
                  children: [
                    (0, import_jsx_runtime.jsx)(Buildings, { className: "shrink-0" }),
                    (0, import_jsx_runtime.jsx)("span", { className: "truncate", children: (_f = (_e = (_d = shippingOption.service_zone) == null ? void 0 : _d.fulfillment_set) == null ? void 0 : _e.location) == null ? void 0 : _f.name })
                  ]
                }
              )
            }
          ),
          (0, import_jsx_runtime.jsx)(Tooltip, { content: shippingOption.name, children: (0, import_jsx_runtime.jsxs)(
            Badge,
            {
              className: "flex items-center gap-x-[3px] overflow-hidden cursor-default",
              size: "xsmall",
              children: [
                (0, import_jsx_runtime.jsx)(TruckFast, { className: "shrink-0" }),
                (0, import_jsx_runtime.jsx)("span", { className: "truncate", children: shippingOption.name })
              ]
            }
          ) })
        ] })
      ] }) }),
      (0, import_jsx_runtime.jsx)(ShippingProfileItems, { profile })
    ] }),
    !isLast && (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" })
  ] });
};
var ProfileWithoutShipping = ({
  profile,
  isLast
}) => {
  return (0, import_jsx_runtime.jsxs)("div", { children: [
    (0, import_jsx_runtime.jsxs)(dist_exports3.Item, { value: profile.id, children: [
      (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-3 justify-between px-6 py-4", children: [
        (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-3", children: [
          (0, import_jsx_runtime.jsx)(dist_exports3.Trigger, { asChild: true, children: (0, import_jsx_runtime.jsx)(
            IconButton,
            {
              size: "2xsmall",
              variant: "transparent",
              className: "group/trigger",
              children: (0, import_jsx_runtime.jsx)(TriangleRightMini, { className: "group-data-[state=open]/trigger:rotate-90 transition-transform" })
            }
          ) }),
          (0, import_jsx_runtime.jsxs)("div", { className: "flex-1 flex items-center gap-x-3", children: [
            (0, import_jsx_runtime.jsx)(ShippingBadge, {}),
            (0, import_jsx_runtime.jsxs)("div", { children: [
              (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: profile.name }),
              (0, import_jsx_runtime.jsx)(
                Text,
                {
                  size: "small",
                  leading: "compact",
                  className: "text-ui-fg-subtle",
                  children: `${profile.items.length} ${pluralize(
                    profile.items.length,
                    "item",
                    "items"
                  )}`
                }
              )
            ] })
          ] })
        ] }),
        (0, import_jsx_runtime.jsx)("div", { children: (0, import_jsx_runtime.jsx)(StatusBadge, { color: "orange", children: "Requires shipping" }) })
      ] }),
      (0, import_jsx_runtime.jsx)(ShippingProfileItems, { profile })
    ] }),
    !isLast && (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" })
  ] });
};
var ShippingProfileItems = ({ profile }) => {
  return (0, import_jsx_runtime.jsxs)(dist_exports3.Content, { children: [
    (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
    profile.items.map((item, idx) => {
      var _a, _b, _c, _d, _e;
      return (0, import_jsx_runtime.jsxs)("div", { children: [
        (0, import_jsx_runtime.jsxs)("div", { className: "px-6 flex items-center gap-x-3", children: [
          (0, import_jsx_runtime.jsx)("div", { className: "w-5 h-[72px] flex flex-col justify-center items-center", children: (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed", orientation: "vertical" }) }),
          (0, import_jsx_runtime.jsxs)("div", { className: "py-4 flex items-center gap-x-3", children: [
            (0, import_jsx_runtime.jsx)("div", { className: "size-7 flex items-center justify-center tabular-nums", children: (0, import_jsx_runtime.jsxs)(
              Text,
              {
                size: "small",
                leading: "compact",
                className: "text-ui-fg-subtle",
                children: [
                  item.quantity,
                  "x"
                ]
              }
            ) }),
            (0, import_jsx_runtime.jsx)(Thumbnail, { thumbnail: item.thumbnail }),
            (0, import_jsx_runtime.jsxs)("div", { children: [
              (0, import_jsx_runtime.jsxs)(Text, { size: "small", leading: "compact", weight: "plus", children: [
                (_b = (_a = item.variant) == null ? void 0 : _a.product) == null ? void 0 : _b.title,
                " (",
                (_c = item.variant) == null ? void 0 : _c.title,
                ")"
              ] }),
              (0, import_jsx_runtime.jsx)(
                Text,
                {
                  size: "small",
                  leading: "compact",
                  className: "text-ui-fg-subtle",
                  children: (_e = (_d = item.variant) == null ? void 0 : _d.options) == null ? void 0 : _e.map((option) => option.value).join(" · ")
                }
              )
            ] })
          ] })
        ] }, item.id),
        idx !== profile.items.length - 1 && (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" })
      ] }, item.id);
    })
  ] });
};
var Footer$1 = ({ isSomeProfilesAssigned }) => {
  return (0, import_jsx_runtime.jsx)("div", { className: "px-6 py-4 flex items-center justify-end bg-ui-bg-component", children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", asChild: true, children: (0, import_jsx_runtime.jsx)(Link, { to: "shipping", children: isSomeProfilesAssigned ? "Edit shipping" : "Add shipping" }) }) });
};
var ShippingBadge = ({ className }) => {
  return (0, import_jsx_runtime.jsx)(
    "div",
    {
      className: clx(
        "size-7 rounded-md shadow-borders-base flex items-center justify-center",
        className
      ),
      children: (0, import_jsx_runtime.jsx)("div", { className: "size-6 rounded bg-ui-bg-component-hover flex items-center justify-center", children: (0, import_jsx_runtime.jsx)(Shopping, { className: "text-ui-fg-subtle" }) })
    }
  );
};
function getShippingProfileData(items) {
  const uniqueShippingProfiles = getUniqueShippingProfiles(items);
  const output = uniqueShippingProfiles.map((profile) => {
    return {
      id: profile.id,
      name: profile.name,
      items: items.filter(
        (item) => {
          var _a, _b, _c;
          return ((_c = (_b = (_a = item.variant) == null ? void 0 : _a.product) == null ? void 0 : _b.shipping_profile) == null ? void 0 : _c.id) === profile.id;
        }
      )
    };
  });
  return output;
}
var getLocaleAmount = (amount, currencyCode) => {
  const formatter2 = new Intl.NumberFormat([], {
    style: "currency",
    currencyDisplay: "narrowSymbol",
    currency: currencyCode
  });
  return formatter2.format(amount);
};
var getNativeSymbol = (currencyCode) => {
  const formatted = new Intl.NumberFormat([], {
    style: "currency",
    currency: currencyCode,
    currencyDisplay: "narrowSymbol"
  }).format(0);
  return formatted.replace(/\d/g, "").replace(/[.,]/g, "").trim();
};
var getDecimalDigits = (currencyCode) => {
  const formatter2 = new Intl.NumberFormat(void 0, {
    style: "currency",
    currency: currencyCode
  });
  return formatter2.resolvedOptions().maximumFractionDigits;
};
var getStylizedAmount = (amount, currencyCode) => {
  const symbol = getNativeSymbol(currencyCode);
  const decimalDigits = getDecimalDigits(currencyCode);
  const total = amount.toLocaleString(void 0, {
    minimumFractionDigits: decimalDigits,
    maximumFractionDigits: decimalDigits
  });
  return `${symbol} ${total} ${currencyCode.toUpperCase()}`;
};
var SummarySection = ({ order }) => {
  var _a;
  const promotions = order.promotions || [];
  return (0, import_jsx_runtime.jsxs)(Container, { className: "p-0 overflow-hidden", children: [
    (0, import_jsx_runtime.jsxs)("div", { className: "px-6 py-4 flex items-center justify-between gap-x-4", children: [
      (0, import_jsx_runtime.jsx)(Heading, { children: "Summary" }),
      (0, import_jsx_runtime.jsx)(
        ActionMenu,
        {
          groups: [
            {
              actions: [
                {
                  label: "Edit items",
                  icon: (0, import_jsx_runtime.jsx)(Plus, {}),
                  to: "items"
                }
              ]
            },
            {
              actions: [
                {
                  label: "Edit promotions",
                  icon: (0, import_jsx_runtime.jsx)(ReceiptPercent, {}),
                  to: "promotions"
                }
              ]
            }
          ]
        }
      )
    ] }),
    (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
    (0, import_jsx_runtime.jsx)("div", { children: order.items.sort((a, b) => {
      if (a.variant_id && !b.variant_id) {
        return -1;
      }
      return 1;
    }).map((item, idx) => (0, import_jsx_runtime.jsxs)("div", { children: [
      (0, import_jsx_runtime.jsx)(Item$1, { item, currencyCode: order.currency_code }),
      idx !== order.items.length - 1 && (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" })
    ] }, item.id)) }),
    (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
    (0, import_jsx_runtime.jsx)(
      Total,
      {
        currencyCode: order.currency_code,
        total: order.total,
        shippingSubtotal: order.shipping_subtotal,
        discountTotal: order.discount_total,
        promotions,
        taxTotal: order.tax_total,
        itemSubTotal: order.item_subtotal,
        itemCount: ((_a = order.items) == null ? void 0 : _a.reduce((acc, item) => acc + item.quantity, 0)) || 0
      }
    ),
    (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
    (0, import_jsx_runtime.jsx)(Footer, { order })
  ] });
};
var Item$1 = ({ item, currencyCode }) => {
  return (0, import_jsx_runtime.jsxs)("div", { className: "px-6 py-4 grid grid-cols-2 gap-3", children: [
    (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-3", children: [
      item.variant_id && (0, import_jsx_runtime.jsx)(Thumbnail, { thumbnail: item.thumbnail, alt: item.title }),
      (0, import_jsx_runtime.jsxs)("div", { children: [
        (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-1", children: [
          (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: item.product_title || item.title }),
          item.variant_title && (0, import_jsx_runtime.jsxs)(
            Text,
            {
              size: "small",
              leading: "compact",
              className: "text-ui-fg-subtle",
              children: [
                "(",
                item.variant_title,
                ")"
              ]
            }
          )
        ] }),
        (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", className: "text-ui-fg-subtle", children: item.variant_sku })
      ] })
    ] }),
    (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-3 items-center gap-3 [&>div]:text-right text-ui-fg-subtle", children: [
      (0, import_jsx_runtime.jsx)("div", { children: (0, import_jsx_runtime.jsx)(Text, { children: getLocaleAmount(item.unit_price, currencyCode) }) }),
      (0, import_jsx_runtime.jsx)("div", { children: (0, import_jsx_runtime.jsxs)(Text, { children: [
        item.quantity,
        "x"
      ] }) }),
      (0, import_jsx_runtime.jsx)("div", { children: (0, import_jsx_runtime.jsx)(Text, { children: getLocaleAmount(item.subtotal, currencyCode) }) })
    ] })
  ] });
};
var Total = ({
  total,
  discountTotal,
  shippingSubtotal,
  taxTotal,
  currencyCode,
  promotions,
  itemSubTotal,
  itemCount
}) => {
  return (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col px-6 py-4 gap-y-2", children: [
    itemCount > 0 && (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-3 items-center justify-between gap-x-4 text-ui-fg-subtle", children: [
      (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", children: "Subtotal" }),
      (0, import_jsx_runtime.jsx)("div", { className: "flex items-center justify-end", children: (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", children: `${itemCount} ${itemCount === 1 ? "item" : "items"}` }) }),
      (0, import_jsx_runtime.jsx)("div", { className: "flex items-center justify-end", children: (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", children: getLocaleAmount(itemSubTotal, currencyCode) }) })
    ] }),
    shippingSubtotal !== null && (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-between gap-x-4 text-ui-fg-subtle", children: [
      (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", children: "Shipping" }),
      (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", children: getLocaleAmount(shippingSubtotal, currencyCode) })
    ] }),
    discountTotal !== null && (0, import_jsx_runtime.jsxs)(
      "div",
      {
        className: clx(
          "grid grid-cols-2 items-center gap-x-4 text-ui-fg-subtle",
          {
            "grid-cols-3": !!promotions
          }
        ),
        children: [
          (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", children: "Discount" }),
          (0, import_jsx_runtime.jsx)("div", { className: "flex items-center justify-end gap-x-2", children: promotions.map((promotion) => (0, import_jsx_runtime.jsx)(Link, { to: `/promotions/${promotion.id}`, children: (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", children: promotion.code }) }, promotion.id)) }),
          (0, import_jsx_runtime.jsx)("div", { className: "flex items-center justify-end", children: (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", children: getLocaleAmount(discountTotal, currencyCode) }) })
        ]
      }
    ),
    taxTotal !== null && (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-between gap-x-4 text-ui-fg-subtle", children: [
      (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", children: "Tax" }),
      (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", children: taxTotal > 0 ? getLocaleAmount(taxTotal, currencyCode) : "-" })
    ] }),
    (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-between gap-x-4", children: [
      (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: "Total" }),
      (0, import_jsx_runtime.jsx)(
        Text,
        {
          size: "small",
          leading: "compact",
          weight: "plus",
          className: "text-right",
          children: getStylizedAmount(total, currencyCode)
        }
      )
    ] })
  ] });
};
var Footer = ({ order }) => {
  const navigate = useNavigate();
  const prompt = usePrompt();
  const { mutateAsync: convertDraftOrder, isPending } = useConvertDraftOrder(
    order.id
  );
  const handleConvert = async () => {
    const res = await prompt({
      title: "Are you sure?",
      description: "You are about to convert this draft order to an order. This action cannot be undone.",
      variant: "confirmation"
    });
    if (!res) {
      return;
    }
    await convertDraftOrder(void 0, {
      onSuccess: () => {
        toast.success("Draft order converted to order");
        navigate(`/orders/${order.id}`);
      },
      onError: (error) => {
        toast.error(error.message);
      }
    });
  };
  return (0, import_jsx_runtime.jsx)("div", { className: "px-6 py-4 flex items-center justify-end gap-x-2 bg-ui-bg-component", children: (0, import_jsx_runtime.jsx)(
    Button,
    {
      size: "small",
      variant: "secondary",
      isLoading: isPending,
      onClick: handleConvert,
      children: "Convert to order"
    }
  ) });
};
async function loader({ params }) {
  const { id } = params;
  const data = await sdk.admin.order.retrieve(id, {
    fields: "id,display_id"
  });
  return data;
}
var handle = {
  breadcrumb: (match) => `#${match.data.order.display_id}`
};
var ID = () => {
  const { id } = useParams();
  const { order, isPending, isError, error } = useOrder(id, {
    fields: "+customer.*,+sales_channel.*,+region.*,+email,+items.*,+items.variant.*,+items.variant.product.*,+items.variant.product.shipping_profile.*,+items.variant.options.*,+currency_code,+promotions.*"
  });
  const {
    order_changes,
    isPending: isOrderChangesPending,
    isError: isOrderChangesError,
    error: orderChangesError
  } = useOrderChanges(id, {
    change_type: ["edit", "transfer", "update_order"]
  });
  if (isError) {
    throw error;
  }
  if (isOrderChangesError) {
    throw orderChangesError;
  }
  const isReady = !isPending && !isOrderChangesPending && !!order && !!order_changes;
  if (!isReady) {
    return (0, import_jsx_runtime.jsx)(
      PageSkeleton,
      {
        mainSections: 3,
        sidebarSections: 2,
        showJSON: true,
        showMetadata: true
      }
    );
  }
  return (0, import_jsx_runtime.jsxs)(import_react.Fragment, { children: [
    (0, import_jsx_runtime.jsx)("div", { className: "flex w-full flex-col gap-y-3", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex w-full flex-col items-start gap-x-4 gap-y-3 xl:grid xl:grid-cols-[minmax(0,_1fr)_440px]", children: [
      (0, import_jsx_runtime.jsxs)("div", { className: "flex w-full min-w-0 flex-col gap-y-3", children: [
        (0, import_jsx_runtime.jsx)(ActiveOrderChange, { orderId: order.id }),
        (0, import_jsx_runtime.jsx)(GeneralSection, { order }),
        (0, import_jsx_runtime.jsx)(SummarySection, { order }),
        (0, import_jsx_runtime.jsx)(ShippingSection, { order }),
        (0, import_jsx_runtime.jsxs)("div", { className: "hidden flex-col gap-y-3 xl:flex", children: [
          (0, import_jsx_runtime.jsx)(MetadataSection, { order }),
          (0, import_jsx_runtime.jsx)(JsonViewSection, { data: order })
        ] })
      ] }),
      (0, import_jsx_runtime.jsxs)("div", { className: "flex w-full flex-col gap-y-3 xl:mt-0", children: [
        (0, import_jsx_runtime.jsx)(CustomerSection, { order }),
        (0, import_jsx_runtime.jsx)(ActivitySection, { order, changes: order_changes }),
        (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-3 xl:hidden", children: [
          (0, import_jsx_runtime.jsx)(MetadataSection, { order }),
          (0, import_jsx_runtime.jsx)(JsonViewSection, { data: order })
        ] })
      ] })
    ] }) }),
    (0, import_jsx_runtime.jsx)(Outlet, {})
  ] });
};
var BillingAddress = () => {
  const { id } = useParams();
  const { order, isPending, isError, error } = useOrder(id, {
    fields: "+billing_address"
  });
  if (isError) {
    throw error;
  }
  const isReady = !isPending && !!order;
  return (0, import_jsx_runtime.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime.jsxs)(RouteDrawer.Header, { children: [
      (0, import_jsx_runtime.jsx)(RouteDrawer.Title, { asChild: true, children: (0, import_jsx_runtime.jsx)(Heading, { children: "Edit Billing Address" }) }),
      (0, import_jsx_runtime.jsx)(RouteDrawer.Description, { asChild: true, children: (0, import_jsx_runtime.jsx)("span", { className: "sr-only", children: "Edit the billing address for the draft order" }) })
    ] }),
    isReady && (0, import_jsx_runtime.jsx)(BillingAddressForm, { order })
  ] });
};
var BillingAddressForm = ({ order }) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
  const form = useForm({
    defaultValues: {
      first_name: ((_a = order.billing_address) == null ? void 0 : _a.first_name) ?? "",
      last_name: ((_b = order.billing_address) == null ? void 0 : _b.last_name) ?? "",
      company: ((_c = order.billing_address) == null ? void 0 : _c.company) ?? "",
      address_1: ((_d = order.billing_address) == null ? void 0 : _d.address_1) ?? "",
      address_2: ((_e = order.billing_address) == null ? void 0 : _e.address_2) ?? "",
      city: ((_f = order.billing_address) == null ? void 0 : _f.city) ?? "",
      province: ((_g = order.billing_address) == null ? void 0 : _g.province) ?? "",
      country_code: ((_h = order.billing_address) == null ? void 0 : _h.country_code) ?? "",
      postal_code: ((_i = order.billing_address) == null ? void 0 : _i.postal_code) ?? "",
      phone: ((_j = order.billing_address) == null ? void 0 : _j.phone) ?? ""
    },
    resolver: t(schema$5)
  });
  const { mutateAsync, isPending } = useUpdateDraftOrder(order.id);
  const { handleSuccess } = useRouteModal();
  const onSubmit = form.handleSubmit(async (data) => {
    await mutateAsync(
      { billing_address: data },
      {
        onSuccess: () => {
          handleSuccess();
        },
        onError: (error) => {
          toast.error(error.message);
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      className: "flex flex-1 flex-col overflow-hidden",
      onSubmit,
      children: [
        (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { className: "flex flex-col gap-y-6 overflow-y-auto", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-4", children: [
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control: form.control,
              name: "country_code",
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Country" }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(CountrySelect, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          ),
          (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
            (0, import_jsx_runtime.jsx)(
              Form$2.Field,
              {
                control: form.control,
                name: "first_name",
                render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "First name" }),
                  (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                  (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
                ] })
              }
            ),
            (0, import_jsx_runtime.jsx)(
              Form$2.Field,
              {
                control: form.control,
                name: "last_name",
                render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Last name" }),
                  (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                  (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
                ] })
              }
            )
          ] }),
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control: form.control,
              name: "company",
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { optional: true, children: "Company" }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          ),
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control: form.control,
              name: "address_1",
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Address" }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          ),
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control: form.control,
              name: "address_2",
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { optional: true, children: "Apartment, suite, etc." }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          ),
          (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
            (0, import_jsx_runtime.jsx)(
              Form$2.Field,
              {
                control: form.control,
                name: "postal_code",
                render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Postal code" }),
                  (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                  (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
                ] })
              }
            ),
            (0, import_jsx_runtime.jsx)(
              Form$2.Field,
              {
                control: form.control,
                name: "city",
                render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "City" }),
                  (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                  (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
                ] })
              }
            )
          ] }),
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control: form.control,
              name: "province",
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { optional: true, children: "Province / State" }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          ),
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control: form.control,
              name: "phone",
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { optional: true, children: "Phone" }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          )
        ] }) }),
        (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex justify-end gap-2", children: [
          (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: "Cancel" }) }),
          (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", isLoading: isPending, children: "Save" })
        ] }) })
      ]
    }
  ) });
};
var schema$5 = addressSchema;
var CustomItems = () => {
  return (0, import_jsx_runtime.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime.jsx)(RouteDrawer.Header, { children: (0, import_jsx_runtime.jsx)(RouteDrawer.Title, { asChild: true, children: (0, import_jsx_runtime.jsx)(Heading, { children: "Edit Custom Items" }) }) }),
    (0, import_jsx_runtime.jsx)(CustomItemsForm, {})
  ] });
};
var CustomItemsForm = () => {
  const form = useForm({
    resolver: t(schema$4)
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(KeyboundForm, { className: "flex flex-1 flex-col", children: [
    (0, import_jsx_runtime.jsx)(RouteDrawer.Body, {}),
    (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex justify-end gap-2", children: [
      (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: "Cancel" }) }),
      (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", children: "Save" })
    ] }) })
  ] }) });
};
var schema$4 = objectType({
  email: stringType().email()
});
var Email = () => {
  const { id } = useParams();
  const { order, isPending, isError, error } = useOrder(id, {
    fields: "+email"
  });
  if (isError) {
    throw error;
  }
  const isReady = !isPending && !!order;
  return (0, import_jsx_runtime.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime.jsxs)(RouteDrawer.Header, { children: [
      (0, import_jsx_runtime.jsx)(RouteDrawer.Title, { asChild: true, children: (0, import_jsx_runtime.jsx)(Heading, { children: "Edit Email" }) }),
      (0, import_jsx_runtime.jsx)(RouteDrawer.Description, { asChild: true, children: (0, import_jsx_runtime.jsx)("span", { className: "sr-only", children: "Edit the email for the draft order" }) })
    ] }),
    isReady && (0, import_jsx_runtime.jsx)(EmailForm, { order })
  ] });
};
var EmailForm = ({ order }) => {
  const form = useForm({
    defaultValues: {
      email: order.email ?? ""
    },
    resolver: t(schema$3)
  });
  const { mutateAsync, isPending } = useUpdateDraftOrder(order.id);
  const { handleSuccess } = useRouteModal();
  const onSubmit = form.handleSubmit(async (data) => {
    await mutateAsync(
      { email: data.email },
      {
        onSuccess: () => {
          handleSuccess();
        },
        onError: (error) => {
          toast.error(error.message);
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      className: "flex flex-1 flex-col overflow-hidden",
      onSubmit,
      children: [
        (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { className: "flex flex-col gap-y-6 overflow-y-auto", children: (0, import_jsx_runtime.jsx)(
          Form$2.Field,
          {
            control: form.control,
            name: "email",
            render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Email" }),
              (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
              (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
            ] })
          }
        ) }),
        (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex justify-end gap-2", children: [
          (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: "Cancel" }) }),
          (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", isLoading: isPending, children: "Save" })
        ] }) })
      ]
    }
  ) });
};
var schema$3 = objectType({
  email: stringType().email()
});
var InlineTip = (0, import_react.forwardRef)(
  ({ variant = "tip", label, className, children, ...props }, ref) => {
    const labelValue = label || (variant === "warning" ? "Warning" : "Tip");
    return (0, import_jsx_runtime.jsxs)(
      "div",
      {
        ref,
        className: clx(
          "bg-ui-bg-component txt-small text-ui-fg-subtle grid grid-cols-[4px_1fr] items-start gap-3 rounded-lg border p-3",
          className
        ),
        ...props,
        children: [
          (0, import_jsx_runtime.jsx)(
            "div",
            {
              role: "presentation",
              className: clx("w-4px bg-ui-tag-neutral-icon h-full rounded-full", {
                "bg-ui-tag-orange-icon": variant === "warning"
              })
            }
          ),
          (0, import_jsx_runtime.jsxs)("div", { className: "text-pretty", children: [
            (0, import_jsx_runtime.jsxs)("strong", { className: "txt-small-plus text-ui-fg-base", children: [
              labelValue,
              ":"
            ] }),
            " ",
            children
          ] })
        ]
      }
    );
  }
);
InlineTip.displayName = "InlineTip";
var MetadataFieldSchema = objectType({
  key: stringType(),
  disabled: booleanType().optional(),
  value: anyType()
});
var MetadataSchema = objectType({
  metadata: arrayType(MetadataFieldSchema)
});
var Metadata = () => {
  const { id } = useParams();
  const { order, isPending, isError, error } = useOrder(id, {
    fields: "metadata"
  });
  if (isError) {
    throw error;
  }
  const isReady = !isPending && !!order;
  return (0, import_jsx_runtime.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime.jsxs)(RouteDrawer.Header, { children: [
      (0, import_jsx_runtime.jsx)(RouteDrawer.Title, { asChild: true, children: (0, import_jsx_runtime.jsx)(Heading, { children: "Metadata" }) }),
      (0, import_jsx_runtime.jsx)(RouteDrawer.Description, { asChild: true, children: (0, import_jsx_runtime.jsx)("span", { className: "sr-only", children: "Add metadata to the draft order." }) })
    ] }),
    !isReady ? (0, import_jsx_runtime.jsx)(PlaceholderInner, {}) : (0, import_jsx_runtime.jsx)(MetadataForm, { orderId: id, metadata: order == null ? void 0 : order.metadata })
  ] });
};
var METADATA_KEY_LABEL_ID = "metadata-form-key-label";
var METADATA_VALUE_LABEL_ID = "metadata-form-value-label";
var MetadataForm = ({ orderId, metadata }) => {
  const { handleSuccess } = useRouteModal();
  const hasUneditableRows = getHasUneditableRows(metadata);
  const { mutateAsync, isPending } = useUpdateDraftOrder(orderId);
  const form = useForm({
    defaultValues: {
      metadata: getDefaultValues(metadata)
    },
    resolver: t(MetadataSchema)
  });
  const handleSubmit = form.handleSubmit(async (data) => {
    const parsedData = parseValues(data);
    await mutateAsync(
      {
        metadata: parsedData
      },
      {
        onSuccess: () => {
          toast.success("Metadata updated");
          handleSuccess();
        },
        onError: (error) => {
          toast.error(error.message);
        }
      }
    );
  });
  const { fields, insert, remove } = useFieldArray({
    control: form.control,
    name: "metadata"
  });
  function deleteRow(index) {
    remove(index);
    if (fields.length === 1) {
      insert(0, {
        key: "",
        value: "",
        disabled: false
      });
    }
  }
  function insertRow(index, position) {
    insert(index + (position === "above" ? 0 : 1), {
      key: "",
      value: "",
      disabled: false
    });
  }
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      onSubmit: handleSubmit,
      className: "flex flex-1 flex-col overflow-hidden",
      children: [
        (0, import_jsx_runtime.jsxs)(RouteDrawer.Body, { className: "flex flex-1 flex-col gap-y-8 overflow-y-auto", children: [
          (0, import_jsx_runtime.jsxs)("div", { className: "bg-ui-bg-base shadow-elevation-card-rest grid grid-cols-1 divide-y rounded-lg", children: [
            (0, import_jsx_runtime.jsxs)("div", { className: "bg-ui-bg-subtle grid grid-cols-2 divide-x rounded-t-lg", children: [
              (0, import_jsx_runtime.jsx)("div", { className: "txt-compact-small-plus text-ui-fg-subtle px-2 py-1.5", children: (0, import_jsx_runtime.jsx)("label", { id: METADATA_KEY_LABEL_ID, children: "Key" }) }),
              (0, import_jsx_runtime.jsx)("div", { className: "txt-compact-small-plus text-ui-fg-subtle px-2 py-1.5", children: (0, import_jsx_runtime.jsx)("label", { id: METADATA_VALUE_LABEL_ID, children: "Value" }) })
            ] }),
            fields.map((field, index) => {
              const isDisabled = field.disabled || false;
              let placeholder = "-";
              if (typeof field.value === "object") {
                placeholder = "{ ... }";
              }
              if (Array.isArray(field.value)) {
                placeholder = "[ ... ]";
              }
              return (0, import_jsx_runtime.jsx)(
                ConditionalTooltip,
                {
                  showTooltip: isDisabled,
                  content: "This row is disabled because it contains non-primitive data.",
                  children: (0, import_jsx_runtime.jsxs)("div", { className: "group/table relative", children: [
                    (0, import_jsx_runtime.jsxs)(
                      "div",
                      {
                        className: clx("grid grid-cols-2 divide-x", {
                          "overflow-hidden rounded-b-lg": index === fields.length - 1
                        }),
                        children: [
                          (0, import_jsx_runtime.jsx)(
                            Form$2.Field,
                            {
                              control: form.control,
                              name: `metadata.${index}.key`,
                              render: ({ field: field2 }) => {
                                return (0, import_jsx_runtime.jsx)(Form$2.Item, { children: (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(
                                  GridInput,
                                  {
                                    "aria-labelledby": METADATA_KEY_LABEL_ID,
                                    ...field2,
                                    disabled: isDisabled,
                                    placeholder: "Key"
                                  }
                                ) }) });
                              }
                            }
                          ),
                          (0, import_jsx_runtime.jsx)(
                            Form$2.Field,
                            {
                              control: form.control,
                              name: `metadata.${index}.value`,
                              render: ({ field: { value, ...field2 } }) => {
                                return (0, import_jsx_runtime.jsx)(Form$2.Item, { children: (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(
                                  GridInput,
                                  {
                                    "aria-labelledby": METADATA_VALUE_LABEL_ID,
                                    ...field2,
                                    value: isDisabled ? placeholder : value,
                                    disabled: isDisabled,
                                    placeholder: "Value"
                                  }
                                ) }) });
                              }
                            }
                          )
                        ]
                      }
                    ),
                    (0, import_jsx_runtime.jsxs)(DropdownMenu, { children: [
                      (0, import_jsx_runtime.jsx)(
                        DropdownMenu.Trigger,
                        {
                          className: clx(
                            "invisible absolute inset-y-0 -right-2.5 my-auto group-hover/table:visible data-[state='open']:visible",
                            {
                              hidden: isDisabled
                            }
                          ),
                          disabled: isDisabled,
                          asChild: true,
                          children: (0, import_jsx_runtime.jsx)(IconButton, { size: "2xsmall", children: (0, import_jsx_runtime.jsx)(EllipsisVertical, {}) })
                        }
                      ),
                      (0, import_jsx_runtime.jsxs)(DropdownMenu.Content, { children: [
                        (0, import_jsx_runtime.jsxs)(
                          DropdownMenu.Item,
                          {
                            className: "gap-x-2",
                            onClick: () => insertRow(index, "above"),
                            children: [
                              (0, import_jsx_runtime.jsx)(ArrowUpMini, { className: "text-ui-fg-subtle" }),
                              "Insert row above"
                            ]
                          }
                        ),
                        (0, import_jsx_runtime.jsxs)(
                          DropdownMenu.Item,
                          {
                            className: "gap-x-2",
                            onClick: () => insertRow(index, "below"),
                            children: [
                              (0, import_jsx_runtime.jsx)(ArrowDownMini, { className: "text-ui-fg-subtle" }),
                              "Insert row below"
                            ]
                          }
                        ),
                        (0, import_jsx_runtime.jsx)(DropdownMenu.Separator, {}),
                        (0, import_jsx_runtime.jsxs)(
                          DropdownMenu.Item,
                          {
                            className: "gap-x-2",
                            onClick: () => deleteRow(index),
                            children: [
                              (0, import_jsx_runtime.jsx)(Trash, { className: "text-ui-fg-subtle" }),
                              "Delete row"
                            ]
                          }
                        )
                      ] })
                    ] })
                  ] })
                },
                field.id
              );
            })
          ] }),
          hasUneditableRows && (0, import_jsx_runtime.jsx)(InlineTip, { variant: "warning", label: "Some rows are disabled", children: "This object contains non-primitive metadata, such as arrays or objects, that can't be edited here. To edit the disabled rows, use the API directly." })
        ] }),
        (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", type: "button", children: "Cancel" }) }),
          (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", isLoading: isPending, children: "Save" })
        ] }) })
      ]
    }
  ) });
};
var GridInput = (0, import_react.forwardRef)(({ className, ...props }, ref) => {
  return (0, import_jsx_runtime.jsx)(
    "input",
    {
      ref,
      ...props,
      autoComplete: "off",
      className: clx(
        "txt-compact-small text-ui-fg-base placeholder:text-ui-fg-muted disabled:text-ui-fg-disabled disabled:bg-ui-bg-base bg-transparent px-2 py-1.5 outline-none",
        className
      )
    }
  );
});
GridInput.displayName = "MetadataForm.GridInput";
var PlaceholderInner = () => {
  return (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-1 flex-col overflow-hidden", children: [
    (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { children: (0, import_jsx_runtime.jsx)(Skeleton, { className: "h-[148ox] w-full rounded-lg" }) }),
    (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
      (0, import_jsx_runtime.jsx)(Skeleton, { className: "h-7 w-12 rounded-md" }),
      (0, import_jsx_runtime.jsx)(Skeleton, { className: "h-7 w-12 rounded-md" })
    ] }) })
  ] });
};
var EDITABLE_TYPES = ["string", "number", "boolean"];
function getDefaultValues(metadata) {
  if (!metadata || !Object.keys(metadata).length) {
    return [
      {
        key: "",
        value: "",
        disabled: false
      }
    ];
  }
  return Object.entries(metadata).map(([key, value]) => {
    if (!EDITABLE_TYPES.includes(typeof value)) {
      return {
        key,
        value,
        disabled: true
      };
    }
    let stringValue = value;
    if (typeof value !== "string") {
      stringValue = JSON.stringify(value);
    }
    return {
      key,
      value: stringValue,
      original_key: key
    };
  });
}
function parseValues(values) {
  const metadata = values.metadata;
  const isEmpty = !metadata.length || metadata.length === 1 && !metadata[0].key && !metadata[0].value;
  if (isEmpty) {
    return null;
  }
  const update = {};
  metadata.forEach((field) => {
    let key = field.key;
    let value = field.value;
    const disabled = field.disabled;
    if (!key || !value) {
      return;
    }
    if (disabled) {
      update[key] = value;
      return;
    }
    key = key.trim();
    value = value.trim();
    if (value === "true") {
      update[key] = true;
    } else if (value === "false") {
      update[key] = false;
    } else {
      const parsedNumber = parseFloat(value);
      if (!isNaN(parsedNumber)) {
        update[key] = parsedNumber;
      } else {
        update[key] = value;
      }
    }
  });
  return update;
}
function getHasUneditableRows(metadata) {
  if (!metadata) {
    return false;
  }
  return Object.values(metadata).some(
    (value) => !EDITABLE_TYPES.includes(typeof value)
  );
}
var PROMOTION_QUERY_KEY = "promotions";
var promotionsQueryKeys = {
  list: (query2) => [
    PROMOTION_QUERY_KEY,
    query2 ? query2 : void 0
  ],
  detail: (id, query2) => [
    PROMOTION_QUERY_KEY,
    id,
    query2 ? query2 : void 0
  ]
};
var usePromotions = (query2, options) => {
  const { data, ...rest } = useQuery({
    queryKey: promotionsQueryKeys.list(query2),
    queryFn: async () => sdk.admin.promotion.list(query2),
    ...options
  });
  return { ...data, ...rest };
};
var useCancelOrderEdit = ({ preview }) => {
  const { mutateAsync: cancelOrderEdit } = useDraftOrderCancelEdit(preview == null ? void 0 : preview.id);
  const onCancel = (0, import_react.useCallback)(async () => {
    if (!preview) {
      return true;
    }
    let res = false;
    await cancelOrderEdit(void 0, {
      onError: (e) => {
        toast.error(e.message);
      },
      onSuccess: () => {
        res = true;
      }
    });
    return res;
  }, [preview, cancelOrderEdit]);
  return { onCancel };
};
var IS_REQUEST_RUNNING = false;
var useInitiateOrderEdit = ({
  preview
}) => {
  const navigate = useNavigate();
  const { mutateAsync } = useDraftOrderBeginEdit(preview == null ? void 0 : preview.id);
  (0, import_react.useEffect)(() => {
    async function run() {
      if (IS_REQUEST_RUNNING || !preview) {
        return;
      }
      if (preview.order_change) {
        return;
      }
      IS_REQUEST_RUNNING = true;
      await mutateAsync(void 0, {
        onError: (e) => {
          toast.error(e.message);
          navigate(`/draft-orders/${preview.id}`, { replace: true });
          return;
        }
      });
      IS_REQUEST_RUNNING = false;
    }
    run();
  }, [preview, navigate, mutateAsync]);
};
var Promotions = () => {
  const { id } = useParams();
  const {
    order: preview,
    isError: isPreviewError,
    error: previewError
  } = useOrderPreview(id, void 0);
  useInitiateOrderEdit({ preview });
  const { onCancel } = useCancelOrderEdit({ preview });
  if (isPreviewError) {
    throw previewError;
  }
  const isReady = !!preview;
  return (0, import_jsx_runtime.jsxs)(RouteDrawer, { onClose: onCancel, children: [
    (0, import_jsx_runtime.jsx)(RouteDrawer.Header, { children: (0, import_jsx_runtime.jsx)(RouteDrawer.Title, { asChild: true, children: (0, import_jsx_runtime.jsx)(Heading, { children: "Edit Promotions" }) }) }),
    isReady && (0, import_jsx_runtime.jsx)(PromotionForm, { preview })
  ] });
};
var PromotionForm = ({ preview }) => {
  const { items, shipping_methods } = preview;
  const [isSubmitting, setIsSubmitting] = (0, import_react.useState)(false);
  const [comboboxValue, setComboboxValue] = (0, import_react.useState)("");
  const { handleSuccess } = useRouteModal();
  const { mutateAsync: addPromotions, isPending: isAddingPromotions } = useDraftOrderAddPromotions(preview.id);
  const promoCodes = getPromotionCodes(items, shipping_methods);
  const { promotions, isPending, isError, error } = usePromotions(
    {
      code: promoCodes
    },
    {
      enabled: !!promoCodes.length
    }
  );
  const comboboxData = useComboboxData({
    queryKey: ["promotions", "combobox", promoCodes],
    queryFn: async (params) => {
      return await sdk.admin.promotion.list({
        ...params,
        code: {
          $nin: promoCodes
        }
      });
    },
    getOptions: (data) => {
      return data.promotions.map((promotion) => ({
        label: promotion.code,
        value: promotion.code
      }));
    }
  });
  const add = async (value) => {
    if (!value) {
      return;
    }
    addPromotions(
      {
        promo_codes: [value]
      },
      {
        onError: (e) => {
          toast.error(e.message);
          comboboxData.onSearchValueChange("");
          setComboboxValue("");
        },
        onSuccess: () => {
          comboboxData.onSearchValueChange("");
          setComboboxValue("");
        }
      }
    );
  };
  const { mutateAsync: confirmOrderEdit } = useDraftOrderConfirmEdit(preview.id);
  const { mutateAsync: requestOrderEdit } = useOrderEditRequest(preview.id);
  const onSubmit = async () => {
    setIsSubmitting(true);
    let requestSucceeded = false;
    await requestOrderEdit(void 0, {
      onError: (e) => {
        toast.error(e.message);
      },
      onSuccess: () => {
        requestSucceeded = true;
      }
    });
    if (!requestSucceeded) {
      setIsSubmitting(false);
      return;
    }
    await confirmOrderEdit(void 0, {
      onError: (e) => {
        toast.error(e.message);
      },
      onSuccess: () => {
        handleSuccess();
      },
      onSettled: () => {
        setIsSubmitting(false);
      }
    });
  };
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime.jsxs)(KeyboundForm, { className: "flex flex-1 flex-col", onSubmit, children: [
    (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-4", children: [
      (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-3", children: [
        (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col", children: [
          (0, import_jsx_runtime.jsx)(Label, { size: "small", weight: "plus", htmlFor: "promotion-combobox", children: "Apply promotions" }),
          (0, import_jsx_runtime.jsx)(Hint, { id: "promotion-combobox-hint", children: "Manage promotions that should be applied to the order." })
        ] }),
        (0, import_jsx_runtime.jsx)(
          Combobox2,
          {
            id: "promotion-combobox",
            "aria-describedby": "promotion-combobox-hint",
            isFetchingNextPage: comboboxData.isFetchingNextPage,
            fetchNextPage: comboboxData.fetchNextPage,
            options: comboboxData.options,
            onSearchValueChange: comboboxData.onSearchValueChange,
            searchValue: comboboxData.searchValue,
            disabled: comboboxData.disabled || isAddingPromotions,
            onChange: add,
            value: comboboxValue
          }
        )
      ] }),
      (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
      (0, import_jsx_runtime.jsx)("div", { className: "flex flex-col gap-2", children: promotions == null ? void 0 : promotions.map((promotion) => (0, import_jsx_runtime.jsx)(
        PromotionItem,
        {
          promotion,
          orderId: preview.id,
          isLoading: isPending
        },
        promotion.id
      )) })
    ] }) }),
    (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex justify-end gap-2", children: [
      (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: "Cancel" }) }),
      (0, import_jsx_runtime.jsx)(
        Button,
        {
          size: "small",
          type: "submit",
          isLoading: isSubmitting || isAddingPromotions,
          children: "Save"
        }
      )
    ] }) })
  ] });
};
var PromotionItem = ({
  promotion,
  orderId,
  isLoading
}) => {
  var _a;
  const { mutateAsync: removePromotions, isPending } = useDraftOrderRemovePromotions(orderId);
  const onRemove = async () => {
    removePromotions(
      {
        promo_codes: [promotion.code]
      },
      {
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  };
  const displayValue = getDisplayValue(promotion);
  return (0, import_jsx_runtime.jsxs)(
    "div",
    {
      className: clx(
        "px-3 py-2 rounded-lg bg-ui-bg-component shadow-elevation-card-rest flex items-center justify-between",
        {
          "animate-pulse": isLoading
        }
      ),
      children: [
        (0, import_jsx_runtime.jsxs)("div", { children: [
          (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: promotion.code }),
          (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-1.5 text-ui-fg-subtle", children: [
            displayValue && (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-1.5", children: [
              (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", children: displayValue }),
              (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", children: "·" })
            ] }),
            (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", className: "capitalize", children: (_a = promotion.application_method) == null ? void 0 : _a.allocation })
          ] })
        ] }),
        (0, import_jsx_runtime.jsx)(
          IconButton,
          {
            size: "small",
            type: "button",
            variant: "transparent",
            onClick: onRemove,
            isLoading: isPending || isLoading,
            children: (0, import_jsx_runtime.jsx)(XMark, {})
          }
        )
      ]
    },
    promotion.id
  );
};
function getDisplayValue(promotion) {
  var _a, _b, _c, _d;
  const value = (_a = promotion.application_method) == null ? void 0 : _a.value;
  if (!value) {
    return null;
  }
  if (((_b = promotion.application_method) == null ? void 0 : _b.type) === "fixed") {
    const currency = (_c = promotion.application_method) == null ? void 0 : _c.currency_code;
    if (!currency) {
      return null;
    }
    return getLocaleAmount(value, currency);
  } else if (((_d = promotion.application_method) == null ? void 0 : _d.type) === "percentage") {
    return formatPercentage(value);
  }
  return null;
}
var formatter = new Intl.NumberFormat([], {
  style: "percent",
  minimumFractionDigits: 2
});
var formatPercentage = (value, isPercentageValue = false) => {
  let val = value || 0;
  if (!isPercentageValue) {
    val = val / 100;
  }
  return formatter.format(val);
};
function getPromotionCodes(items, shippingMethods) {
  const codes = /* @__PURE__ */ new Set();
  for (const item of items) {
    if (item.adjustments) {
      for (const adjustment of item.adjustments) {
        if (adjustment.code) {
          codes.add(adjustment.code);
        }
      }
    }
  }
  for (const shippingMethod of shippingMethods) {
    if (shippingMethod.adjustments) {
      for (const adjustment of shippingMethod.adjustments) {
        if (adjustment.code) {
          codes.add(adjustment.code);
        }
      }
    }
  }
  return Array.from(codes);
}
var SalesChannel = () => {
  const { id } = useParams();
  const { draft_order, isPending, isError, error } = useDraftOrder(
    id,
    {
      fields: "+sales_channel_id"
    },
    {
      enabled: !!id
    }
  );
  if (isError) {
    throw error;
  }
  const ISrEADY = !!draft_order && !isPending;
  return (0, import_jsx_runtime.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime.jsxs)(RouteDrawer.Header, { children: [
      (0, import_jsx_runtime.jsx)(RouteDrawer.Title, { asChild: true, children: (0, import_jsx_runtime.jsx)(Heading, { children: "Edit Sales Channel" }) }),
      (0, import_jsx_runtime.jsx)(RouteDrawer.Description, { asChild: true, children: (0, import_jsx_runtime.jsx)("span", { className: "sr-only", children: "Update which sales channel the draft order is associated with" }) })
    ] }),
    ISrEADY && (0, import_jsx_runtime.jsx)(SalesChannelForm, { order: draft_order })
  ] });
};
var SalesChannelForm = ({ order }) => {
  const form = useForm({
    defaultValues: {
      sales_channel_id: order.sales_channel_id || ""
    },
    resolver: t(schema$2)
  });
  const { mutateAsync, isPending } = useUpdateDraftOrder(order.id);
  const { handleSuccess } = useRouteModal();
  const onSubmit = form.handleSubmit(async (data) => {
    await mutateAsync(
      {
        sales_channel_id: data.sales_channel_id
      },
      {
        onSuccess: () => {
          toast.success("Sales channel updated");
          handleSuccess();
        },
        onError: (error) => {
          toast.error(error.message);
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      className: "flex flex-1 flex-col overflow-hidden",
      onSubmit,
      children: [
        (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { className: "flex flex-col gap-y-6 overflow-y-auto", children: (0, import_jsx_runtime.jsx)(SalesChannelField, { control: form.control, order }) }),
        (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex justify-end gap-2", children: [
          (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: "Cancel" }) }),
          (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", isLoading: isPending, children: "Save" })
        ] }) })
      ]
    }
  ) });
};
var SalesChannelField = ({ control, order }) => {
  const salesChannels = useComboboxData({
    queryFn: async (params) => {
      return await sdk.admin.salesChannel.list(params);
    },
    queryKey: ["sales-channels"],
    getOptions: (data) => {
      return data.sales_channels.map((salesChannel) => ({
        label: salesChannel.name,
        value: salesChannel.id
      }));
    },
    defaultValue: order.sales_channel_id || void 0
  });
  return (0, import_jsx_runtime.jsx)(
    Form$2.Field,
    {
      control,
      name: "sales_channel_id",
      render: ({ field }) => {
        return (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
          (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Sales Channel" }),
          (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(
            Combobox2,
            {
              options: salesChannels.options,
              fetchNextPage: salesChannels.fetchNextPage,
              isFetchingNextPage: salesChannels.isFetchingNextPage,
              searchValue: salesChannels.searchValue,
              onSearchValueChange: salesChannels.onSearchValueChange,
              placeholder: "Select sales channel",
              ...field
            }
          ) }),
          (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
        ] });
      }
    }
  );
};
var schema$2 = objectType({
  sales_channel_id: stringType().min(1)
});
function convertNumber(value) {
  return typeof value === "string" ? Number(value.replace(",", ".")) : value;
}
var STACKED_FOCUS_MODAL_ID = "shipping-form";
var Shipping = () => {
  var _a;
  const { id } = useParams();
  const { order, isPending, isError, error } = useOrder(id, {
    fields: "+items.*,+items.variant.*,+items.variant.product.*,+items.variant.product.shipping_profile.*,+currency_code"
  });
  const {
    order: preview,
    isPending: isPreviewPending,
    isError: isPreviewError,
    error: previewError
  } = useOrderPreview(id);
  useInitiateOrderEdit({ preview });
  const { onCancel } = useCancelOrderEdit({ preview });
  if (isError) {
    throw error;
  }
  if (isPreviewError) {
    throw previewError;
  }
  const orderHasItems = (((_a = order == null ? void 0 : order.items) == null ? void 0 : _a.length) || 0) > 0;
  const isReady = preview && !isPreviewPending && order && !isPending;
  return (0, import_jsx_runtime.jsx)(RouteFocusModal, { onClose: onCancel, children: !orderHasItems ? (0, import_jsx_runtime.jsxs)("div", { className: "flex h-full flex-col overflow-hidden ", children: [
    (0, import_jsx_runtime.jsx)(RouteFocusModal.Header, {}),
    (0, import_jsx_runtime.jsx)(RouteFocusModal.Body, { className: "flex flex-1 flex-col overflow-hidden", children: (0, import_jsx_runtime.jsx)("div", { className: "flex flex-1 flex-col items-center overflow-y-auto", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex w-full max-w-[720px] flex-col gap-y-6 py-16 px-6", children: [
      (0, import_jsx_runtime.jsx)(RouteFocusModal.Title, { asChild: true, children: (0, import_jsx_runtime.jsx)(Heading, { children: "Shipping" }) }),
      (0, import_jsx_runtime.jsx)(RouteFocusModal.Description, { asChild: true, children: (0, import_jsx_runtime.jsx)(Text, { size: "small", className: "text-ui-fg-subtle", children: "This draft order currently has no items. Add items to the order before adding shipping." }) })
    ] }) }) }),
    (0, import_jsx_runtime.jsx)(RouteFocusModal.Footer, { children: (0, import_jsx_runtime.jsx)(RouteFocusModal.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", type: "button", children: "Cancel" }) }) })
  ] }) : isReady ? (0, import_jsx_runtime.jsx)(ShippingForm, { preview, order }) : (0, import_jsx_runtime.jsxs)("div", { children: [
    (0, import_jsx_runtime.jsx)(RouteFocusModal.Title, { asChild: true, children: (0, import_jsx_runtime.jsx)("span", { className: "sr-only", children: "Edit Shipping" }) }),
    (0, import_jsx_runtime.jsx)(RouteFocusModal.Description, { asChild: true, children: (0, import_jsx_runtime.jsx)("span", { className: "sr-only", children: "Loading data for the draft order, please wait..." }) })
  ] }) });
};
var ShippingForm = ({ preview, order }) => {
  var _a;
  const { setIsOpen } = useStackedModal();
  const [isSubmitting, setIsSubmitting] = (0, import_react.useState)(false);
  const [data, setData] = (0, import_react.useState)(null);
  const appliedShippingOptionIds = (_a = preview.shipping_methods) == null ? void 0 : _a.map((method) => method.shipping_option_id).filter(Boolean);
  const { shipping_options } = useShippingOptions(
    {
      id: appliedShippingOptionIds,
      fields: "+service_zone.*,+service_zone.fulfillment_set.*,+service_zone.fulfillment_set.location.*"
    },
    {
      enabled: appliedShippingOptionIds.length > 0
    }
  );
  const uniqueShippingProfiles = (0, import_react.useMemo)(() => {
    const profiles = /* @__PURE__ */ new Map();
    getUniqueShippingProfiles(order.items).forEach((profile) => {
      profiles.set(profile.id, profile);
    });
    shipping_options == null ? void 0 : shipping_options.forEach((option) => {
      profiles.set(option.shipping_profile_id, option.shipping_profile);
    });
    return Array.from(profiles.values());
  }, [order.items, shipping_options]);
  const { handleSuccess } = useRouteModal();
  const { mutateAsync: confirmOrderEdit } = useDraftOrderConfirmEdit(preview.id);
  const { mutateAsync: requestOrderEdit } = useDraftOrderRequestEdit(preview.id);
  const { mutateAsync: removeShippingMethod } = useDraftOrderRemoveShippingMethod(preview.id);
  const { mutateAsync: removeActionShippingMethod } = useDraftOrderRemoveActionShippingMethod(preview.id);
  const onSubmit = async () => {
    setIsSubmitting(true);
    let requestSucceeded = false;
    await requestOrderEdit(void 0, {
      onError: (e) => {
        toast.error(`Failed to request order edit: ${e.message}`);
      },
      onSuccess: () => {
        requestSucceeded = true;
      }
    });
    if (!requestSucceeded) {
      setIsSubmitting(false);
      return;
    }
    await confirmOrderEdit(void 0, {
      onError: (e) => {
        toast.error(`Failed to confirm order edit: ${e.message}`);
      },
      onSuccess: () => {
        handleSuccess();
      },
      onSettled: () => {
        setIsSubmitting(false);
      }
    });
  };
  const onKeydown = (0, import_react.useCallback)(
    (e) => {
      if (e.key === "Enter" && (e.ctrlKey || e.metaKey)) {
        if (data || isSubmitting) {
          return;
        }
        onSubmit();
      }
    },
    [data, isSubmitting, onSubmit]
  );
  (0, import_react.useEffect)(() => {
    document.addEventListener("keydown", onKeydown);
    return () => {
      document.removeEventListener("keydown", onKeydown);
    };
  }, [onKeydown]);
  return (0, import_jsx_runtime.jsxs)("div", { className: "flex h-full flex-col overflow-hidden", children: [
    (0, import_jsx_runtime.jsx)(RouteFocusModal.Header, {}),
    (0, import_jsx_runtime.jsxs)(RouteFocusModal.Body, { className: "flex flex-1 flex-col overflow-hidden", children: [
      (0, import_jsx_runtime.jsx)("div", { className: "flex flex-1 flex-col items-center overflow-y-auto", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex w-full max-w-[720px] flex-col gap-y-6 py-16 px-6", children: [
        (0, import_jsx_runtime.jsxs)("div", { children: [
          (0, import_jsx_runtime.jsx)(RouteFocusModal.Title, { asChild: true, children: (0, import_jsx_runtime.jsx)(Heading, { children: "Shipping" }) }),
          (0, import_jsx_runtime.jsx)(RouteFocusModal.Description, { asChild: true, children: (0, import_jsx_runtime.jsx)(Text, { size: "small", className: "text-ui-fg-subtle", children: "Choose which shipping method(s) to use for the items in the order." }) })
        ] }),
        (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
        (0, import_jsx_runtime.jsx)(dist_exports3.Root, { type: "multiple", children: (0, import_jsx_runtime.jsxs)("div", { className: "bg-ui-bg-subtle rounded-xl shadow-elevation-card-rest", children: [
          (0, import_jsx_runtime.jsxs)("div", { className: "px-4 py-2 flex items-center justify-between", children: [
            (0, import_jsx_runtime.jsx)(
              Text,
              {
                size: "xsmall",
                weight: "plus",
                className: "text-ui-fg-muted",
                children: "Shipping profile"
              }
            ),
            (0, import_jsx_runtime.jsx)(
              Text,
              {
                size: "xsmall",
                weight: "plus",
                className: "text-ui-fg-muted",
                children: "Action"
              }
            )
          ] }),
          (0, import_jsx_runtime.jsx)("div", { className: "px-[5px] pb-[5px]", children: uniqueShippingProfiles.map((profile) => {
            var _a2, _b, _c, _d, _e, _f, _g;
            const items = getItemsWithShippingProfile(
              profile.id,
              order.items
            );
            const hasItems = items.length > 0;
            const shippingOption = shipping_options == null ? void 0 : shipping_options.find(
              (option) => option.shipping_profile_id === profile.id
            );
            const shippingMethod = preview.shipping_methods.find(
              (method) => method.shipping_option_id === (shippingOption == null ? void 0 : shippingOption.id)
            );
            const addShippingMethodAction = (_a2 = shippingMethod == null ? void 0 : shippingMethod.actions) == null ? void 0 : _a2.find(
              (action) => action.action === "SHIPPING_ADD"
            );
            return (0, import_jsx_runtime.jsxs)(
              dist_exports3.Item,
              {
                value: profile.id,
                className: "bg-ui-bg-base shadow-elevation-card-rest rounded-lg",
                children: [
                  (0, import_jsx_runtime.jsxs)("div", { className: "px-3 py-2 flex items-center justify-between gap-3", children: [
                    (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-3 w-full overflow-hidden", children: [
                      (0, import_jsx_runtime.jsx)(dist_exports3.Trigger, { asChild: true, children: (0, import_jsx_runtime.jsx)(
                        IconButton,
                        {
                          size: "2xsmall",
                          variant: "transparent",
                          className: "group/trigger",
                          disabled: !hasItems,
                          children: (0, import_jsx_runtime.jsx)(TriangleRightMini, { className: "group-data-[state=open]/trigger:rotate-90 transition-transform" })
                        }
                      ) }),
                      !shippingOption ? (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-3", children: [
                        (0, import_jsx_runtime.jsx)("div", { className: "size-7 rounded-md shadow-borders-base flex items-center justify-center", children: (0, import_jsx_runtime.jsx)("div", { className: "size-6 rounded bg-ui-bg-component-hover flex items-center justify-center", children: (0, import_jsx_runtime.jsx)(Shopping, { className: "text-ui-fg-subtle" }) }) }),
                        (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col flex-1", children: [
                          (0, import_jsx_runtime.jsx)(
                            Text,
                            {
                              size: "small",
                              weight: "plus",
                              leading: "compact",
                              children: profile.name
                            }
                          ),
                          (0, import_jsx_runtime.jsxs)(
                            Text,
                            {
                              size: "small",
                              leading: "compact",
                              className: "text-ui-fg-subtle",
                              children: [
                                items.length,
                                " ",
                                pluralize(items.length, "items", "item")
                              ]
                            }
                          )
                        ] })
                      ] }) : (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-[5px] max-sm:flex-col max-sm:items-start flex-1 w-full overflow-hidden", children: [
                        (0, import_jsx_runtime.jsx)(
                          Tooltip,
                          {
                            content: (0, import_jsx_runtime.jsx)("ul", { children: items.map((item) => {
                              var _a3, _b2, _c2;
                              return (0, import_jsx_runtime.jsx)(
                                "li",
                                {
                                  children: `${item.quantity}x ${(_b2 = (_a3 = item.variant) == null ? void 0 : _a3.product) == null ? void 0 : _b2.title} (${(_c2 = item.variant) == null ? void 0 : _c2.title})`
                                },
                                item.id
                              );
                            }) }),
                            children: (0, import_jsx_runtime.jsxs)(
                              Badge,
                              {
                                className: "flex items-center gap-x-[3px] overflow-hidden cursor-default",
                                size: "xsmall",
                                children: [
                                  (0, import_jsx_runtime.jsx)(Shopping, { className: "shrink-0" }),
                                  (0, import_jsx_runtime.jsxs)("span", { className: "truncate", children: [
                                    items.reduce(
                                      (acc, item) => acc + item.quantity,
                                      0
                                    ),
                                    "x",
                                    " ",
                                    pluralize(items.length, "items", "item")
                                  ] })
                                ]
                              }
                            )
                          }
                        ),
                        (0, import_jsx_runtime.jsx)(
                          Tooltip,
                          {
                            content: (_d = (_c = (_b = shippingOption.service_zone) == null ? void 0 : _b.fulfillment_set) == null ? void 0 : _c.location) == null ? void 0 : _d.name,
                            children: (0, import_jsx_runtime.jsxs)(
                              Badge,
                              {
                                className: "flex items-center gap-x-[3px] overflow-hidden cursor-default",
                                size: "xsmall",
                                children: [
                                  (0, import_jsx_runtime.jsx)(Buildings, { className: "shrink-0" }),
                                  (0, import_jsx_runtime.jsx)("span", { className: "truncate", children: (_g = (_f = (_e = shippingOption.service_zone) == null ? void 0 : _e.fulfillment_set) == null ? void 0 : _f.location) == null ? void 0 : _g.name })
                                ]
                              }
                            )
                          }
                        ),
                        (0, import_jsx_runtime.jsx)(Tooltip, { content: shippingOption.name, children: (0, import_jsx_runtime.jsxs)(
                          Badge,
                          {
                            className: "flex items-center gap-x-[3px] overflow-hidden cursor-default",
                            size: "xsmall",
                            children: [
                              (0, import_jsx_runtime.jsx)(TruckFast, { className: "shrink-0" }),
                              (0, import_jsx_runtime.jsx)("span", { className: "truncate", children: shippingOption.name })
                            ]
                          }
                        ) })
                      ] })
                    ] }),
                    shippingOption ? (0, import_jsx_runtime.jsx)(
                      ActionMenu,
                      {
                        groups: [
                          {
                            actions: [
                              hasItems ? {
                                label: "Edit shipping option",
                                icon: (0, import_jsx_runtime.jsx)(Channels, {}),
                                onClick: () => {
                                  setIsOpen(
                                    STACKED_FOCUS_MODAL_ID,
                                    true
                                  );
                                  setData({
                                    shippingProfileId: profile.id,
                                    shippingOption,
                                    shippingMethod
                                  });
                                }
                              } : void 0,
                              {
                                label: "Remove shipping option",
                                icon: (0, import_jsx_runtime.jsx)(Trash, {}),
                                onClick: () => {
                                  if (shippingMethod) {
                                    if (addShippingMethodAction) {
                                      removeActionShippingMethod(
                                        addShippingMethodAction.id
                                      );
                                    } else {
                                      removeShippingMethod(
                                        shippingMethod.id
                                      );
                                    }
                                  }
                                }
                              }
                            ].filter(Boolean)
                          }
                        ]
                      }
                    ) : (0, import_jsx_runtime.jsx)(
                      StackedModalTrigger$1,
                      {
                        shippingProfileId: profile.id,
                        shippingOption,
                        shippingMethod,
                        setData,
                        children: "Add shipping option"
                      }
                    )
                  ] }),
                  (0, import_jsx_runtime.jsxs)(dist_exports3.Content, { children: [
                    (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
                    items.map((item, idx) => {
                      var _a3, _b2, _c2, _d2, _e2;
                      return (0, import_jsx_runtime.jsxs)("div", { children: [
                        (0, import_jsx_runtime.jsxs)(
                          "div",
                          {
                            className: "px-3 flex items-center gap-x-3",
                            children: [
                              (0, import_jsx_runtime.jsx)("div", { className: "w-5 h-[56px] flex flex-col justify-center items-center", children: (0, import_jsx_runtime.jsx)(
                                Divider,
                                {
                                  variant: "dashed",
                                  orientation: "vertical"
                                }
                              ) }),
                              (0, import_jsx_runtime.jsxs)("div", { className: "py-2 flex items-center gap-x-3", children: [
                                (0, import_jsx_runtime.jsx)("div", { className: "size-7 flex items-center justify-center tabular-nums", children: (0, import_jsx_runtime.jsxs)(
                                  Text,
                                  {
                                    size: "small",
                                    leading: "compact",
                                    className: "text-ui-fg-subtle",
                                    children: [
                                      item.quantity,
                                      "x"
                                    ]
                                  }
                                ) }),
                                (0, import_jsx_runtime.jsx)(Thumbnail, { thumbnail: item.thumbnail }),
                                (0, import_jsx_runtime.jsxs)("div", { children: [
                                  (0, import_jsx_runtime.jsxs)(
                                    Text,
                                    {
                                      size: "small",
                                      leading: "compact",
                                      weight: "plus",
                                      children: [
                                        (_b2 = (_a3 = item.variant) == null ? void 0 : _a3.product) == null ? void 0 : _b2.title,
                                        " (",
                                        (_c2 = item.variant) == null ? void 0 : _c2.title,
                                        ")"
                                      ]
                                    }
                                  ),
                                  (0, import_jsx_runtime.jsx)(
                                    Text,
                                    {
                                      size: "small",
                                      leading: "compact",
                                      className: "text-ui-fg-subtle",
                                      children: (_e2 = (_d2 = item.variant) == null ? void 0 : _d2.options) == null ? void 0 : _e2.map((option) => option.value).join(" · ")
                                    }
                                  )
                                ] })
                              ] })
                            ]
                          },
                          item.id
                        ),
                        idx !== items.length - 1 && (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" })
                      ] }, item.id);
                    })
                  ] })
                ]
              },
              profile.id
            );
          }) })
        ] }) })
      ] }) }),
      (0, import_jsx_runtime.jsx)(
        StackedFocusModal,
        {
          id: STACKED_FOCUS_MODAL_ID,
          onOpenChangeCallback: (open) => {
            if (!open) {
              setData(null);
            }
            return open;
          },
          children: data && (0, import_jsx_runtime.jsx)(ShippingProfileForm, { data, order, preview })
        }
      )
    ] }),
    (0, import_jsx_runtime.jsx)(RouteFocusModal.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex justify-end gap-x-2", children: [
      (0, import_jsx_runtime.jsx)(RouteFocusModal.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", type: "button", children: "Cancel" }) }),
      (0, import_jsx_runtime.jsx)(
        Button,
        {
          size: "small",
          type: "button",
          isLoading: isSubmitting,
          onClick: onSubmit,
          children: "Save"
        }
      )
    ] }) })
  ] });
};
var StackedModalTrigger$1 = ({
  shippingProfileId,
  shippingOption,
  shippingMethod,
  setData,
  children
}) => {
  const { setIsOpen, getIsOpen } = useStackedModal();
  const isOpen = getIsOpen(STACKED_FOCUS_MODAL_ID);
  const onToggle = () => {
    if (isOpen) {
      setIsOpen(STACKED_FOCUS_MODAL_ID, false);
      setData(null);
    } else {
      setIsOpen(STACKED_FOCUS_MODAL_ID, true);
      setData({
        shippingProfileId,
        shippingOption,
        shippingMethod
      });
    }
  };
  return (0, import_jsx_runtime.jsx)(
    Button,
    {
      size: "small",
      variant: "secondary",
      onClick: onToggle,
      className: "text-ui-fg-primary shrink-0",
      children
    }
  );
};
var ShippingProfileForm = ({
  data,
  order,
  preview
}) => {
  var _a, _b, _c, _d, _e, _f;
  const { setIsOpen } = useStackedModal();
  const form = useForm({
    resolver: t(shippingMethodSchema),
    defaultValues: {
      location_id: (_d = (_c = (_b = (_a = data.shippingOption) == null ? void 0 : _a.service_zone) == null ? void 0 : _b.fulfillment_set) == null ? void 0 : _c.location) == null ? void 0 : _d.id,
      shipping_option_id: (_e = data.shippingOption) == null ? void 0 : _e.id,
      custom_amount: (_f = data.shippingMethod) == null ? void 0 : _f.amount
    }
  });
  const { mutateAsync: addShippingMethod, isPending } = useDraftOrderAddShippingMethod(order.id);
  const {
    mutateAsync: updateShippingMethod,
    isPending: isUpdatingShippingMethod
  } = useDraftOrderUpdateShippingMethod(order.id);
  const onSubmit = form.handleSubmit(async (values) => {
    if ((0, import_lodash.isEqual)(values, form.formState.defaultValues)) {
      setIsOpen(STACKED_FOCUS_MODAL_ID, false);
      return;
    }
    if (data.shippingMethod) {
      await updateShippingMethod(
        {
          method_id: data.shippingMethod.id,
          shipping_option_id: values.shipping_option_id,
          custom_amount: values.custom_amount ? convertNumber(values.custom_amount) : void 0
        },
        {
          onError: (e) => {
            toast.error(e.message);
          },
          onSuccess: () => {
            setIsOpen(STACKED_FOCUS_MODAL_ID, false);
          }
        }
      );
      return;
    }
    await addShippingMethod(
      {
        shipping_option_id: values.shipping_option_id,
        custom_amount: values.custom_amount ? convertNumber(values.custom_amount) : void 0
      },
      {
        onError: (e) => {
          toast.error(e.message);
        },
        onSuccess: () => {
          setIsOpen(STACKED_FOCUS_MODAL_ID, false);
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(StackedFocusModal.Content, { children: (0, import_jsx_runtime.jsx)(Form$2, { ...form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      className: "flex h-full flex-col overflow-hidden",
      onSubmit,
      children: [
        (0, import_jsx_runtime.jsx)(StackedFocusModal.Header, {}),
        (0, import_jsx_runtime.jsx)(StackedFocusModal.Body, { className: "flex flex-1 flex-col overflow-hidden", children: (0, import_jsx_runtime.jsx)("div", { className: "flex flex-1 flex-col items-center overflow-y-auto", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex w-full max-w-[720px] flex-col gap-y-6 py-16 px-6", children: [
          (0, import_jsx_runtime.jsxs)("div", { children: [
            (0, import_jsx_runtime.jsx)(RouteFocusModal.Title, { asChild: true, children: (0, import_jsx_runtime.jsx)(Heading, { children: "Shipping" }) }),
            (0, import_jsx_runtime.jsx)(RouteFocusModal.Description, { asChild: true, children: (0, import_jsx_runtime.jsx)(Text, { size: "small", className: "text-ui-fg-subtle", children: "Add a shipping method for the selected shipping profile. You can see the items that will be shipped using this method in the preview below." }) })
          ] }),
          (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
          (0, import_jsx_runtime.jsx)(
            LocationField,
            {
              control: form.control,
              setValue: form.setValue
            }
          ),
          (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
          (0, import_jsx_runtime.jsx)(
            ShippingOptionField,
            {
              shippingProfileId: data.shippingProfileId,
              preview,
              control: form.control
            }
          ),
          (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
          (0, import_jsx_runtime.jsx)(
            CustomAmountField,
            {
              control: form.control,
              currencyCode: order.currency_code
            }
          ),
          (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
          (0, import_jsx_runtime.jsx)(
            ItemsPreview,
            {
              order,
              shippingProfileId: data.shippingProfileId
            }
          )
        ] }) }) }),
        (0, import_jsx_runtime.jsx)(StackedFocusModal.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex justify-end gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(StackedFocusModal.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", type: "button", children: "Cancel" }) }),
          (0, import_jsx_runtime.jsx)(
            Button,
            {
              size: "small",
              type: "submit",
              isLoading: isPending || isUpdatingShippingMethod,
              children: data.shippingMethod ? "Update" : "Add"
            }
          )
        ] }) })
      ]
    }
  ) }) });
};
var shippingMethodSchema = objectType({
  location_id: stringType(),
  shipping_option_id: stringType(),
  custom_amount: unionType([numberType(), stringType()]).optional()
});
var ItemsPreview = ({ order, shippingProfileId }) => {
  const matches = order.items.filter(
    (item) => {
      var _a, _b, _c;
      return ((_c = (_b = (_a = item.variant) == null ? void 0 : _a.product) == null ? void 0 : _b.shipping_profile) == null ? void 0 : _c.id) === shippingProfileId;
    }
  );
  return (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-6", children: [
    (0, import_jsx_runtime.jsx)("div", { className: "grid grid-cols-2 items-center gap-3", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col", children: [
      (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: "Items to ship" }),
      (0, import_jsx_runtime.jsx)(Text, { size: "small", className: "text-ui-fg-subtle", children: "Items with the selected shipping profile." })
    ] }) }),
    (0, import_jsx_runtime.jsxs)("div", { className: "bg-ui-bg-subtle shadow-elevation-card-rest rounded-xl", children: [
      (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-3 px-4 py-2 text-ui-fg-muted", children: [
        (0, import_jsx_runtime.jsx)("div", { children: (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", children: "Item" }) }),
        (0, import_jsx_runtime.jsx)("div", { children: (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", children: "Quantity" }) })
      ] }),
      (0, import_jsx_runtime.jsx)("div", { className: "flex flex-col gap-y-1.5 px-[5px] pb-[5px]", children: matches.length > 0 ? matches == null ? void 0 : matches.map((item) => (0, import_jsx_runtime.jsxs)(
        "div",
        {
          className: "grid grid-cols-2 gap-3 px-4 py-2 bg-ui-bg-base shadow-elevation-card-rest rounded-lg items-center",
          children: [
            (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-3", children: [
              (0, import_jsx_runtime.jsx)(
                Thumbnail,
                {
                  thumbnail: item.thumbnail,
                  alt: item.product_title ?? void 0
                }
              ),
              (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col", children: [
                (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-1", children: [
                  (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: item.product_title }),
                  (0, import_jsx_runtime.jsxs)(
                    Text,
                    {
                      size: "small",
                      leading: "compact",
                      className: "text-ui-fg-subtle",
                      children: [
                        "(",
                        item.variant_title,
                        ")"
                      ]
                    }
                  )
                ] }),
                (0, import_jsx_runtime.jsx)(
                  Text,
                  {
                    size: "small",
                    leading: "compact",
                    className: "text-ui-fg-subtle",
                    children: item.variant_sku
                  }
                )
              ] })
            ] }),
            (0, import_jsx_runtime.jsxs)(
              Text,
              {
                size: "small",
                leading: "compact",
                className: "text-ui-fg-subtle",
                children: [
                  item.quantity,
                  "x"
                ]
              }
            )
          ]
        },
        item.id
      )) : (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-center gap-x-3 bg-ui-bg-base rounded-lg p-4 shadow-elevation-card-rest flex-col gap-1", children: [
        (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: "No items found" }),
        (0, import_jsx_runtime.jsxs)(Text, { size: "small", className: "text-ui-fg-subtle", children: [
          'No items found for "',
          query,
          '".'
        ] })
      ] }) })
    ] })
  ] });
};
var LocationField = ({ control, setValue }) => {
  const locations = useComboboxData({
    queryKey: ["locations"],
    queryFn: async (params) => {
      return await sdk.admin.stockLocation.list(params);
    },
    getOptions: (data) => {
      return data.stock_locations.map((location) => ({
        label: location.name,
        value: location.id
      }));
    }
  });
  return (0, import_jsx_runtime.jsx)(
    Form$2.Field,
    {
      control,
      name: "location_id",
      render: ({ field: { onChange, ...field } }) => {
        return (0, import_jsx_runtime.jsx)(Form$2.Item, { children: (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-x-3", children: [
          (0, import_jsx_runtime.jsxs)("div", { children: [
            (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Location" }),
            (0, import_jsx_runtime.jsx)(Form$2.Hint, { children: "Choose where you want to ship the items from." })
          ] }),
          (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(
            Combobox2,
            {
              options: locations.options,
              fetchNextPage: locations.fetchNextPage,
              isFetchingNextPage: locations.isFetchingNextPage,
              searchValue: locations.searchValue,
              onSearchValueChange: locations.onSearchValueChange,
              placeholder: "Select location",
              onChange: (value) => {
                setValue("shipping_option_id", "", {
                  shouldDirty: true,
                  shouldTouch: true
                });
                onChange(value);
              },
              ...field
            }
          ) })
        ] }) });
      }
    }
  );
};
var ShippingOptionField = ({
  shippingProfileId,
  preview,
  control
}) => {
  var _a;
  const locationId = useWatch({ control, name: "location_id" });
  const shippingOptions = useComboboxData({
    queryKey: ["shipping_options", locationId, shippingProfileId],
    queryFn: async (params) => {
      return await sdk.admin.shippingOption.list({
        ...params,
        stock_location_id: locationId,
        shipping_profile_id: shippingProfileId
      });
    },
    getOptions: (data) => {
      return data.shipping_options.map((option) => {
        var _a2;
        if ((_a2 = option.rules) == null ? void 0 : _a2.find(
          (r) => r.attribute === "is_return" && r.value === "true"
        )) {
          return void 0;
        }
        return {
          label: option.name,
          value: option.id
        };
      }).filter(Boolean);
    },
    enabled: !!locationId && !!shippingProfileId,
    defaultValue: ((_a = preview.shipping_methods[0]) == null ? void 0 : _a.shipping_option_id) || void 0
  });
  const tooltipContent = !locationId && !shippingProfileId ? "Choose a location and shipping profile first." : !locationId ? "Choose a location first." : "Choose a shipping profile first.";
  return (0, import_jsx_runtime.jsx)(
    Form$2.Field,
    {
      control,
      name: "shipping_option_id",
      render: ({ field }) => {
        return (0, import_jsx_runtime.jsx)(Form$2.Item, { children: (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-x-3", children: [
          (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col", children: [
            (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Shipping option" }),
            (0, import_jsx_runtime.jsx)(Form$2.Hint, { children: "Choose the shipping option to use." })
          ] }),
          (0, import_jsx_runtime.jsx)(
            ConditionalTooltip,
            {
              content: tooltipContent,
              showTooltip: !locationId || !shippingProfileId,
              children: (0, import_jsx_runtime.jsx)("div", { children: (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(
                Combobox2,
                {
                  options: shippingOptions.options,
                  fetchNextPage: shippingOptions.fetchNextPage,
                  isFetchingNextPage: shippingOptions.isFetchingNextPage,
                  searchValue: shippingOptions.searchValue,
                  onSearchValueChange: shippingOptions.onSearchValueChange,
                  placeholder: "Select shipping option",
                  ...field,
                  disabled: !locationId || !shippingProfileId
                }
              ) }) })
            }
          )
        ] }) });
      }
    }
  );
};
var CustomAmountField = ({
  control,
  currencyCode
}) => {
  return (0, import_jsx_runtime.jsx)(
    Form$2.Field,
    {
      control,
      name: "custom_amount",
      render: ({ field: { onChange, ...field } }) => {
        return (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-x-3", children: [
          (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col", children: [
            (0, import_jsx_runtime.jsx)(Form$2.Label, { optional: true, children: "Custom amount" }),
            (0, import_jsx_runtime.jsx)(Form$2.Hint, { children: "Set a custom amount for the shipping option." })
          ] }),
          (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(
            CurrencyInput,
            {
              ...field,
              onValueChange: (value) => onChange(value),
              symbol: getNativeSymbol(currencyCode),
              code: currencyCode
            }
          ) })
        ] });
      }
    }
  );
};
var TransferOwnership = () => {
  const { id } = useParams();
  const { draft_order, isPending, isError, error } = useDraftOrder(id, {
    fields: "id,customer_id,customer.*"
  });
  if (isError) {
    throw error;
  }
  const isReady = !isPending && !!draft_order;
  return (0, import_jsx_runtime.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime.jsxs)(RouteDrawer.Header, { children: [
      (0, import_jsx_runtime.jsx)(RouteDrawer.Title, { asChild: true, children: (0, import_jsx_runtime.jsx)(Heading, { children: "Transfer Ownership" }) }),
      (0, import_jsx_runtime.jsx)(RouteDrawer.Description, { asChild: true, children: (0, import_jsx_runtime.jsx)("span", { className: "sr-only", children: "Transfer the ownership of this draft order to a new customer" }) })
    ] }),
    isReady && (0, import_jsx_runtime.jsx)(TransferOwnershipForm, { order: draft_order })
  ] });
};
var TransferOwnershipForm = ({ order }) => {
  var _a, _b;
  const form = useForm({
    defaultValues: {
      customer_id: order.customer_id || ""
    },
    resolver: t(schema$1)
  });
  const { mutateAsync, isPending } = useUpdateDraftOrder(order.id);
  const { handleSuccess } = useRouteModal();
  const name = [(_a = order.customer) == null ? void 0 : _a.first_name, (_b = order.customer) == null ? void 0 : _b.last_name].filter(Boolean).join(" ");
  const currentCustomer = order.customer ? {
    label: name ? `${name} (${order.customer.email})` : order.customer.email,
    value: order.customer.id
  } : null;
  const onSubmit = form.handleSubmit(async (data) => {
    await mutateAsync(
      { customer_id: data.customer_id },
      {
        onSuccess: () => {
          toast.success("Customer updated");
          handleSuccess();
        },
        onError: (error) => {
          toast.error(error.message);
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      className: "flex flex-1 flex-col overflow-hidden",
      onSubmit,
      children: [
        (0, import_jsx_runtime.jsxs)(RouteDrawer.Body, { className: "flex flex-col gap-y-6 overflow-y-auto", children: [
          (0, import_jsx_runtime.jsx)("div", { className: "flex items-center justify-center bg-ui-bg-component rounded-md border", children: (0, import_jsx_runtime.jsx)(Illustration, {}) }),
          currentCustomer && (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col space-y-3", children: [
            (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col", children: [
              (0, import_jsx_runtime.jsx)(Label, { size: "small", weight: "plus", htmlFor: "current-customer", children: "Current owner" }),
              (0, import_jsx_runtime.jsx)(Hint, { children: "The customer that is currently associated with this draft order." })
            ] }),
            (0, import_jsx_runtime.jsxs)(Select, { disabled: true, value: currentCustomer.value, children: [
              (0, import_jsx_runtime.jsx)(Select.Trigger, { id: "current-customer", children: (0, import_jsx_runtime.jsx)(Select.Value, {}) }),
              (0, import_jsx_runtime.jsx)(Select.Content, { children: (0, import_jsx_runtime.jsx)(Select.Item, { value: currentCustomer.value, children: currentCustomer.label }) })
            ] })
          ] }),
          (0, import_jsx_runtime.jsx)(
            CustomerField,
            {
              control: form.control,
              currentCustomerId: order.customer_id
            }
          )
        ] }),
        (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { variant: "secondary", size: "small", children: "Cancel" }) }),
          (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", isLoading: isPending, children: "Save" })
        ] }) })
      ]
    }
  ) });
};
var CustomerField = ({ control, currentCustomerId }) => {
  const customers = useComboboxData({
    queryFn: async (params) => {
      return await sdk.admin.customer.list({
        ...params,
        id: currentCustomerId ? { $nin: [currentCustomerId] } : void 0
      });
    },
    queryKey: ["customers"],
    getOptions: (data) => {
      return data.customers.map((customer) => {
        const name = [customer.first_name, customer.last_name].filter(Boolean).join(" ");
        return {
          label: name ? `${name} (${customer.email})` : customer.email,
          value: customer.id
        };
      });
    }
  });
  return (0, import_jsx_runtime.jsx)(
    Form$2.Field,
    {
      name: "customer_id",
      control,
      render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { className: "space-y-3", children: [
        (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col", children: [
          (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "New customer" }),
          (0, import_jsx_runtime.jsx)(Form$2.Hint, { children: "The customer to transfer this draft order to." })
        ] }),
        (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(
          Combobox2,
          {
            options: customers.options,
            fetchNextPage: customers.fetchNextPage,
            isFetchingNextPage: customers.isFetchingNextPage,
            searchValue: customers.searchValue,
            onSearchValueChange: customers.onSearchValueChange,
            placeholder: "Select customer",
            ...field
          }
        ) }),
        (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
      ] })
    }
  );
};
var Illustration = () => {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      width: "280",
      height: "180",
      viewBox: "0 0 280 180",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        (0, import_jsx_runtime.jsx)(
          "rect",
          {
            x: "0.00428286",
            y: "-0.742904",
            width: "33.5",
            height: "65.5",
            rx: "6.75",
            transform: "matrix(0.865865 0.500278 -0.871576 0.490261 189.756 88.438)",
            fill: "#D4D4D8",
            stroke: "#52525B",
            strokeWidth: "1.5"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "rect",
          {
            x: "0.00428286",
            y: "-0.742904",
            width: "33.5",
            height: "65.5",
            rx: "6.75",
            transform: "matrix(0.865865 0.500278 -0.871576 0.490261 189.756 85.4381)",
            fill: "white",
            stroke: "#52525B",
            strokeWidth: "1.5"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M180.579 107.142L179.126 107.959",
            stroke: "#52525B",
            strokeWidth: "1.5",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            opacity: "0.88",
            d: "M182.305 109.546L180.257 109.534",
            stroke: "#52525B",
            strokeWidth: "1.5",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            opacity: "0.75",
            d: "M180.551 111.93L179.108 111.096",
            stroke: "#52525B",
            strokeWidth: "1.5",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            opacity: "0.63",
            d: "M176.347 112.897L176.354 111.73",
            stroke: "#52525B",
            strokeWidth: "1.5",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            opacity: "0.5",
            d: "M172.153 111.881L173.606 111.064",
            stroke: "#52525B",
            strokeWidth: "1.5",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            opacity: "0.38",
            d: "M170.428 109.478L172.476 109.489",
            stroke: "#52525B",
            strokeWidth: "1.5",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            opacity: "0.25",
            d: "M172.181 107.094L173.624 107.928",
            stroke: "#52525B",
            strokeWidth: "1.5",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            opacity: "0.13",
            d: "M176.386 106.126L176.379 107.294",
            stroke: "#52525B",
            strokeWidth: "1.5",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "rect",
          {
            width: "12",
            height: "3",
            rx: "1.5",
            transform: "matrix(0.865865 0.500278 -0.871576 0.490261 196.447 92.2925)",
            fill: "#D4D4D8"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "rect",
          {
            x: "0.00428286",
            y: "-0.742904",
            width: "33.5",
            height: "65.5",
            rx: "6.75",
            transform: "matrix(0.865865 0.500278 -0.871576 0.490261 117.023 46.4147)",
            fill: "#D4D4D8",
            stroke: "#52525B",
            strokeWidth: "1.5"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "rect",
          {
            x: "0.00428286",
            y: "-0.742904",
            width: "33.5",
            height: "65.5",
            rx: "6.75",
            transform: "matrix(0.865865 0.500278 -0.871576 0.490261 117.023 43.4147)",
            fill: "white",
            stroke: "#52525B",
            strokeWidth: "1.5"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "rect",
          {
            width: "12",
            height: "3",
            rx: "1.5",
            transform: "matrix(0.865865 0.500278 -0.871576 0.490261 123.714 50.2691)",
            fill: "#D4D4D8"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "rect",
          {
            width: "17",
            height: "3",
            rx: "1.5",
            transform: "matrix(0.865865 0.500278 -0.871576 0.490261 97.5557 66.958)",
            fill: "#D4D4D8"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "rect",
          {
            width: "12",
            height: "3",
            rx: "1.5",
            transform: "matrix(0.865865 0.500278 -0.871576 0.490261 93.1978 69.4093)",
            fill: "#D4D4D8"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M92.3603 63.9563C90.9277 63.1286 88.59 63.1152 87.148 63.9263C85.7059 64.7374 85.6983 66.0702 87.1308 66.8979C88.5634 67.7256 90.9011 67.7391 92.3432 66.928C93.7852 66.1168 93.7929 64.784 92.3603 63.9563ZM88.4382 66.1625C87.7221 65.7488 87.726 65.0822 88.4468 64.6767C89.1676 64.2713 90.3369 64.278 91.0529 64.6917C91.769 65.1055 91.7652 65.7721 91.0444 66.1775C90.3236 66.583 89.1543 66.5762 88.4382 66.1625Z",
            fill: "#A1A1AA"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "rect",
          {
            width: "17",
            height: "3",
            rx: "1.5",
            transform: "matrix(0.865865 0.500278 -0.871576 0.490261 109.758 60.0944)",
            fill: "#A1A1AA"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "rect",
          {
            width: "12",
            height: "3",
            rx: "1.5",
            transform: "matrix(0.865865 0.500278 -0.871576 0.490261 105.4 62.5457)",
            fill: "#A1A1AA"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M104.562 57.0927C103.13 56.265 100.792 56.2515 99.3501 57.0626C97.9081 57.8738 97.9004 59.2065 99.333 60.0343C100.766 60.862 103.103 60.8754 104.545 60.0643C105.987 59.2532 105.995 57.9204 104.562 57.0927ZM103.858 58.8972L100.815 59.1265C100.683 59.1367 100.55 59.1134 100.449 59.063C100.44 59.0585 100.432 59.0545 100.425 59.05C100.339 59.0005 100.29 58.9336 100.291 58.8637L100.294 58.1201C100.294 57.9752 100.501 57.8585 100.756 57.86C101.01 57.8615 101.217 57.98 101.216 58.1256L101.214 58.5669L103.732 58.3769C103.984 58.3578 104.217 58.4584 104.251 58.603C104.286 58.7468 104.11 58.8788 103.858 58.8977L103.858 58.8972Z",
            fill: "#52525B"
          }
        ),
        (0, import_jsx_runtime.jsx)("g", { clipPath: "url(#clip0_20915_38670)", children: (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M133.106 81.8022L140.49 81.8447L140.515 77.6349",
            stroke: "#A1A1AA",
            strokeWidth: "1.5",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ) }),
        (0, import_jsx_runtime.jsx)("g", { clipPath: "url(#clip1_20915_38670)", children: (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M143.496 87.8055L150.881 87.8481L150.905 83.6383",
            stroke: "#A1A1AA",
            strokeWidth: "1.5",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ) }),
        (0, import_jsx_runtime.jsx)("g", { clipPath: "url(#clip2_20915_38670)", children: (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M153.887 93.8088L161.271 93.8514L161.295 89.6416",
            stroke: "#A1A1AA",
            strokeWidth: "1.5",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ) }),
        (0, import_jsx_runtime.jsx)("g", { clipPath: "url(#clip3_20915_38670)", children: (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M126.114 89.1912L118.729 89.1486L118.705 93.3584",
            stroke: "#A1A1AA",
            strokeWidth: "1.5",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ) }),
        (0, import_jsx_runtime.jsx)("g", { clipPath: "url(#clip4_20915_38670)", children: (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M136.504 95.1945L129.12 95.1519L129.095 99.3617",
            stroke: "#A1A1AA",
            strokeWidth: "1.5",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ) }),
        (0, import_jsx_runtime.jsx)("g", { clipPath: "url(#clip5_20915_38670)", children: (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M146.894 101.198L139.51 101.155L139.486 105.365",
            stroke: "#A1A1AA",
            strokeWidth: "1.5",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ) }),
        (0, import_jsx_runtime.jsxs)("defs", { children: [
          (0, import_jsx_runtime.jsx)("clipPath", { id: "clip0_20915_38670", children: (0, import_jsx_runtime.jsx)(
            "rect",
            {
              width: "12",
              height: "12",
              fill: "white",
              transform: "matrix(0.865865 0.500278 -0.871576 0.490261 138.36 74.6508)"
            }
          ) }),
          (0, import_jsx_runtime.jsx)("clipPath", { id: "clip1_20915_38670", children: (0, import_jsx_runtime.jsx)(
            "rect",
            {
              width: "12",
              height: "12",
              fill: "white",
              transform: "matrix(0.865865 0.500278 -0.871576 0.490261 148.75 80.6541)"
            }
          ) }),
          (0, import_jsx_runtime.jsx)("clipPath", { id: "clip2_20915_38670", children: (0, import_jsx_runtime.jsx)(
            "rect",
            {
              width: "12",
              height: "12",
              fill: "white",
              transform: "matrix(0.865865 0.500278 -0.871576 0.490261 159.141 86.6575)"
            }
          ) }),
          (0, import_jsx_runtime.jsx)("clipPath", { id: "clip3_20915_38670", children: (0, import_jsx_runtime.jsx)(
            "rect",
            {
              width: "12",
              height: "12",
              fill: "white",
              transform: "matrix(0.865865 0.500278 -0.871576 0.490261 120.928 84.4561)"
            }
          ) }),
          (0, import_jsx_runtime.jsx)("clipPath", { id: "clip4_20915_38670", children: (0, import_jsx_runtime.jsx)(
            "rect",
            {
              width: "12",
              height: "12",
              fill: "white",
              transform: "matrix(0.865865 0.500278 -0.871576 0.490261 131.318 90.4594)"
            }
          ) }),
          (0, import_jsx_runtime.jsx)("clipPath", { id: "clip5_20915_38670", children: (0, import_jsx_runtime.jsx)(
            "rect",
            {
              width: "12",
              height: "12",
              fill: "white",
              transform: "matrix(0.865865 0.500278 -0.871576 0.490261 141.709 96.4627)"
            }
          ) })
        ] })
      ]
    }
  );
};
var schema$1 = objectType({
  customer_id: stringType().min(1)
});
var ShippingAddress = () => {
  const { id } = useParams();
  const { order, isPending, isError, error } = useOrder(id, {
    fields: "+shipping_address"
  });
  if (isError) {
    throw error;
  }
  const isReady = !isPending && !!order;
  return (0, import_jsx_runtime.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime.jsxs)(RouteDrawer.Header, { children: [
      (0, import_jsx_runtime.jsx)(RouteDrawer.Title, { asChild: true, children: (0, import_jsx_runtime.jsx)(Heading, { children: "Edit Shipping Address" }) }),
      (0, import_jsx_runtime.jsx)(RouteDrawer.Description, { asChild: true, children: (0, import_jsx_runtime.jsx)("span", { className: "sr-only", children: "Edit the shipping address for the draft order" }) })
    ] }),
    isReady && (0, import_jsx_runtime.jsx)(ShippingAddressForm, { order })
  ] });
};
var ShippingAddressForm = ({ order }) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
  const form = useForm({
    defaultValues: {
      first_name: ((_a = order.shipping_address) == null ? void 0 : _a.first_name) ?? "",
      last_name: ((_b = order.shipping_address) == null ? void 0 : _b.last_name) ?? "",
      company: ((_c = order.shipping_address) == null ? void 0 : _c.company) ?? "",
      address_1: ((_d = order.shipping_address) == null ? void 0 : _d.address_1) ?? "",
      address_2: ((_e = order.shipping_address) == null ? void 0 : _e.address_2) ?? "",
      city: ((_f = order.shipping_address) == null ? void 0 : _f.city) ?? "",
      province: ((_g = order.shipping_address) == null ? void 0 : _g.province) ?? "",
      country_code: ((_h = order.shipping_address) == null ? void 0 : _h.country_code) ?? "",
      postal_code: ((_i = order.shipping_address) == null ? void 0 : _i.postal_code) ?? "",
      phone: ((_j = order.shipping_address) == null ? void 0 : _j.phone) ?? ""
    },
    resolver: t(schema)
  });
  const { mutateAsync, isPending } = useUpdateDraftOrder(order.id);
  const { handleSuccess } = useRouteModal();
  const onSubmit = form.handleSubmit(async (data) => {
    await mutateAsync(
      {
        shipping_address: {
          first_name: data.first_name,
          last_name: data.last_name,
          company: data.company,
          address_1: data.address_1,
          address_2: data.address_2,
          city: data.city,
          province: data.province,
          country_code: data.country_code,
          postal_code: data.postal_code,
          phone: data.phone
        }
      },
      {
        onSuccess: () => {
          handleSuccess();
        },
        onError: (error) => {
          toast.error(error.message);
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      className: "flex flex-1 flex-col overflow-hidden",
      onSubmit,
      children: [
        (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { className: "flex flex-col gap-y-6 overflow-y-auto", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-4", children: [
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control: form.control,
              name: "country_code",
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Country" }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(CountrySelect, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          ),
          (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
            (0, import_jsx_runtime.jsx)(
              Form$2.Field,
              {
                control: form.control,
                name: "first_name",
                render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "First name" }),
                  (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                  (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
                ] })
              }
            ),
            (0, import_jsx_runtime.jsx)(
              Form$2.Field,
              {
                control: form.control,
                name: "last_name",
                render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Last name" }),
                  (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                  (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
                ] })
              }
            )
          ] }),
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control: form.control,
              name: "company",
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { optional: true, children: "Company" }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          ),
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control: form.control,
              name: "address_1",
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Address" }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          ),
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control: form.control,
              name: "address_2",
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { optional: true, children: "Apartment, suite, etc." }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          ),
          (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
            (0, import_jsx_runtime.jsx)(
              Form$2.Field,
              {
                control: form.control,
                name: "postal_code",
                render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Postal code" }),
                  (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                  (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
                ] })
              }
            ),
            (0, import_jsx_runtime.jsx)(
              Form$2.Field,
              {
                control: form.control,
                name: "city",
                render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "City" }),
                  (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                  (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
                ] })
              }
            )
          ] }),
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control: form.control,
              name: "province",
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { optional: true, children: "Province / State" }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          ),
          (0, import_jsx_runtime.jsx)(
            Form$2.Field,
            {
              control: form.control,
              name: "phone",
              render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form$2.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form$2.Label, { optional: true, children: "Phone" }),
                (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
              ] })
            }
          )
        ] }) }),
        (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex justify-end gap-2", children: [
          (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: "Cancel" }) }),
          (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", isLoading: isPending, children: "Save" })
        ] }) })
      ]
    }
  ) });
};
var schema = addressSchema;
var NumberInput = (0, import_react.forwardRef)(
  ({
    value,
    onChange,
    size = "base",
    min = 0,
    max = 100,
    step = 1,
    className,
    disabled,
    ...props
  }, ref) => {
    const handleChange = (event) => {
      const newValue = event.target.value === "" ? min : Number(event.target.value);
      if (!isNaN(newValue) && (max === void 0 || newValue <= max) && (min === void 0 || newValue >= min)) {
        onChange(newValue);
      }
    };
    const handleIncrement = () => {
      const newValue = value + step;
      if (max === void 0 || newValue <= max) {
        onChange(newValue);
      }
    };
    const handleDecrement = () => {
      const newValue = value - step;
      if (min === void 0 || newValue >= min) {
        onChange(newValue);
      }
    };
    return (0, import_jsx_runtime.jsxs)(
      "div",
      {
        className: clx(
          "inline-flex rounded-md bg-ui-bg-field shadow-borders-base overflow-hidden divide-x transition-fg",
          "[&:has(input:focus)]:shadow-borders-interactive-with-active",
          {
            "h-7": size === "small",
            "h-8": size === "base"
          },
          className
        ),
        children: [
          (0, import_jsx_runtime.jsx)(
            "input",
            {
              ref,
              type: "number",
              value,
              onChange: handleChange,
              min,
              max,
              step,
              className: clx(
                "flex-1 px-2 py-1 bg-transparent txt-compact-small text-ui-fg-base outline-none [appearance:textfield]",
                "[&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none",
                "placeholder:text-ui-fg-muted"
              ),
              ...props
            }
          ),
          (0, import_jsx_runtime.jsxs)(
            "button",
            {
              className: clx(
                "flex items-center justify-center outline-none transition-fg",
                "disabled:cursor-not-allowed disabled:text-ui-fg-muted",
                "focus:bg-ui-bg-field-component-hover",
                "hover:bg-ui-bg-field-component-hover",
                {
                  "size-7": size === "small",
                  "size-8": size === "base"
                }
              ),
              type: "button",
              onClick: handleDecrement,
              disabled: min !== void 0 && value <= min || disabled,
              children: [
                (0, import_jsx_runtime.jsx)(Minus, {}),
                (0, import_jsx_runtime.jsx)("span", { className: "sr-only", children: `Decrease by ${step}` })
              ]
            }
          ),
          (0, import_jsx_runtime.jsxs)(
            "button",
            {
              className: clx(
                "flex items-center justify-center outline-none transition-fg",
                "disabled:cursor-not-allowed disabled:text-ui-fg-muted",
                "focus:bg-ui-bg-field-hover",
                "hover:bg-ui-bg-field-hover",
                {
                  "size-7": size === "small",
                  "size-8": size === "base"
                }
              ),
              type: "button",
              onClick: handleIncrement,
              disabled: max !== void 0 && value >= max || disabled,
              children: [
                (0, import_jsx_runtime.jsx)(Plus, {}),
                (0, import_jsx_runtime.jsx)("span", { className: "sr-only", children: `Increase by ${step}` })
              ]
            }
          )
        ]
      }
    );
  }
);
var PRODUCT_VARIANTS_QUERY_KEY = "product-variants";
var productVariantsQueryKeys = {
  list: (query2) => [
    PRODUCT_VARIANTS_QUERY_KEY,
    query2 ? query2 : void 0
  ]
};
var useProductVariants = (query2, options) => {
  const { data, ...rest } = useQuery({
    queryKey: productVariantsQueryKeys.list(query2),
    queryFn: async () => await sdk.admin.productVariant.list(query2),
    ...options
  });
  return { ...data, ...rest };
};
var STACKED_MODAL_ID = "items_stacked_modal";
var Items = () => {
  const { id } = useParams();
  const {
    order: preview,
    isPending: isPreviewPending,
    isError: isPreviewError,
    error: previewError
  } = useOrderPreview(id, void 0, {
    placeholderData: keepPreviousData
  });
  useInitiateOrderEdit({ preview });
  const { draft_order, isPending, isError, error } = useDraftOrder(
    id,
    {
      fields: "currency_code"
    },
    {
      enabled: !!id
    }
  );
  const { onCancel } = useCancelOrderEdit({ preview });
  if (isError) {
    throw error;
  }
  if (isPreviewError) {
    throw previewError;
  }
  const ready = !!preview && !isPreviewPending && !!draft_order && !isPending;
  return (0, import_jsx_runtime.jsx)(RouteFocusModal, { onClose: onCancel, children: ready ? (0, import_jsx_runtime.jsx)(ItemsForm, { preview, currencyCode: draft_order.currency_code }) : (0, import_jsx_runtime.jsxs)("div", { children: [
    (0, import_jsx_runtime.jsx)(RouteFocusModal.Title, { asChild: true, children: (0, import_jsx_runtime.jsx)("span", { className: "sr-only", children: "Edit Items" }) }),
    (0, import_jsx_runtime.jsx)(RouteFocusModal.Description, { asChild: true, children: (0, import_jsx_runtime.jsx)("span", { className: "sr-only", children: "Loading data for the draft order, please wait..." }) })
  ] }) });
};
var ItemsForm = ({ preview, currencyCode }) => {
  var _a;
  const [isSubmitting, setIsSubmitting] = (0, import_react.useState)(false);
  const [modalContent, setModalContent] = (0, import_react.useState)(
    null
  );
  const { handleSuccess } = useRouteModal();
  const { searchValue, onSearchValueChange, query: query2 } = useDebouncedSearch();
  const { mutateAsync: confirmOrderEdit } = useDraftOrderConfirmEdit(preview.id);
  const { mutateAsync: requestOrderEdit } = useDraftOrderRequestEdit(preview.id);
  const itemCount = ((_a = preview.items) == null ? void 0 : _a.reduce((acc, item) => acc + item.quantity, 0)) || 0;
  const matches = (0, import_react.useMemo)(() => {
    return matchSorter(preview.items, query2, {
      keys: ["product_title", "variant_title", "variant_sku", "title"]
    });
  }, [preview.items, query2]);
  const onSubmit = async () => {
    setIsSubmitting(true);
    let requestSucceeded = false;
    await requestOrderEdit(void 0, {
      onError: (e) => {
        toast.error(`Failed to request order edit: ${e.message}`);
      },
      onSuccess: () => {
        requestSucceeded = true;
      }
    });
    if (!requestSucceeded) {
      setIsSubmitting(false);
      return;
    }
    await confirmOrderEdit(void 0, {
      onError: (e) => {
        toast.error(`Failed to confirm order edit: ${e.message}`);
      },
      onSuccess: () => {
        handleSuccess();
      },
      onSettled: () => {
        setIsSubmitting(false);
      }
    });
  };
  const onKeyDown = (0, import_react.useCallback)(
    (e) => {
      if (e.key === "Enter" && (e.ctrlKey || e.metaKey)) {
        if (modalContent || isSubmitting) {
          return;
        }
        onSubmit();
      }
    },
    [modalContent, isSubmitting, onSubmit]
  );
  (0, import_react.useEffect)(() => {
    document.addEventListener("keydown", onKeyDown);
    return () => {
      document.removeEventListener("keydown", onKeyDown);
    };
  }, [onKeyDown]);
  return (0, import_jsx_runtime.jsxs)("div", { className: "flex h-full flex-col overflow-hidden", children: [
    (0, import_jsx_runtime.jsx)(RouteFocusModal.Header, {}),
    (0, import_jsx_runtime.jsx)(RouteFocusModal.Body, { className: "flex flex-1 flex-col overflow-hidden", children: (0, import_jsx_runtime.jsxs)(
      StackedFocusModal,
      {
        id: STACKED_MODAL_ID,
        onOpenChangeCallback: (open) => {
          if (!open) {
            setModalContent(null);
          }
        },
        children: [
          (0, import_jsx_runtime.jsx)("div", { className: "flex flex-1 flex-col items-center overflow-y-auto", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex w-full max-w-[720px] flex-col gap-y-6 px-6 py-16", children: [
            (0, import_jsx_runtime.jsxs)("div", { children: [
              (0, import_jsx_runtime.jsx)(RouteFocusModal.Title, { asChild: true, children: (0, import_jsx_runtime.jsx)(Heading, { children: "Edit Items" }) }),
              (0, import_jsx_runtime.jsx)(RouteFocusModal.Description, { asChild: true, children: (0, import_jsx_runtime.jsx)(Text, { size: "small", className: "text-ui-fg-subtle", children: "Edit the items in the draft order." }) })
            ] }),
            (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
            (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-6", children: [
              (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 items-center gap-3", children: [
                (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col", children: [
                  (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: "Items" }),
                  (0, import_jsx_runtime.jsx)(Text, { size: "small", className: "text-ui-fg-subtle", children: "Choose items from the product catalog." })
                ] }),
                (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-2", children: [
                  (0, import_jsx_runtime.jsx)("div", { className: "flex-1", children: (0, import_jsx_runtime.jsx)(
                    Input,
                    {
                      type: "search",
                      placeholder: "Search items",
                      value: searchValue,
                      onChange: (e) => onSearchValueChange(e.target.value)
                    }
                  ) }),
                  (0, import_jsx_runtime.jsxs)(DropdownMenu, { children: [
                    (0, import_jsx_runtime.jsx)(DropdownMenu.Trigger, { asChild: true, children: (0, import_jsx_runtime.jsx)(IconButton, { type: "button", children: (0, import_jsx_runtime.jsx)(Plus, {}) }) }),
                    (0, import_jsx_runtime.jsxs)(DropdownMenu.Content, { children: [
                      (0, import_jsx_runtime.jsx)(
                        StackedModalTrigger,
                        {
                          type: "add-items",
                          setModalContent
                        }
                      ),
                      (0, import_jsx_runtime.jsx)(
                        StackedModalTrigger,
                        {
                          type: "add-custom-item",
                          setModalContent
                        }
                      )
                    ] })
                  ] })
                ] })
              ] }),
              (0, import_jsx_runtime.jsxs)("div", { className: "bg-ui-bg-subtle shadow-elevation-card-rest rounded-xl", children: [
                (0, import_jsx_runtime.jsx)("div", { className: "px-[5px]", children: (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-[1fr_1fr_1fr_28px] gap-3 px-4 py-2 text-ui-fg-muted", children: [
                  (0, import_jsx_runtime.jsx)("div", { children: (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", children: "Item" }) }),
                  (0, import_jsx_runtime.jsx)("div", { children: (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", children: "Quantity" }) }),
                  (0, import_jsx_runtime.jsx)("div", { className: "text-right", children: (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", children: "Price" }) }),
                  (0, import_jsx_runtime.jsx)("div", {})
                ] }) }),
                (0, import_jsx_runtime.jsx)("div", { className: "flex flex-col gap-y-1.5 px-[5px] pb-[5px]", children: itemCount <= 0 ? (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-center gap-x-3 bg-ui-bg-base rounded-lg p-4 shadow-elevation-card-rest flex-col gap-1", children: [
                  (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: "There are no items in this order" }),
                  (0, import_jsx_runtime.jsx)(Text, { size: "small", className: "text-ui-fg-subtle", children: "Add items to the order to get started." })
                ] }) : matches.length > 0 ? matches == null ? void 0 : matches.map((item) => (0, import_jsx_runtime.jsx)(
                  Item,
                  {
                    item,
                    preview,
                    currencyCode
                  },
                  item.id
                )) : (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-center gap-x-3 bg-ui-bg-base rounded-lg p-4 shadow-elevation-card-rest flex-col gap-1", children: [
                  (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: "No items found" }),
                  (0, import_jsx_runtime.jsxs)(Text, { size: "small", className: "text-ui-fg-subtle", children: [
                    'No items found for "',
                    query2,
                    '".'
                  ] })
                ] }) })
              ] })
            ] }),
            (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
            (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-[1fr_0.5fr_0.5fr] gap-3", children: [
              (0, import_jsx_runtime.jsx)("div", { children: (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: "Subtotal" }) }),
              (0, import_jsx_runtime.jsx)("div", { children: (0, import_jsx_runtime.jsxs)(
                Text,
                {
                  size: "small",
                  leading: "compact",
                  className: "text-ui-fg-subtle",
                  children: [
                    itemCount,
                    " ",
                    itemCount === 1 ? "item" : "items"
                  ]
                }
              ) }),
              (0, import_jsx_runtime.jsx)("div", { className: "text-right", children: (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: getStylizedAmount(preview.item_subtotal, currencyCode) }) })
            ] })
          ] }) }),
          modalContent && (modalContent === "add-items" ? (0, import_jsx_runtime.jsx)(ExistingItemsForm, { orderId: preview.id, items: preview.items }) : modalContent === "add-custom-item" ? (0, import_jsx_runtime.jsx)(
            CustomItemForm,
            {
              orderId: preview.id,
              currencyCode
            }
          ) : null)
        ]
      }
    ) }),
    (0, import_jsx_runtime.jsx)(RouteFocusModal.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-2 justify-end", children: [
      (0, import_jsx_runtime.jsx)(RouteFocusModal.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", type: "button", children: "Cancel" }) }),
      (0, import_jsx_runtime.jsx)(
        Button,
        {
          size: "small",
          type: "button",
          onClick: onSubmit,
          isLoading: isSubmitting,
          children: "Save"
        }
      )
    ] }) })
  ] });
};
var Item = ({ item, preview, currencyCode }) => {
  if (item.variant_id) {
    return (0, import_jsx_runtime.jsx)(VariantItem, { item, preview, currencyCode });
  }
  return (0, import_jsx_runtime.jsx)(CustomItem, { item, preview, currencyCode });
};
var VariantItem = ({ item, preview, currencyCode }) => {
  const [editing, setEditing] = (0, import_react.useState)(false);
  const form = useForm({
    defaultValues: {
      quantity: item.quantity,
      unit_price: item.unit_price
    },
    resolver: t(variantItemSchema)
  });
  const actionId = (0, import_react.useMemo)(() => {
    var _a, _b;
    return (_b = (_a = item.actions) == null ? void 0 : _a.find((a) => a.action === "ITEM_ADD")) == null ? void 0 : _b.id;
  }, [item]);
  const { mutateAsync: updateActionItem, isPending: isUpdatingActionItem } = useDraftOrderUpdateActionItem(preview.id);
  const { mutateAsync: updateOriginalItem, isPending: isUpdatingOriginalItem } = useDraftOrderUpdateItem(preview.id);
  const isPending = isUpdatingActionItem || isUpdatingOriginalItem;
  const onSubmit = form.handleSubmit(async (data) => {
    if (convertNumber(data.unit_price) === item.unit_price && data.quantity === item.quantity) {
      setEditing(false);
      return;
    }
    if (!actionId) {
      await updateOriginalItem(
        {
          item_id: item.id,
          quantity: data.quantity,
          unit_price: convertNumber(data.unit_price)
        },
        {
          onSuccess: () => {
            setEditing(false);
          },
          onError: (e) => {
            toast.error(e.message);
          }
        }
      );
      return;
    }
    await updateActionItem(
      {
        action_id: actionId,
        quantity: data.quantity,
        unit_price: convertNumber(data.unit_price)
      },
      {
        onSuccess: () => {
          setEditing(false);
        },
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(Form$2, { ...form, children: (0, import_jsx_runtime.jsx)("form", { onSubmit, children: (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-[minmax(0,1fr)_minmax(0,1fr)_minmax(0,1fr)_28px] gap-3 px-4 py-2 bg-ui-bg-base shadow-elevation-card-rest rounded-lg items-center", children: [
    (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-3 w-full", children: [
      (0, import_jsx_runtime.jsx)(
        Thumbnail,
        {
          thumbnail: item.thumbnail,
          alt: item.product_title ?? void 0
        }
      ),
      (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col", children: [
        (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-1", children: [
          (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: item.product_title }),
          (0, import_jsx_runtime.jsxs)(
            Text,
            {
              size: "small",
              leading: "compact",
              className: "text-ui-fg-subtle",
              children: [
                "(",
                item.variant_title,
                ")"
              ]
            }
          )
        ] }),
        (0, import_jsx_runtime.jsx)(
          Text,
          {
            size: "small",
            leading: "compact",
            className: "text-ui-fg-subtle",
            children: item.variant_sku
          }
        )
      ] })
    ] }),
    editing ? (0, import_jsx_runtime.jsx)("div", { className: "flex-1 w-full", children: (0, import_jsx_runtime.jsx)(
      Form$2.Field,
      {
        control: form.control,
        name: "quantity",
        render: ({ field }) => {
          return (0, import_jsx_runtime.jsx)(Form$2.Item, { children: (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(NumberInput, { ...field }) }) });
        }
      }
    ) }) : (0, import_jsx_runtime.jsx)("div", { className: "flex-1 w-full", children: (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", children: item.quantity }) }),
    editing ? (0, import_jsx_runtime.jsx)("div", { className: "flex-1 w-full", children: (0, import_jsx_runtime.jsx)(
      Form$2.Field,
      {
        control: form.control,
        name: "unit_price",
        render: ({ field: { onChange, ...field } }) => {
          return (0, import_jsx_runtime.jsx)(Form$2.Item, { children: (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(
            CurrencyInput,
            {
              ...field,
              symbol: getNativeSymbol(currencyCode),
              code: currencyCode,
              onValueChange: (_value, _name, values) => onChange(values == null ? void 0 : values.value)
            }
          ) }) });
        }
      }
    ) }) : (0, import_jsx_runtime.jsx)("div", { className: "flex-1 flex items-center justify-end w-full", children: (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", children: getLocaleAmount(item.unit_price, currencyCode) }) }),
    (0, import_jsx_runtime.jsx)(
      IconButton,
      {
        type: "button",
        size: "small",
        onClick: editing ? onSubmit : () => {
          setEditing(true);
        },
        disabled: isPending,
        children: editing ? (0, import_jsx_runtime.jsx)(Check, {}) : (0, import_jsx_runtime.jsx)(PencilSquare, {})
      }
    )
  ] }) }) });
};
var variantItemSchema = objectType({
  quantity: numberType(),
  unit_price: unionType([numberType(), stringType()])
});
var CustomItem = ({ item, preview, currencyCode }) => {
  const [editing, setEditing] = (0, import_react.useState)(false);
  const { quantity, unit_price, title } = item;
  const form = useForm({
    defaultValues: {
      title,
      quantity,
      unit_price
    },
    resolver: t(customItemSchema)
  });
  (0, import_react.useEffect)(() => {
    form.reset({
      title,
      quantity,
      unit_price
    });
  }, [form, title, quantity, unit_price]);
  const actionId = (0, import_react.useMemo)(() => {
    var _a, _b;
    return (_b = (_a = item.actions) == null ? void 0 : _a.find((a) => a.action === "ITEM_ADD")) == null ? void 0 : _b.id;
  }, [item]);
  const { mutateAsync: updateActionItem, isPending: isUpdatingActionItem } = useDraftOrderUpdateActionItem(preview.id);
  const { mutateAsync: removeActionItem, isPending: isRemovingActionItem } = useDraftOrderRemoveActionItem(preview.id);
  const { mutateAsync: updateOriginalItem, isPending: isUpdatingOriginalItem } = useDraftOrderUpdateItem(preview.id);
  const isPending = isUpdatingActionItem || isUpdatingOriginalItem;
  const onSubmit = form.handleSubmit(async (data) => {
    if (convertNumber(data.unit_price) === item.unit_price && data.quantity === item.quantity && data.title === item.title) {
      setEditing(false);
      return;
    }
    if (!actionId) {
      await updateOriginalItem(
        {
          item_id: item.id,
          quantity: data.quantity,
          unit_price: convertNumber(data.unit_price)
        },
        {
          onSuccess: () => {
            setEditing(false);
          },
          onError: (e) => {
            toast.error(e.message);
          }
        }
      );
      return;
    }
    if (data.quantity === 0) {
      await removeActionItem(actionId, {
        onSuccess: () => {
          setEditing(false);
        },
        onError: (e) => {
          toast.error(e.message);
        }
      });
      return;
    }
    await updateActionItem(
      {
        action_id: actionId,
        quantity: data.quantity,
        unit_price: convertNumber(data.unit_price)
      },
      {
        onSuccess: () => {
          setEditing(false);
        },
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(Form$2, { ...form, children: (0, import_jsx_runtime.jsx)("form", { onSubmit, children: (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-[minmax(0,1fr)_minmax(0,1fr)_minmax(0,1fr)_28px] gap-3 px-4 py-2 bg-ui-bg-base shadow-elevation-card-rest rounded-lg items-center", children: [
    (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-3", children: [
      (0, import_jsx_runtime.jsx)(
        Thumbnail,
        {
          thumbnail: item.thumbnail,
          alt: item.title ?? void 0
        }
      ),
      editing ? (0, import_jsx_runtime.jsx)(
        Form$2.Field,
        {
          control: form.control,
          name: "title",
          render: ({ field }) => {
            return (0, import_jsx_runtime.jsx)(Form$2.Item, { children: (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }) });
          }
        }
      ) : (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", children: item.title })
    ] }),
    editing ? (0, import_jsx_runtime.jsx)(
      Form$2.Field,
      {
        control: form.control,
        name: "quantity",
        render: ({ field }) => {
          return (0, import_jsx_runtime.jsx)(Form$2.Item, { children: (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(NumberInput, { ...field }) }) });
        }
      }
    ) : (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", children: item.quantity }),
    editing ? (0, import_jsx_runtime.jsx)(
      Form$2.Field,
      {
        control: form.control,
        name: "unit_price",
        render: ({ field: { onChange, ...field } }) => {
          return (0, import_jsx_runtime.jsx)(Form$2.Item, { children: (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(
            CurrencyInput,
            {
              ...field,
              symbol: getNativeSymbol(currencyCode),
              code: currencyCode,
              onValueChange: (_value, _name, values) => onChange(values == null ? void 0 : values.value)
            }
          ) }) });
        }
      }
    ) : (0, import_jsx_runtime.jsx)("div", { className: "flex-1 flex items-center justify-end", children: (0, import_jsx_runtime.jsx)(Text, { size: "small", weight: "plus", children: getLocaleAmount(item.unit_price, currencyCode) }) }),
    (0, import_jsx_runtime.jsx)(
      IconButton,
      {
        type: "button",
        size: "small",
        onClick: editing ? onSubmit : () => {
          setEditing(true);
        },
        disabled: isPending,
        children: editing ? (0, import_jsx_runtime.jsx)(Check, {}) : (0, import_jsx_runtime.jsx)(PencilSquare, {})
      }
    )
  ] }) }) });
};
var StackedModalTrigger = ({
  type,
  setModalContent
}) => {
  const { setIsOpen } = useStackedModal();
  const onClick = (0, import_react.useCallback)(() => {
    setModalContent(type);
    setIsOpen(STACKED_MODAL_ID, true);
  }, [setModalContent, setIsOpen, type]);
  return (0, import_jsx_runtime.jsx)(StackedFocusModal.Trigger, { asChild: true, children: (0, import_jsx_runtime.jsx)(DropdownMenu.Item, { onClick, children: type === "add-items" ? "Add items" : "Add custom item" }) });
};
var VARIANT_PREFIX = "items";
var LIMIT = 50;
var ExistingItemsForm = ({ orderId, items }) => {
  const { setIsOpen } = useStackedModal();
  const [rowSelection, setRowSelection] = (0, import_react.useState)(
    items.reduce((acc, item) => {
      acc[item.variant_id] = true;
      return acc;
    }, {})
  );
  (0, import_react.useEffect)(() => {
    setRowSelection(
      items.reduce((acc, item) => {
        if (item.variant_id) {
          acc[item.variant_id] = true;
        }
        return acc;
      }, {})
    );
  }, [items]);
  const { q, order, offset } = useQueryParams(
    ["q", "order", "offset"],
    VARIANT_PREFIX
  );
  const { variants, count, isPending, isError, error } = useProductVariants(
    {
      q,
      order,
      offset: offset ? parseInt(offset) : void 0,
      limit: LIMIT
    },
    {
      placeholderData: keepPreviousData
    }
  );
  const columns = useColumns();
  const { mutateAsync } = useDraftOrderAddItems(orderId);
  const onSubmit = async () => {
    const ids = Object.keys(rowSelection).filter(
      (id) => !items.find((i) => i.variant_id === id)
    );
    await mutateAsync(
      {
        items: ids.map((id) => ({
          variant_id: id,
          quantity: 1
        }))
      },
      {
        onSuccess: () => {
          setRowSelection({});
          setIsOpen(STACKED_MODAL_ID, false);
        },
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  };
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime.jsxs)(
    StackedFocusModal.Content,
    {
      onOpenAutoFocus: (e) => {
        e.preventDefault();
        const searchInput = document.querySelector(
          "[data-modal-id='modal-search-input']"
        );
        if (searchInput) {
          searchInput.focus();
        }
      },
      children: [
        (0, import_jsx_runtime.jsxs)(StackedFocusModal.Header, { children: [
          (0, import_jsx_runtime.jsx)(StackedFocusModal.Title, { asChild: true, children: (0, import_jsx_runtime.jsx)("span", { className: "sr-only", children: "Product Variants" }) }),
          (0, import_jsx_runtime.jsx)(StackedFocusModal.Description, { asChild: true, children: (0, import_jsx_runtime.jsx)("span", { className: "sr-only", children: "Choose product variants to add to the order." }) })
        ] }),
        (0, import_jsx_runtime.jsx)(StackedFocusModal.Body, { className: "flex-1 overflow-hidden", children: (0, import_jsx_runtime.jsx)(
          DataTable2,
          {
            data: variants,
            columns,
            isLoading: isPending,
            getRowId: (row) => row.id,
            rowCount: count,
            prefix: VARIANT_PREFIX,
            layout: "fill",
            rowSelection: {
              state: rowSelection,
              onRowSelectionChange: setRowSelection,
              enableRowSelection: (row) => {
                return !items.find((i) => i.variant_id === row.original.id);
              }
            },
            autoFocusSearch: true
          }
        ) }),
        (0, import_jsx_runtime.jsx)(StackedFocusModal.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-2 justify-end", children: [
          (0, import_jsx_runtime.jsx)(StackedFocusModal.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", type: "button", children: "Cancel" }) }),
          (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "button", onClick: onSubmit, children: "Update items" })
        ] }) })
      ]
    }
  );
};
var columnHelper = createDataTableColumnHelper();
var useColumns = () => {
  return (0, import_react.useMemo)(() => {
    return [
      columnHelper.select(),
      columnHelper.accessor("product.title", {
        header: "Product",
        cell: ({ row }) => {
          var _a, _b, _c;
          return (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-2", children: [
            (0, import_jsx_runtime.jsx)(
              Thumbnail,
              {
                thumbnail: (_a = row.original.product) == null ? void 0 : _a.thumbnail,
                alt: (_b = row.original.product) == null ? void 0 : _b.title
              }
            ),
            (0, import_jsx_runtime.jsx)("span", { children: (_c = row.original.product) == null ? void 0 : _c.title })
          ] });
        },
        enableSorting: true
      }),
      columnHelper.accessor("title", {
        header: "Variant",
        enableSorting: true
      }),
      columnHelper.accessor("sku", {
        header: "SKU",
        cell: ({ getValue }) => {
          return getValue() ?? "-";
        },
        enableSorting: true
      }),
      columnHelper.accessor("updated_at", {
        header: "Updated",
        cell: ({ getValue }) => {
          return (0, import_jsx_runtime.jsx)(
            Tooltip,
            {
              content: getFullDate({ date: getValue(), includeTime: true }),
              children: (0, import_jsx_runtime.jsx)("span", { children: getFullDate({ date: getValue() }) })
            }
          );
        },
        enableSorting: true,
        sortAscLabel: "Oldest first",
        sortDescLabel: "Newest first"
      }),
      columnHelper.accessor("created_at", {
        header: "Created",
        cell: ({ getValue }) => {
          return (0, import_jsx_runtime.jsx)(
            Tooltip,
            {
              content: getFullDate({ date: getValue(), includeTime: true }),
              children: (0, import_jsx_runtime.jsx)("span", { children: getFullDate({ date: getValue() }) })
            }
          );
        },
        enableSorting: true,
        sortAscLabel: "Oldest first",
        sortDescLabel: "Newest first"
      })
    ];
  }, []);
};
var CustomItemForm = ({ orderId, currencyCode }) => {
  const { setIsOpen } = useStackedModal();
  const { mutateAsync: addItems } = useDraftOrderAddItems(orderId);
  const form = useForm({
    defaultValues: {
      title: "",
      quantity: 1,
      unit_price: ""
    },
    resolver: t(customItemSchema)
  });
  const onSubmit = form.handleSubmit(async (data) => {
    await addItems(
      {
        items: [
          {
            title: data.title,
            quantity: data.quantity,
            unit_price: convertNumber(data.unit_price)
          }
        ]
      },
      {
        onSuccess: () => {
          setIsOpen(STACKED_MODAL_ID, false);
        },
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(Form$2, { ...form, children: (0, import_jsx_runtime.jsx)(KeyboundForm, { onSubmit, children: (0, import_jsx_runtime.jsxs)(StackedFocusModal.Content, { children: [
    (0, import_jsx_runtime.jsx)(StackedFocusModal.Header, {}),
    (0, import_jsx_runtime.jsx)(StackedFocusModal.Body, { className: "flex flex-1 flex-col overflow-hidden", children: (0, import_jsx_runtime.jsx)("div", { className: "flex flex-1 flex-col items-center overflow-y-auto", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex w-full max-w-[720px] flex-col gap-y-6 px-2 py-16", children: [
      (0, import_jsx_runtime.jsxs)("div", { children: [
        (0, import_jsx_runtime.jsx)(StackedFocusModal.Title, { asChild: true, children: (0, import_jsx_runtime.jsx)(Heading, { children: "Add custom item" }) }),
        (0, import_jsx_runtime.jsx)(StackedFocusModal.Description, { asChild: true, children: (0, import_jsx_runtime.jsx)(Text, { size: "small", className: "text-ui-fg-subtle", children: "Add a custom item to the order. This will add a new line item that is not associated with an existing product." }) })
      ] }),
      (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
      (0, import_jsx_runtime.jsx)(
        Form$2.Field,
        {
          control: form.control,
          name: "title",
          render: ({ field }) => (0, import_jsx_runtime.jsx)(Form$2.Item, { children: (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-x-3", children: [
            (0, import_jsx_runtime.jsxs)("div", { children: [
              (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Title" }),
              (0, import_jsx_runtime.jsx)(Form$2.Hint, { children: "Enter the title of the item" })
            ] }),
            (0, import_jsx_runtime.jsxs)("div", { children: [
              (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
              (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
            ] })
          ] }) })
        }
      ),
      (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
      (0, import_jsx_runtime.jsx)(
        Form$2.Field,
        {
          control: form.control,
          name: "unit_price",
          render: ({ field: { onChange, ...field } }) => (0, import_jsx_runtime.jsx)(Form$2.Item, { children: (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-x-3", children: [
            (0, import_jsx_runtime.jsxs)("div", { children: [
              (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Unit price" }),
              (0, import_jsx_runtime.jsx)(Form$2.Hint, { children: "Enter the unit price of the item" })
            ] }),
            (0, import_jsx_runtime.jsxs)("div", { children: [
              (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)(
                CurrencyInput,
                {
                  symbol: getNativeSymbol(currencyCode),
                  code: currencyCode,
                  onValueChange: (_value, _name, values) => onChange(values == null ? void 0 : values.value),
                  ...field
                }
              ) }),
              (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
            ] })
          ] }) })
        }
      ),
      (0, import_jsx_runtime.jsx)(Divider, { variant: "dashed" }),
      (0, import_jsx_runtime.jsx)(
        Form$2.Field,
        {
          control: form.control,
          name: "quantity",
          render: ({ field }) => (0, import_jsx_runtime.jsx)(Form$2.Item, { children: (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-x-3", children: [
            (0, import_jsx_runtime.jsxs)("div", { children: [
              (0, import_jsx_runtime.jsx)(Form$2.Label, { children: "Quantity" }),
              (0, import_jsx_runtime.jsx)(Form$2.Hint, { children: "Enter the quantity of the item" })
            ] }),
            (0, import_jsx_runtime.jsxs)("div", { className: "flex-1 w-full", children: [
              (0, import_jsx_runtime.jsx)(Form$2.Control, { children: (0, import_jsx_runtime.jsx)("div", { className: "flex-1 w-full", children: (0, import_jsx_runtime.jsx)(NumberInput, { ...field, className: "w-full" }) }) }),
              (0, import_jsx_runtime.jsx)(Form$2.ErrorMessage, {})
            ] })
          ] }) })
        }
      )
    ] }) }) }),
    (0, import_jsx_runtime.jsx)(StackedFocusModal.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-2 justify-end", children: [
      (0, import_jsx_runtime.jsx)(StackedFocusModal.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", type: "button", children: "Cancel" }) }),
      (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "button", onClick: onSubmit, children: "Add item" })
    ] }) })
  ] }) }) });
};
var customItemSchema = objectType({
  title: stringType().min(1),
  quantity: numberType(),
  unit_price: unionType([numberType(), stringType()])
});
var widgetModule = { widgets: [] };
var routeModule = {
  routes: [
    {
      Component: List,
      path: "/draft-orders",
      handle: handle$1,
      children: [
        {
          Component: Create,
          path: "/draft-orders/create"
        }
      ]
    },
    {
      Component: ID,
      path: "/draft-orders/:id",
      handle,
      loader,
      children: [
        {
          Component: BillingAddress,
          path: "/draft-orders/:id/billing-address"
        },
        {
          Component: CustomItems,
          path: "/draft-orders/:id/custom-items"
        },
        {
          Component: Email,
          path: "/draft-orders/:id/email"
        },
        {
          Component: Metadata,
          path: "/draft-orders/:id/metadata"
        },
        {
          Component: Promotions,
          path: "/draft-orders/:id/promotions"
        },
        {
          Component: SalesChannel,
          path: "/draft-orders/:id/sales-channel"
        },
        {
          Component: Shipping,
          path: "/draft-orders/:id/shipping"
        },
        {
          Component: TransferOwnership,
          path: "/draft-orders/:id/transfer-ownership"
        },
        {
          Component: ShippingAddress,
          path: "/draft-orders/:id/shipping-address"
        },
        {
          Component: Items,
          path: "/draft-orders/:id/items"
        }
      ]
    }
  ]
};
var menuItemModule = {
  menuItems: [
    {
      label: config.label,
      icon: void 0,
      path: "/draft-orders",
      nested: "/orders"
    }
  ]
};
var formModule = { customFields: {} };
var displayModule = {
  displays: {}
};
var plugin = {
  widgetModule,
  routeModule,
  menuItemModule,
  formModule,
  displayModule
};
export {
  plugin as default
};
//# sourceMappingURL=@medusajs_draft-order_admin.js.map
