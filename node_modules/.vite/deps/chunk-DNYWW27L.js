import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState
} from "./chunk-PXKNUQDM.js";
import {
  useTranslation
} from "./chunk-ZDVERLX5.js";
import {
  Hint,
  InformationCircleSolid,
  Label,
  Text,
  Tooltip,
  clx,
  dist_exports
} from "./chunk-4QBNNGLV.js";
import {
  require_jsx_runtime
} from "./chunk-KBTYAULA.js";
import {
  require_react
} from "./chunk-QCHXOAYK.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/chunk-OBQI23QM.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var Provider = FormProvider;
var FormFieldContext = (0, import_react.createContext)(
  {}
);
var Field = ({
  ...props
}) => {
  return (0, import_jsx_runtime.jsx)(FormFieldContext.Provider, { value: { name: props.name }, children: (0, import_jsx_runtime.jsx)(Controller, { ...props }) });
};
var FormItemContext = (0, import_react.createContext)(
  {}
);
var useFormField = () => {
  const fieldContext = (0, import_react.useContext)(FormFieldContext);
  const itemContext = (0, import_react.useContext)(FormItemContext);
  const { getFieldState } = useFormContext();
  const formState = useFormState({ name: fieldContext.name });
  const fieldState = getFieldState(fieldContext.name, formState);
  if (!fieldContext) {
    throw new Error("useFormField should be used within a FormField");
  }
  const { id } = itemContext;
  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formLabelId: `${id}-form-item-label`,
    formDescriptionId: `${id}-form-item-description`,
    formErrorMessageId: `${id}-form-item-message`,
    ...fieldState
  };
};
var Item = (0, import_react.forwardRef)(
  ({ className, ...props }, ref) => {
    const id = (0, import_react.useId)();
    return (0, import_jsx_runtime.jsx)(FormItemContext.Provider, { value: { id }, children: (0, import_jsx_runtime.jsx)(
      "div",
      {
        ref,
        className: clx("flex flex-col space-y-2", className),
        ...props
      }
    ) });
  }
);
Item.displayName = "Form.Item";
var Label2 = (0, import_react.forwardRef)(({ className, optional = false, tooltip, icon, ...props }, ref) => {
  const { formLabelId, formItemId } = useFormField();
  const { t } = useTranslation();
  return (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-1", children: [
    (0, import_jsx_runtime.jsx)(
      Label,
      {
        id: formLabelId,
        ref,
        className: clx(className),
        htmlFor: formItemId,
        size: "small",
        weight: "plus",
        ...props
      }
    ),
    tooltip && (0, import_jsx_runtime.jsx)(Tooltip, { content: tooltip, children: (0, import_jsx_runtime.jsx)(InformationCircleSolid, { className: "text-ui-fg-muted" }) }),
    icon,
    optional && (0, import_jsx_runtime.jsxs)(Text, { size: "small", leading: "compact", className: "text-ui-fg-muted", children: [
      "(",
      t("fields.optional"),
      ")"
    ] })
  ] });
});
Label2.displayName = "Form.Label";
var Control = (0, import_react.forwardRef)(({ ...props }, ref) => {
  const {
    error,
    formItemId,
    formDescriptionId,
    formErrorMessageId,
    formLabelId
  } = useFormField();
  return (0, import_jsx_runtime.jsx)(
    dist_exports.Root,
    {
      ref,
      id: formItemId,
      "aria-describedby": !error ? `${formDescriptionId}` : `${formDescriptionId} ${formErrorMessageId}`,
      "aria-invalid": !!error,
      "aria-labelledby": formLabelId,
      ...props
    }
  );
});
Control.displayName = "Form.Control";
var Hint2 = (0, import_react.forwardRef)(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();
  return (0, import_jsx_runtime.jsx)(
    Hint,
    {
      ref,
      id: formDescriptionId,
      className,
      ...props
    }
  );
});
Hint2.displayName = "Form.Hint";
var ErrorMessage = (0, import_react.forwardRef)(({ className, children, ...props }, ref) => {
  const { error, formErrorMessageId } = useFormField();
  const msg = error ? String(error == null ? void 0 : error.message) : children;
  if (!msg || msg === "undefined") {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(
    Hint,
    {
      ref,
      id: formErrorMessageId,
      className,
      variant: error ? "error" : "info",
      ...props,
      children: msg
    }
  );
});
ErrorMessage.displayName = "Form.ErrorMessage";
var Form = Object.assign(Provider, {
  Item,
  Label: Label2,
  Control,
  Hint: Hint2,
  ErrorMessage,
  Field
});

export {
  Form
};
//# sourceMappingURL=chunk-DNYWW27L.js.map
