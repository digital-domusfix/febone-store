import {
  castNumber
} from "./chunk-EZLR4STK.js";
import {
  external_exports
} from "./chunk-4E3X3L63.js";
import {
  instance
} from "./chunk-MPXR7HT5.js";

// node_modules/@medusajs/dashboard/dist/chunk-ZQRKUG6J.mjs
var optionalInt = external_exports.union([external_exports.string(), external_exports.number()]).optional().refine(
  (value) => {
    if (value === "" || value === void 0) {
      return true;
    }
    return Number.isInteger(castNumber(value));
  },
  {
    message: instance.t("validation.mustBeInt")
  }
).refine(
  (value) => {
    if (value === "" || value === void 0) {
      return true;
    }
    return castNumber(value) >= 0;
  },
  {
    message: instance.t("validation.mustBePositive")
  }
);
var optionalFloat = external_exports.union([external_exports.string(), external_exports.number()]).optional().refine(
  (value) => {
    if (value === "" || value === void 0) {
      return true;
    }
    return castNumber(value) >= 0;
  },
  {
    message: instance.t("validation.mustBePositive")
  }
);
var metadataFormSchema = external_exports.array(
  external_exports.object({
    key: external_exports.string(),
    value: external_exports.unknown(),
    isInitial: external_exports.boolean().optional(),
    isDeleted: external_exports.boolean().optional(),
    isIgnored: external_exports.boolean().optional()
  })
);
function partialFormValidation(form, fields, schema) {
  form.clearErrors(fields);
  const values = fields.reduce((acc, key) => {
    acc[key] = form.getValues(key);
    return acc;
  }, {});
  const validationResult = schema.safeParse(values);
  if (!validationResult.success) {
    validationResult.error.errors.forEach(({ path, message, code }) => {
      form.setError(path.join("."), {
        type: code,
        message
      });
    });
    return false;
  }
  return true;
}

export {
  optionalInt,
  optionalFloat,
  partialFormValidation
};
//# sourceMappingURL=chunk-T2INKJ3H.js.map
